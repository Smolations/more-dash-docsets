var search_data = {"index":{"searchIndex":["argumenterror","array","bignum","binding","class","comparable","continuation","data","dir","eoferror","enumerable","enumerator","errno","exception","falseclass","file","constants","stat","filetest","fixnum","float","floatdomainerror","gc","hash","io","ioerror","indexerror","integer","interrupt","kernel","loaderror","localjumperror","marshal","matchdata","math","method","module","nameerror","message","nilclass","nomemoryerror","nomethoderror","notimplementederror","numeric","object","objectspace","precision","proc","process","gid","status","sys","uid","range","rangeerror","regexp","regexperror","runtimeerror","scripterror","securityerror","signal","signalexception","standarderror","stopiteration","string","struct","symbol","syntaxerror","systemcallerror","systemexit","systemstackerror","thread","threaderror","threadgroup","time","trueclass","typeerror","unboundmethod","zerodivisionerror","fatal","unknown~()","=~()","=~()",">()",">()",">()",">()",">=()",">=()",">=()",">=()",">>()",">>()",">>()","array()","float()","integer()","string()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","[]=()","[]=()","^()","^()","^()","^()","^()","__id__()","__method__()","__send__()","_dump()","_id2ref()","_load()","`()","abort()","abort()","abort_on_exception()","abort_on_exception()","abort_on_exception=()","abort_on_exception=()","abs()","abs()","abs()","abs()","acos()","acosh()","add()","add_finalizer()","alias_method()","alive?()","all?()","all_symbols()","allocate()","ancestors()","any?()","append_features()","args()","arity()","arity()","arity()","asctime()","asin()","asinh()","assoc()","at()","at()","at_exit()","atan()","atan2()","atanh()","atime()","atime()","atime()","attr()","attr_accessor()","attr_reader()","attr_writer()","autoload()","autoload()","autoload?()","autoload?()","backtrace()","basename()","begin()","begin()","between?()","bind()","binding()","binding()","binmode()","blksize()","block_given?()","blockdev?()","blockdev?()","blockdev?()","blocks()","bytes()","bytes()","bytesize()","call()","call()","call()","call_finalizer()","callcc()","caller()","capitalize()","capitalize!()","captures()","casecmp()","casefold?()","catch()","ceil()","ceil()","ceil()","center()","change_privilege()","change_privilege()","chardev?()","chardev?()","chardev?()","chars()","chars()","chdir()","chmod()","chmod()","choice()","chomp()","chomp()","chomp!()","chomp!()","chop()","chop()","chop!()","chop!()","chown()","chown()","chr()","chroot()","class()","class_eval()","class_exec()","class_variable_defined?()","class_variable_get()","class_variable_set()","class_variables()","clear()","clear()","clone()","clone()","clone()","clone()","clone()","close()","close()","close_read()","close_write()","closed?()","coerce()","coerce()","coerce()","collect()","collect()","collect!()","combination()","compact()","compact!()","compile()","concat()","concat()","const_defined?()","const_get()","const_missing()","const_set()","constants()","constants()","coredump?()","cos()","cosh()","count()","count()","count()","critical()","critical=()","crypt()","ctime()","ctime()","ctime()","ctime()","current()","cycle()","cycle()","day()","default()","default=()","default_proc()","define_finalizer()","define_method()","delete()","delete()","delete()","delete()","delete()","delete!()","delete_at()","delete_if()","delete_if()","detach()","detect()","dev()","dev_major()","dev_minor()","directory?()","directory?()","directory?()","dirname()","disable()","display()","div()","div()","div()","divmod()","divmod()","divmod()","divmod()","downcase()","downcase!()","downto()","drop()","drop()","drop_while()","drop_while()","dst?()","dump()","dump()","dup()","dup()","dup()","each()","each()","each()","each()","each()","each()","each()","each()","each_byte()","each_byte()","each_char()","each_char()","each_cons()","each_index()","each_key()","each_line()","each_line()","each_object()","each_pair()","each_pair()","each_slice()","each_value()","each_with_index()","each_with_index()","egid()","egid=()","eid()","eid()","empty?()","empty?()","empty?()","enable()","enclose()","enclosed?()","end()","end()","end_with?()","entries()","entries()","enum_cons()","enum_for()","enum_slice()","enum_with_index()","eof()","eof?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","equal?()","erf()","erfc()","errno()","escape()","euid()","euid=()","eval()","eval()","even?()","even?()","exception()","exception()","exclude_end?()","exec()","exec()","executable?()","executable?()","executable?()","executable_real?()","executable_real?()","executable_real?()","exist?()","exist?()","exists?()","exists?()","exit()","exit()","exit()","exit()","exit!()","exit!()","exit!()","exit_value()","exited?()","exitstatus()","exp()","expand_path()","extend()","extend_object()","extended()","extname()","fail()","fcntl()","fdiv()","fdiv()","fdiv()","fetch()","fetch()","file?()","file?()","file?()","fileno()","fill()","finalizers()","find()","find_all()","find_index()","find_index()","finite?()","first()","first()","first()","flatten()","flatten!()","flock()","floor()","floor()","floor()","flush()","fnmatch()","fnmatch?()","for_fd()","foreach()","foreach()","fork()","fork()","fork()","format()","freeze()","freeze()","frexp()","frozen?()","frozen?()","fsync()","ftype()","ftype()","garbage_collect()","garbage_collect()","getbyte()","getc()","getc()","getegid()","geteuid()","getgid()","getgm()","getlocal()","getpgid()","getpgrp()","getpriority()","getrlimit()","gets()","gets()","getuid()","getutc()","getwd()","gid()","gid()","gid=()","glob()","global_variables()","gm()","gmt?()","gmt_offset()","gmtime()","gmtoff()","grant_privilege()","grant_privilege()","grep()","group()","group_by()","groups()","groups=()","grpowned?()","grpowned?()","grpowned?()","gsub()","gsub()","gsub!()","gsub!()","has_key?()","has_value?()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hex()","hour()","hypot()","id()","id2name()","id2name()","identical?()","identical?()","include()","include?()","include?()","include?()","include?()","include?()","include?()","included()","included()","included_modules()","index()","index()","index()","indexes()","indexes()","indices()","indices()","induced_from()","induced_from()","induced_from()","infinite?()","inherited()","initgroups()","initialize_copy()","initialize_copy()","initialize_copy()","inject()","ino()","insert()","insert()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","instance_eval()","instance_exec()","instance_method()","instance_methods()","instance_of?()","instance_variable_defined?()","instance_variable_get()","instance_variable_set()","instance_variables()","integer?()","integer?()","intern()","invert()","ioctl()","is_a?()","isatty()","isdst()","issetugid()","iterator?()","join()","join()","join()","kcode()","key?()","key?()","keys()","keys()","kill()","kill()","kill()","kill!()","kind_of?()","lambda()","last()","last()","last_match()","lchmod()","lchown()","ldexp()","length()","length()","length()","length()","length()","lineno()","lineno=()","lines()","lines()","link()","list()","list()","list()","ljust()","load()","load()","local()","local_variables()","localtime()","log()","log10()","loop()","lstat()","lstat()","lstrip()","lstrip!()","main()","map()","map()","map!()","marshal_dump()","marshal_load()","match()","match()","max()","max_by()","maxgroups()","maxgroups=()","mday()","member?()","member?()","member?()","members()","merge()","merge!()","message()","method()","method_added()","method_defined?()","method_missing()","method_removed()","method_undefined()","methods()","min()","min()","min_by()","minmax()","minmax_by()","mkdir()","mktime()","mode()","module_eval()","module_exec()","module_function()","modulo()","modulo()","modulo()","modulo()","mon()","month()","mtime()","mtime()","mtime()","name()","name()","name()","name()","nan?()","nesting()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","next()","next()","next()","next!()","nil?()","nil?()","nitems()","nlink()","none?()","nonzero?()","now()","object_id()","oct()","odd?()","odd?()","offset()","one?()","open()","open()","open()","options()","ord()","owned?()","owned?()","owned?()","owner()","owner()","p()","pack()","partition()","partition()","pass()","path()","path()","permutation()","pid()","pid()","pid()","pipe()","pipe?()","pipe?()","pipe?()","pop()","popen()","pos()","pos()","pos=()","pos=()","post_match()","ppid()","pre_match()","prec()","prec_f()","prec_i()","pred()","print()","print()","printf()","printf()","priority()","priority=()","private()","private_class_method()","private_instance_methods()","private_method_defined?()","private_methods()","proc()","product()","protected()","protected_instance_methods()","protected_method_defined?()","protected_methods()","public()","public_class_method()","public_instance_methods()","public_method_defined?()","public_methods()","push()","putc()","putc()","puts()","puts()","pwd()","quo()","quo()","quo()","quote()","raise()","raise()","rand()","rassoc()","rdev()","rdev_major()","rdev_minor()","re_exchange()","re_exchange()","re_exchangeable?()","re_exchangeable?()","read()","read()","read()","read_nonblock()","readable?()","readable?()","readable?()","readable_real?()","readable_real?()","readable_real?()","readbyte()","readchar()","readline()","readline()","readlines()","readlines()","readlines()","readlink()","readpartial()","reason()","receiver()","reduce()","rehash()","reject()","reject()","reject()","reject!()","reject!()","remainder()","remainder()","remove_class_variable()","remove_const()","remove_finalizer()","remove_instance_variable()","remove_method()","rename()","reopen()","replace()","replace()","replace()","require()","respond_to?()","restore()","reverse()","reverse()","reverse!()","reverse!()","reverse_each()","reverse_each()","rewind()","rewind()","rewind()","rid()","rid()","rindex()","rindex()","rjust()","rmdir()","round()","round()","round()","rpartition()","rstrip()","rstrip!()","run()","safe_level()","scan()","scan()","sec()","seek()","seek()","select()","select()","select()","select()","select()","select()","select()","send()","set_backtrace()","set_trace_func()","setegid()","seteuid()","setgid()","setgid?()","setgid?()","setgid?()","setpgid()","setpgrp()","setpriority()","setregid()","setresgid()","setresuid()","setreuid()","setrgid()","setrlimit()","setruid()","setsid()","setuid()","setuid?()","setuid?()","setuid?()","shift()","shift()","shuffle()","shuffle!()","sid_available?()","sid_available?()","signaled?()","sin()","singleton_method_added()","singleton_method_added()","singleton_method_removed()","singleton_method_undefined()","singleton_methods()","sinh()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size?()","size?()","size?()","sleep()","slice()","slice()","slice!()","slice!()","socket?()","socket?()","socket?()","sort()","sort()","sort()","sort!()","sort_by()","source()","split()","split()","split()","sprintf()","sqrt()","squeeze()","squeeze!()","srand()","start()","start()","start_with?()","stat()","stat()","status()","status()","step()","step()","sticky?()","sticky?()","sticky?()","stop()","stop?()","stopped?()","stopsig()","store()","stress()","stress=()","strftime()","string()","strip()","strip!()","sub()","sub()","sub!()","sub!()","succ()","succ()","succ()","succ!()","success?()","success?()","sum()","superclass()","swapcase()","swapcase!()","switch()","switch()","symlink()","symlink?()","symlink?()","symlink?()","sync()","sync=()","syscall()","sysopen()","sysread()","sysseek()","system()","syswrite()","taint()","tainted?()","take()","take()","take_while()","take_while()","tan()","tanh()","tap()","tell()","tell()","terminate()","terminate!()","termsig()","test()","throw()","times()","times()","times()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_ary()","to_enum()","to_f()","to_f()","to_f()","to_f()","to_f()","to_f()","to_hash()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_int()","to_int()","to_int()","to_int()","to_io()","to_proc()","to_proc()","to_proc()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_str()","to_str()","to_sym()","to_sym()","to_sym()","tr()","tr!()","tr_s()","tr_s!()","trace_var()","transpose()","trap()","trap()","truncate()","truncate()","truncate()","truncate()","truncate()","tty?()","tv_sec()","tv_usec()","type()","uid()","uid()","uid=()","umask()","unbind()","undef_method()","undefine_finalizer()","ungetc()","union()","uniq()","uniq!()","unlink()","unlink()","unpack()","unshift()","untaint()","untrace_var()","upcase()","upcase!()","update()","upto()","upto()","usec()","utc()","utc()","utc?()","utc_offset()","utime()","value()","value?()","values()","values()","values_at()","values_at()","values_at()","values_at()","wait()","wait2()","waitall()","waitpid()","waitpid2()","wakeup()","warn()","wday()","with_index()","writable?()","writable?()","writable?()","writable_real?()","writable_real?()","writable_real?()","write()","write_nonblock()","yday()","year()","zero?()","zero?()","zero?()","zero?()","zero?()","zero?()","zip()","zip()","zone()","|()","|()","|()","|()","|()","|()","~()","~()","~()"],"longSearchIndex":["argumenterror","array","bignum","binding","class","comparable","continuation","data","dir","eoferror","enumerable","enumerable::enumerator","errno","exception","falseclass","file","file::constants","file::stat","filetest","fixnum","float","floatdomainerror","gc","hash","io","ioerror","indexerror","integer","interrupt","kernel","loaderror","localjumperror","marshal","matchdata","math","method","module","nameerror","nameerror::message","nilclass","nomemoryerror","nomethoderror","notimplementederror","numeric","object","objectspace","precision","proc","process","process::gid","process::status","process::sys","process::uid","range","rangeerror","regexp","regexperror","runtimeerror","scripterror","securityerror","signal","signalexception","standarderror","stopiteration","string","struct","symbol","syntaxerror","systemcallerror","systemexit","systemstackerror","thread","threaderror","threadgroup","time","trueclass","typeerror","unboundmethod","zerodivisionerror","fatal","unknown","bignum#%()","fixnum#%()","float#%()","string#%()","array#&()","bignum#&()","falseclass#&()","fixnum#&()","nilclass#&()","process::status#&()","trueclass#&()","array#*()","bignum#*()","fixnum#*()","float#*()","string#*()","bignum#**()","fixnum#**()","float#**()","array#+()","bignum#+()","fixnum#+()","float#+()","string#+()","time#+()","numeric#+@()","array#-()","bignum#-()","fixnum#-()","float#-()","time#-()","bignum#-@()","fixnum#-@()","float#-@()","numeric#-@()","bignum#/()","fixnum#/()","float#/()","comparable#<()","fixnum#<()","float#<()","module#<()","array#<<()","bignum#<<()","fixnum#<<()","io#<<()","string#<<()","comparable#<=()","fixnum#<=()","float#<=()","module#<=()","array#<=>()","bignum#<=>()","file::stat#<=>()","fixnum#<=>()","float#<=>()","module#<=>()","numeric#<=>()","string#<=>()","time#<=>()","array#==()","bignum#==()","comparable#==()","fixnum#==()","float#==()","hash#==()","method#==()","module#==()","object#==()","proc#==()","process::status#==()","range#==()","regexp#==()","string#==()","struct#==()","unboundmethod#==()","module#===()","object#===()","range#===()","regexp#===()","symbol#===()","systemcallerror::===()","object#=~()","regexp#=~()","string#=~()","comparable#>()","fixnum#>()","float#>()","module#>()","comparable#>=()","fixnum#>=()","float#>=()","module#>=()","bignum#>>()","fixnum#>>()","process::status#>>()","kernel#array()","kernel#float()","kernel#integer()","kernel#string()","array#[]()","array::[]()","bignum#[]()","continuation#[]()","dir::[]()","fixnum#[]()","hash::[]()","hash#[]()","matchdata#[]()","method#[]()","proc#[]()","string#[]()","struct#[]()","thread#[]()","array#[]=()","hash#[]=()","string#[]=()","struct#[]=()","thread#[]=()","bignum#^()","falseclass#^()","fixnum#^()","nilclass#^()","trueclass#^()","object#__id__()","kernel#__method__()","object#__send__()","time#_dump()","objectspace::_id2ref()","time::_load()","kernel#`()","kernel#abort()","process::abort()","thread#abort_on_exception()","thread::abort_on_exception()","thread#abort_on_exception=()","thread::abort_on_exception=()","bignum#abs()","fixnum#abs()","float#abs()","numeric#abs()","math::acos()","math::acosh()","threadgroup#add()","objectspace::add_finalizer()","module#alias_method()","thread#alive?()","enumerable#all?()","symbol::all_symbols()","class#allocate()","module#ancestors()","enumerable#any?()","module#append_features()","nomethoderror#args()","method#arity()","proc#arity()","unboundmethod#arity()","time#asctime()","math::asin()","math::asinh()","array#assoc()","array#at()","time::at()","kernel#at_exit()","math::atan()","math::atan2()","math::atanh()","file::atime()","file#atime()","file::stat#atime()","module#attr()","module#attr_accessor()","module#attr_reader()","module#attr_writer()","kernel#autoload()","module#autoload()","kernel#autoload?()","module#autoload?()","exception#backtrace()","file::basename()","matchdata#begin()","range#begin()","comparable#between?()","unboundmethod#bind()","kernel#binding()","proc#binding()","io#binmode()","file::stat#blksize()","kernel#block_given?()","file::blockdev?()","file::stat#blockdev?()","filetest#blockdev?()","file::stat#blocks()","io#bytes()","string#bytes()","string#bytesize()","continuation#call()","method#call()","proc#call()","objectspace::call_finalizer()","kernel#callcc()","kernel#caller()","string#capitalize()","string#capitalize!()","matchdata#captures()","string#casecmp()","regexp#casefold?()","kernel#catch()","float#ceil()","integer#ceil()","numeric#ceil()","string#center()","process::gid::change_privilege()","process::uid::change_privilege()","file::chardev?()","file::stat#chardev?()","filetest#chardev?()","io#chars()","string#chars()","dir::chdir()","file::chmod()","file#chmod()","array#choice()","kernel#chomp()","string#chomp()","kernel#chomp!()","string#chomp!()","kernel#chop()","string#chop()","kernel#chop!()","string#chop!()","file#chown()","file::chown()","integer#chr()","dir::chroot()","object#class()","module#class_eval()","module#class_exec()","module#class_variable_defined?()","module#class_variable_get()","module#class_variable_set()","module#class_variables()","array#clear()","hash#clear()","binding#clone()","method#clone()","object#clone()","proc#clone()","unboundmethod#clone()","dir#close()","io#close()","io#close_read()","io#close_write()","io#closed?()","bignum#coerce()","float#coerce()","numeric#coerce()","array#collect()","enumerable#collect()","array#collect!()","array#combination()","array#compact()","array#compact!()","regexp::compile()","array#concat()","string#concat()","module#const_defined?()","module#const_get()","module#const_missing()","module#const_set()","module::constants()","module#constants()","process::status#coredump?()","math::cos()","math::cosh()","array#count()","enumerable#count()","string#count()","thread::critical()","thread::critical=()","string#crypt()","file::ctime()","file#ctime()","file::stat#ctime()","time#ctime()","thread::current()","array#cycle()","enumerable#cycle()","time#day()","hash#default()","hash#default=()","hash#default_proc()","objectspace::define_finalizer()","module#define_method()","array#delete()","dir::delete()","file::delete()","hash#delete()","string#delete()","string#delete!()","array#delete_at()","array#delete_if()","hash#delete_if()","process::detach()","enumerable#detect()","file::stat#dev()","file::stat#dev_major()","file::stat#dev_minor()","file::directory?()","file::stat#directory?()","filetest#directory?()","file::dirname()","gc::disable()","object#display()","bignum#div()","fixnum#div()","numeric#div()","bignum#divmod()","fixnum#divmod()","float#divmod()","numeric#divmod()","string#downcase()","string#downcase!()","integer#downto()","array#drop()","enumerable#drop()","array#drop_while()","enumerable#drop_while()","time#dst?()","marshal::dump()","string#dump()","binding#dup()","object#dup()","proc#dup()","array#each()","dir#each()","enumerable::enumerator#each()","hash#each()","io#each()","range#each()","string#each()","struct#each()","io#each_byte()","string#each_byte()","io#each_char()","string#each_char()","enumerable#each_cons()","array#each_index()","hash#each_key()","io#each_line()","string#each_line()","objectspace::each_object()","hash#each_pair()","struct#each_pair()","enumerable#each_slice()","hash#each_value()","enumerable#each_with_index()","enumerable::enumerator#each_with_index()","process::egid()","process::egid=()","process::gid::eid()","process::uid::eid()","array#empty?()","hash#empty?()","string#empty?()","gc::enable()","threadgroup#enclose()","threadgroup#enclosed?()","matchdata#end()","range#end()","string#end_with?()","dir::entries()","enumerable#entries()","enumerable#enum_cons()","object#enum_for()","enumerable#enum_slice()","enumerable#enum_with_index()","io#eof()","io#eof?()","array#eql?()","bignum#eql?()","float#eql?()","hash#eql?()","numeric#eql?()","object#eql?()","range#eql?()","regexp#eql?()","string#eql?()","struct#eql?()","time#eql?()","object#equal?()","math::erf()","math::erfc()","systemcallerror#errno()","regexp::escape()","process::euid()","process::euid=()","binding#eval()","kernel#eval()","fixnum#even?()","integer#even?()","exception#exception()","exception::exception()","range#exclude_end?()","kernel#exec()","process::exec()","file::executable?()","file::stat#executable?()","filetest#executable?()","file::executable_real?()","file::stat#executable_real?()","filetest#executable_real?()","file::exist?()","filetest#exist?()","file::exists?()","filetest#exists?()","kernel#exit()","process::exit()","thread::exit()","thread#exit()","kernel#exit!()","process::exit!()","thread#exit!()","localjumperror#exit_value()","process::status#exited?()","process::status#exitstatus()","math::exp()","file::expand_path()","object#extend()","module#extend_object()","module#extended()","file::extname()","kernel#fail()","io#fcntl()","bignum#fdiv()","fixnum#fdiv()","numeric#fdiv()","array#fetch()","hash#fetch()","file::file?()","file::stat#file?()","filetest#file?()","io#fileno()","array#fill()","objectspace::finalizers()","enumerable#find()","enumerable#find_all()","array#find_index()","enumerable#find_index()","float#finite?()","array#first()","enumerable#first()","range#first()","array#flatten()","array#flatten!()","file#flock()","float#floor()","integer#floor()","numeric#floor()","io#flush()","file::fnmatch()","file::fnmatch?()","io::for_fd()","dir::foreach()","io::foreach()","kernel#fork()","process::fork()","thread::fork()","kernel#format()","module#freeze()","object#freeze()","math::frexp()","array#frozen?()","object#frozen?()","io#fsync()","file::ftype()","file::stat#ftype()","gc#garbage_collect()","objectspace::garbage_collect()","io#getbyte()","io#getc()","kernel#getc()","process::sys::getegid()","process::sys::geteuid()","process::sys::getgid()","time#getgm()","time#getlocal()","process::getpgid()","process::getpgrp()","process::getpriority()","process::getrlimit()","io#gets()","kernel#gets()","process::sys::getuid()","time#getutc()","dir::getwd()","file::stat#gid()","process::gid()","process::gid=()","dir::glob()","kernel#global_variables()","time::gm()","time#gmt?()","time#gmt_offset()","time#gmtime()","time#gmtoff()","process::gid::grant_privilege()","process::uid::grant_privilege()","enumerable#grep()","thread#group()","enumerable#group_by()","process::groups()","process::groups=()","file::grpowned?()","file::stat#grpowned?()","filetest#grpowned?()","kernel#gsub()","string#gsub()","kernel#gsub!()","string#gsub!()","hash#has_key?()","hash#has_value?()","array#hash()","bignum#hash()","float#hash()","hash#hash()","object#hash()","range#hash()","regexp#hash()","string#hash()","struct#hash()","time#hash()","string#hex()","time#hour()","math::hypot()","object#id()","fixnum#id2name()","symbol#id2name()","file::identical?()","filetest#identical?()","module#include()","array#include?()","enumerable#include?()","hash#include?()","module#include?()","range#include?()","string#include?()","module#included()","precision::included()","module#included_modules()","array#index()","hash#index()","string#index()","array#indexes()","hash#indexes()","array#indices()","hash#indices()","fixnum::induced_from()","float::induced_from()","integer::induced_from()","float#infinite?()","class#inherited()","process::initgroups()","array#initialize_copy()","hash#initialize_copy()","string#initialize_copy()","enumerable#inject()","file::stat#ino()","array#insert()","string#insert()","array#inspect()","dir#inspect()","exception#inspect()","file::stat#inspect()","hash#inspect()","io#inspect()","matchdata#inspect()","method#inspect()","nilclass#inspect()","object#inspect()","process::status#inspect()","range#inspect()","regexp#inspect()","string#inspect()","struct#inspect()","symbol#inspect()","thread#inspect()","time#inspect()","unboundmethod#inspect()","object#instance_eval()","object#instance_exec()","module#instance_method()","module#instance_methods()","object#instance_of?()","object#instance_variable_defined?()","object#instance_variable_get()","object#instance_variable_set()","object#instance_variables()","integer#integer?()","numeric#integer?()","string#intern()","hash#invert()","io#ioctl()","object#is_a?()","io#isatty()","time#isdst()","process::sys::issetugid()","kernel#iterator?()","array#join()","file::join()","thread#join()","regexp#kcode()","hash#key?()","thread#key?()","hash#keys()","thread#keys()","process::kill()","thread#kill()","thread::kill()","thread#kill!()","object#kind_of?()","kernel#lambda()","array#last()","range#last()","regexp::last_match()","file::lchmod()","file::lchown()","math::ldexp()","array#length()","hash#length()","matchdata#length()","string#length()","struct#length()","io#lineno()","io#lineno=()","io#lines()","string#lines()","file::link()","signal::list()","thread::list()","threadgroup#list()","string#ljust()","kernel#load()","marshal::load()","time::local()","kernel#local_variables()","time#localtime()","math::log()","math::log10()","kernel#loop()","file#lstat()","file::lstat()","string#lstrip()","string#lstrip!()","thread::main()","array#map()","enumerable#map()","array#map!()","time#marshal_dump()","time#marshal_load()","regexp#match()","string#match()","enumerable#max()","enumerable#max_by()","process::maxgroups()","process::maxgroups=()","time#mday()","enumerable#member?()","hash#member?()","range#member?()","struct#members()","hash#merge()","hash#merge!()","exception#message()","object#method()","module#method_added()","module#method_defined?()","kernel#method_missing()","module#method_removed()","module#method_undefined()","object#methods()","enumerable#min()","time#min()","enumerable#min_by()","enumerable#minmax()","enumerable#minmax_by()","dir::mkdir()","time::mktime()","file::stat#mode()","module#module_eval()","module#module_exec()","module#module_function()","bignum#modulo()","fixnum#modulo()","float#modulo()","numeric#modulo()","time#mon()","time#month()","file#mtime()","file::mtime()","file::stat#mtime()","method#name()","module#name()","nameerror#name()","unboundmethod#name()","float#nan?()","module::nesting()","array::new()","class#new()","class::new()","dir::new()","enumerable::enumerator::new()","exception::new()","file::new()","file::stat::new()","hash::new()","io::new()","interrupt::new()","module::new()","nameerror::new()","nomethoderror::new()","object::new()","proc::new()","range::new()","regexp::new()","signalexception::new()","string::new()","struct::new()","systemcallerror::new()","systemexit::new()","thread::new()","time::new()","enumerable::enumerator#next()","integer#next()","string#next()","string#next!()","nilclass#nil?()","object#nil?()","array#nitems()","file::stat#nlink()","enumerable#none?()","numeric#nonzero?()","time::now()","object#object_id()","string#oct()","fixnum#odd?()","integer#odd?()","matchdata#offset()","enumerable#one?()","dir::open()","io::open()","kernel#open()","regexp#options()","integer#ord()","file::owned?()","file::stat#owned?()","filetest#owned?()","method#owner()","unboundmethod#owner()","kernel#p()","array#pack()","enumerable#partition()","string#partition()","thread::pass()","dir#path()","file#path()","array#permutation()","io#pid()","process::pid()","process::status#pid()","io::pipe()","file::pipe?()","file::stat#pipe?()","filetest#pipe?()","array#pop()","io::popen()","dir#pos()","io#pos()","dir#pos=()","io#pos=()","matchdata#post_match()","process::ppid()","matchdata#pre_match()","precision#prec()","precision#prec_f()","precision#prec_i()","integer#pred()","io#print()","kernel#print()","io#printf()","kernel#printf()","thread#priority()","thread#priority=()","module#private()","module#private_class_method()","module#private_instance_methods()","module#private_method_defined?()","object#private_methods()","kernel#proc()","array#product()","module#protected()","module#protected_instance_methods()","module#protected_method_defined?()","object#protected_methods()","module#public()","module#public_class_method()","module#public_instance_methods()","module#public_method_defined?()","object#public_methods()","array#push()","io#putc()","kernel#putc()","io#puts()","kernel#puts()","dir::pwd()","bignum#quo()","fixnum#quo()","numeric#quo()","regexp::quote()","kernel#raise()","thread#raise()","kernel#rand()","array#rassoc()","file::stat#rdev()","file::stat#rdev_major()","file::stat#rdev_minor()","process::gid::re_exchange()","process::uid::re_exchange()","process::gid::re_exchangeable?()","process::uid::re_exchangeable?()","dir#read()","io#read()","io::read()","io#read_nonblock()","file::readable?()","file::stat#readable?()","filetest#readable?()","file::readable_real?()","file::stat#readable_real?()","filetest#readable_real?()","io#readbyte()","io#readchar()","io#readline()","kernel#readline()","io#readlines()","io::readlines()","kernel#readlines()","file::readlink()","io#readpartial()","localjumperror#reason()","method#receiver()","enumerable#reduce()","hash#rehash()","array#reject()","enumerable#reject()","hash#reject()","array#reject!()","hash#reject!()","bignum#remainder()","numeric#remainder()","module#remove_class_variable()","module#remove_const()","objectspace::remove_finalizer()","object#remove_instance_variable()","module#remove_method()","file::rename()","io#reopen()","array#replace()","hash#replace()","string#replace()","kernel#require()","object#respond_to?()","marshal::restore()","array#reverse()","string#reverse()","array#reverse!()","string#reverse!()","array#reverse_each()","enumerable#reverse_each()","dir#rewind()","enumerable::enumerator#rewind()","io#rewind()","process::gid::rid()","process::uid::rid()","array#rindex()","string#rindex()","string#rjust()","dir::rmdir()","float#round()","integer#round()","numeric#round()","string#rpartition()","string#rstrip()","string#rstrip!()","thread#run()","thread#safe_level()","kernel#scan()","string#scan()","time#sec()","dir#seek()","io#seek()","array#select()","enumerable#select()","hash#select()","io::select()","kernel#select()","matchdata#select()","struct#select()","object#send()","exception#set_backtrace()","kernel#set_trace_func()","process::sys::setegid()","process::sys::seteuid()","process::sys::setgid()","file::setgid?()","file::stat#setgid?()","filetest#setgid?()","process::setpgid()","process::setpgrp()","process::setpriority()","process::sys::setregid()","process::sys::setresgid()","process::sys::setresuid()","process::sys::setreuid()","process::sys::setrgid()","process::setrlimit()","process::sys::setruid()","process::setsid()","process::sys::setuid()","file::setuid?()","file::stat#setuid?()","filetest#setuid?()","array#shift()","hash#shift()","array#shuffle()","array#shuffle!()","process::gid::sid_available?()","process::uid::sid_available?()","process::status#signaled?()","math::sin()","numeric#singleton_method_added()","object#singleton_method_added()","object#singleton_method_removed()","object#singleton_method_undefined()","object#singleton_methods()","math::sinh()","array#size()","bignum#size()","file::size()","file::stat#size()","filetest#size()","fixnum#size()","hash#size()","matchdata#size()","string#size()","struct#size()","file::size?()","file::stat#size?()","filetest#size?()","kernel#sleep()","array#slice()","string#slice()","array#slice!()","string#slice!()","file::socket?()","file::stat#socket?()","filetest#socket?()","array#sort()","enumerable#sort()","hash#sort()","array#sort!()","enumerable#sort_by()","regexp#source()","file::split()","kernel#split()","string#split()","kernel#sprintf()","math::sqrt()","string#squeeze()","string#squeeze!()","kernel#srand()","gc::start()","thread::start()","string#start_with?()","file::stat()","io#stat()","systemexit#status()","thread#status()","numeric#step()","range#step()","file::sticky?()","file::stat#sticky?()","filetest#sticky?()","thread::stop()","thread#stop?()","process::status#stopped?()","process::status#stopsig()","hash#store()","gc::stress()","gc::stress=()","time#strftime()","matchdata#string()","string#strip()","string#strip!()","kernel#sub()","string#sub()","kernel#sub!()","string#sub!()","integer#succ()","string#succ()","time#succ()","string#succ!()","process::status#success?()","systemexit#success?()","string#sum()","class#superclass()","string#swapcase()","string#swapcase!()","process::gid::switch()","process::uid::switch()","file::symlink()","file::symlink?()","file::stat#symlink?()","filetest#symlink?()","io#sync()","io#sync=()","kernel#syscall()","io::sysopen()","io#sysread()","io#sysseek()","kernel#system()","io#syswrite()","object#taint()","object#tainted?()","array#take()","enumerable#take()","array#take_while()","enumerable#take_while()","math::tan()","math::tanh()","object#tap()","dir#tell()","io#tell()","thread#terminate()","thread#terminate!()","process::status#termsig()","kernel#test()","kernel#throw()","integer#times()","process::times()","time::times()","array#to_a()","enumerable#to_a()","hash#to_a()","matchdata#to_a()","nilclass#to_a()","object#to_a()","struct#to_a()","time#to_a()","array#to_ary()","object#to_enum()","bignum#to_f()","fixnum#to_f()","float#to_f()","nilclass#to_f()","string#to_f()","time#to_f()","hash#to_hash()","float#to_i()","io#to_i()","integer#to_i()","nilclass#to_i()","process::status#to_i()","string#to_i()","symbol#to_i()","time#to_i()","float#to_int()","integer#to_int()","numeric#to_int()","process::status#to_int()","io#to_io()","method#to_proc()","proc#to_proc()","symbol#to_proc()","array#to_s()","bignum#to_s()","exception#to_s()","falseclass#to_s()","fixnum#to_s()","float#to_s()","hash#to_s()","matchdata#to_s()","method#to_s()","module#to_s()","nameerror#to_s()","nilclass#to_s()","object#to_s()","proc#to_s()","process::status#to_s()","range#to_s()","regexp#to_s()","string#to_s()","struct#to_s()","symbol#to_s()","time#to_s()","trueclass#to_s()","unboundmethod#to_s()","exception#to_str()","string#to_str()","fixnum#to_sym()","string#to_sym()","symbol#to_sym()","string#tr()","string#tr!()","string#tr_s()","string#tr_s!()","kernel#trace_var()","array#transpose()","kernel#trap()","signal::trap()","file#truncate()","file::truncate()","float#truncate()","integer#truncate()","numeric#truncate()","io#tty?()","time#tv_sec()","time#tv_usec()","object#type()","file::stat#uid()","process::uid()","process::uid=()","file::umask()","method#unbind()","module#undef_method()","objectspace::undefine_finalizer()","io#ungetc()","regexp::union()","array#uniq()","array#uniq!()","dir::unlink()","file::unlink()","string#unpack()","array#unshift()","object#untaint()","kernel#untrace_var()","string#upcase()","string#upcase!()","hash#update()","integer#upto()","string#upto()","time#usec()","time::utc()","time#utc()","time#utc?()","time#utc_offset()","file::utime()","thread#value()","hash#value?()","hash#values()","struct#values()","array#values_at()","hash#values_at()","matchdata#values_at()","struct#values_at()","process::wait()","process::wait2()","process::waitall()","process::waitpid()","process::waitpid2()","thread#wakeup()","kernel#warn()","time#wday()","enumerable::enumerator#with_index()","file::writable?()","file::stat#writable?()","filetest#writable?()","file::writable_real?()","file::stat#writable_real?()","filetest#writable_real?()","io#write()","io#write_nonblock()","time#yday()","time#year()","file::zero?()","file::stat#zero?()","filetest#zero?()","fixnum#zero?()","float#zero?()","numeric#zero?()","array#zip()","enumerable#zip()","time#zone()","array#|()","bignum#|()","falseclass#|()","fixnum#|()","nilclass#|()","trueclass#|()","bignum#~()","fixnum#~()","regexp#~()"],"info":[["ArgumentError","","ArgumentError.html","",""],["Array","","Array.html","","<p>Arrays are ordered, integer-indexed collections of any object.  Array\nindexing starts at 0, as in C or …\n"],["Bignum","","Bignum.html","","<p>Bignum objects hold integers outside the range of Fixnum. Bignum objects\nare created automatically when …\n"],["Binding","","Binding.html","","<p>Objects of class <code>Binding</code> encapsulate the execution context at\nsome particular place in the code and retain …\n"],["Class","","Class.html","","<p>Classes in Ruby are first-class objects---each is an instance of class\n<code>Class</code>.\n<p>When a new class is created ...\n"],["Comparable","","Comparable.html","","<p>The <code>Comparable</code> mixin is used by classes whose objects may be\nordered. The class must define the <code>&lt;=&gt;</code> …\n"],["Continuation","","Continuation.html","","<p>Continuation objects are generated by <code>Kernel#callcc</code>. They hold\na return address and execution context, ...\n"],["Data","","Data.html","",""],["Dir","","Dir.html","","<p>Objects of class <code>Dir</code> are directory streams representing\ndirectories in the underlying file system. They …\n"],["EOFError","","EOFError.html","",""],["Enumerable","","Enumerable.html","","<p>The <code>Enumerable</code> mixin provides collection classes with several\ntraversal and searching methods, and with …\n"],["Enumerable::Enumerator","","Enumerable/Enumerator.html","","<p>A class which provides a method `each' to be used as an Enumerable object.\n"],["Errno","","Errno.html","","<p>Ruby exception objects are subclasses of <code>Exception</code>. However,\noperating systems typically report errors ...\n"],["Exception","","Exception.html","","<p>Descendents of class <code>Exception</code> are used to communicate between\n<code>raise</code> methods and <code>rescue</code> statements in …\n"],["FalseClass","","FalseClass.html","","<p>The global value <code>false</code> is the only instance of class\n<code>FalseClass</code> and represents a logically false value ...\n"],["File","","File.html","","<p>A <code>File</code> is an abstraction of any file object accessible by the\nprogram and is closely associated with …\n"],["File::Constants","","File/Constants.html","",""],["File::Stat","","File/Stat.html","","<p>Objects of class <code>File::Stat</code> encapsulate common status\ninformation for <code>File</code> objects. The information is ...\n"],["FileTest","","FileTest.html","","<p><code>FileTest</code> implements file test operations similar to those used\nin <code>File::Stat</code>. It exists as a standalone ...\n"],["Fixnum","","Fixnum.html","","<p>A <code>Fixnum</code> holds <code>Integer</code> values that can be\nrepresented in a native machine word (minus 1 bit). If any ...\n"],["Float","","Float.html","","<p><code>Float</code> objects represent real numbers using the native\narchitecture's double-precision floating point ...\n"],["FloatDomainError","","FloatDomainError.html","",""],["GC","","GC.html","","<p>The <code>GC</code> module provides an interface to Ruby’s mark and sweep\ngarbage collection mechanism. Some of the …\n"],["Hash","","Hash.html","","<p>A <code>Hash</code> is a collection of key-value pairs. It is similar to an\n<code>Array</code>, except that indexing is done via …\n"],["IO","","IO.html","","<p>Class <code>IO</code> is the basis for all input and output in Ruby. An I/O\nstream may be <em>duplexed</em> (that is, bidirectional), …\n"],["IOError","","IOError.html","",""],["IndexError","","IndexError.html","",""],["Integer","","Integer.html","","<p><code>Integer</code> is the basis for the two concrete classes that hold\nwhole numbers, <code>Bignum</code> and <code>Fixnum</code>.\n"],["Interrupt","","Interrupt.html","",""],["Kernel","","Kernel.html","",""],["LoadError","","LoadError.html","",""],["LocalJumpError","","LocalJumpError.html","",""],["Marshal","","Marshal.html","","<p>The marshaling library converts collections of Ruby objects into a byte\nstream, allowing them to be stored …\n"],["MatchData","","MatchData.html","","<p><code>MatchData</code> is the type of the special variable <code>$~</code>,\nand is the type of the object returned by <code>Regexp#match</code> ...\n"],["Math","","Math.html","","<p>The <code>Math</code> module contains module functions for basic\ntrigonometric and transcendental functions. See class …\n"],["Method","","Method.html","",""],["Module","","Module.html","","<p>A <code>Module</code> is a collection of methods and constants. The methods\nin a module may be instance methods or ...\n"],["NameError","","NameError.html","",""],["NameError::message","","NameError/message.html","",""],["NilClass","","NilClass.html","","<p>The class of the singleton object <code>nil</code>.\n"],["NoMemoryError","","NoMemoryError.html","",""],["NoMethodError","","NoMethodError.html","",""],["NotImplementedError","","NotImplementedError.html","",""],["Numeric","","Numeric.html","",""],["Object","","Object.html","","<p><code>Object</code> is the parent class of all classes in Ruby. Its methods\nare therefore available to all objects ...\n"],["ObjectSpace","","ObjectSpace.html","","<p>The <code>ObjectSpace</code> module contains a number of routines that\ninteract with the garbage collection facility ...\n"],["Precision","","Precision.html","","<p>Precision is a mixin for concrete numeric classes with precision.  Here,\n`precision’ means the fineness …\n"],["Proc","","Proc.html","","<p><code>Proc</code> objects are blocks of code that have been bound to a set\nof local variables. Once bound, the code ...\n"],["Process","","Process.html","","<p>The <code>Process</code> module is a collection of methods used to\nmanipulate processes.\n"],["Process::GID","","Process/GID.html","","<p>The <code>Process::GID</code> module contains a collection of module\nfunctions which can be used to portably get, ...\n"],["Process::Status","","Process/Status.html","","<p><code>Process::Status</code> encapsulates the information on the status of\na running or terminated system process. ...\n"],["Process::Sys","","Process/Sys.html","","<p>The <code>Process::Sys</code> module contains UID and GID functions which\nprovide direct bindings to the system calls ...\n"],["Process::UID","","Process/UID.html","","<p>The <code>Process::UID</code> module contains a collection of module\nfunctions which can be used to portably get, ...\n"],["Range","","Range.html","","<p>A <code>Range</code> represents an interval—a set of values with a start\nand an end. Ranges may be constructed using …\n"],["RangeError","","RangeError.html","",""],["Regexp","","Regexp.html","","<p>A <code>Regexp</code> holds a regular expression, used to match a pattern\nagainst strings. Regexps are created using …\n"],["RegexpError","","RegexpError.html","",""],["RuntimeError","","RuntimeError.html","",""],["ScriptError","","ScriptError.html","",""],["SecurityError","","SecurityError.html","",""],["Signal","","Signal.html","","<p>Many operating systems allow signals to be sent to running processes. Some\nsignals have a defined effect …\n"],["SignalException","","SignalException.html","",""],["StandardError","","StandardError.html","",""],["StopIteration","","StopIteration.html","",""],["String","","String.html","","<p>A <code>String</code> object holds and manipulates an arbitrary sequence of\nbytes, typically representing characters. …\n"],["Struct","","Struct.html","","<p>A <code>Struct</code> is a convenient way to bundle a number of attributes\ntogether, using accessor methods, without …\n"],["Symbol","","Symbol.html","","<p><code>Symbol</code> objects represent names and some strings inside the\nRuby interpreter. They are generated using ...\n"],["SyntaxError","","SyntaxError.html","",""],["SystemCallError","","SystemCallError.html","",""],["SystemExit","","SystemExit.html","",""],["SystemStackError","","SystemStackError.html","",""],["Thread","","Thread.html","","<p><code>Thread</code> encapsulates the behavior of a thread of execution,\nincluding the main thread of the Ruby script. ...\n"],["ThreadError","","ThreadError.html","",""],["ThreadGroup","","ThreadGroup.html","","<p><code>ThreadGroup</code> provides a means of keeping track of a number of\nthreads as a group. A <code>Thread</code> can belong ...\n"],["Time","","Time.html","","<p><code>Time</code> is an abstraction of dates and times. Time is stored\ninternally as the number of seconds and microseconds ...\n"],["TrueClass","","TrueClass.html","","<p>The global value <code>true</code> is the only instance of class\n<code>TrueClass</code> and represents a logically true value in ...\n"],["TypeError","","TypeError.html","",""],["UnboundMethod","","UnboundMethod.html","","<p>Ruby supports two forms of objectified methods. Class <code>Method</code>\nis used to represent methods that are associated ...\n"],["ZeroDivisionError","","ZeroDivisionError.html","",""],["fatal","","fatal.html","",""],["unknown","","unknown.html","",""],["%","Bignum","Bignum.html#method-i-25","(p1)","<p>Returns big modulo other. See Numeric.divmod for more information.\n"],["%","Fixnum","Fixnum.html#method-i-25","(p1)","<p>Returns <code>fix</code> modulo <code>other</code>. See\n<code>Numeric.divmod</code> for more information.\n"],["%","Float","Float.html#method-i-25","(p1)","<p>Return the modulo after division of <code>flt</code> by <code>other</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">6543.21</span>.<span class=\"ruby-identifier\">modulo</span>(<span class=\"ruby-value\">137</span>)      <span class=\"ruby-comment\">#=&gt; 104.21</span>\n<span class=\"ruby-value\">6543.21</span>.<span class=\"ruby-identifier\">modulo</span>(<span class=\"ruby-value\">137.24</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["%","String","String.html#method-i-25","(p1)","<p>Format—Uses <em>str</em> as a format specification, and returns the result\nof applying it to <em>arg</em>. If the format …\n"],["&","Array","Array.html#method-i-26","(p1)","<p>Set Intersection—Returns a new array containing elements common to the two\narrays, with no duplicates. …\n"],["&","Bignum","Bignum.html#method-i-26","(p1)","<p>Performs bitwise <code>and</code> between <em>big</em> and\n<em>numeric</em>.\n"],["&","FalseClass","FalseClass.html#method-i-26","(p1)","<p>And—Returns <code>false</code>. <em>obj</em> is always evaluated as it is\nthe argument to a method call—there is no short-circuit …\n"],["&","Fixnum","Fixnum.html#method-i-26","(p1)","<p>Bitwise AND.\n"],["&","NilClass","NilClass.html#method-i-26","(p1)","<p>And—Returns <code>false</code>. <em>obj</em> is always evaluated as it is\nthe argument to a method call—there is no short-circuit …\n"],["&","Process::Status","Process/Status.html#method-i-26","(p1)","<p>Logical AND of the bits in <em>stat</em> with <em>num</em>.\n\n<pre>fork { exit 0x37 }\nProcess.wait\nsprintf('%04x', $?.to_i)    ...</pre>\n"],["&","TrueClass","TrueClass.html#method-i-26","(p1)","<p>And—Returns <code>false</code> if <em>obj</em> is <code>nil</code> or\n<code>false</code>, <code>true</code> otherwise.\n"],["*","Array","Array.html#method-i-2A","(p1)","<p>Repetition—With a String argument, equivalent to self.join(str). Otherwise,\nreturns a new array built …\n"],["*","Bignum","Bignum.html#method-i-2A","(p1)","<p>Multiplies big and other, returning the result.\n"],["*","Fixnum","Fixnum.html#method-i-2A","(p1)","<p>Performs multiplication: the class of the resulting object depends on the\nclass of <code>numeric</code> and on the …\n"],["*","Float","Float.html#method-i-2A","(p1)","<p>Returns a new float which is the product of <code>float</code> and\n<code>other</code>.\n"],["*","String","String.html#method-i-2A","(p1)","<p>Copy—Returns a new <code>String</code> containing <em>integer</em> copies\nof the receiver.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;Ho! &quot;</span> <span class=\"ruby-operator\">*</span> <span class=\"ruby-value\">3</span>   <span class=\"ruby-comment\">#=&gt; &quot;Ho! Ho! Ho! &quot;</span>\n</pre>\n"],["**","Bignum","Bignum.html#method-i-2A-2A","(p1)","<p>Raises <em>big</em> to the <em>exponent</em> power (which may be an\ninteger, float, or anything that will coerce to a number). …\n"],["**","Fixnum","Fixnum.html#method-i-2A-2A","(p1)","<p>Raises <code>fix</code> to the <code>other</code> power, which may be\nnegative or fractional.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2</span> <span class=\"ruby-operator\">**</span> <span class=\"ruby-value\">3</span>      <span class=\"ruby-comment\">#=&gt; 8</span>\n<span class=\"ruby-value\">2</span> <span class=\"ruby-operator\">**</span> <span class=\"ruby-value\">-1</span>     <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["**","Float","Float.html#method-i-2A-2A","(p1)","<p>Raises <code>float</code> the <code>other</code> power.\n"],["+","Array","Array.html#method-i-2B","(p1)","<p>Concatenation—Returns a new array built by concatenating the two arrays\ntogether to produce a third …\n"],["+","Bignum","Bignum.html#method-i-2B","(p1)","<p>Adds big and other, returning the result.\n"],["+","Fixnum","Fixnum.html#method-i-2B","(p1)","<p>Performs addition: the class of the resulting object depends on the class\nof <code>numeric</code> and on the magnitude …\n"],["+","Float","Float.html#method-i-2B","(p1)","<p>Returns a new float which is the sum of <code>float</code> and\n<code>other</code>.\n"],["+","String","String.html#method-i-2B","(p1)","<p>Concatenation—Returns a new <code>String</code> containing\n<em>other_str</em> concatenated to <em>str</em>.\n\n<pre>&quot;Hello from &quot; + self.to_s ...</pre>\n"],["+","Time","Time.html#method-i-2B","(p1)","<p>Addition—Adds some number of seconds (possibly fractional) to <em>time</em>\nand returns that value as a new …\n"],["+@","Numeric","Numeric.html#method-i-2B-40","()","<p>Unary Plus—Returns the receiver’s value.\n"],["-","Array","Array.html#method-i-2D","(p1)","<p>Array Difference—Returns a new array that is a copy of the original array,\nremoving any items that …\n"],["-","Bignum","Bignum.html#method-i-2D","(p1)","<p>Subtracts other from big, returning the result.\n"],["-","Fixnum","Fixnum.html#method-i-2D","(p1)","<p>Performs subtraction: the class of the resulting object depends on the\nclass of <code>numeric</code> and on the magnitude …\n"],["-","Float","Float.html#method-i-2D","(p1)","<p>Returns a new float which is the difference of <code>float</code> and\n<code>other</code>.\n"],["-","Time","Time.html#method-i-2D","(p1)","<p>Difference—Returns a new time that represents the difference between two\ntimes, or subtracts the given …\n"],["-@","Bignum","Bignum.html#method-i-2D-40","()","<p>Unary minus (returns a new Bignum whose value is 0-big)\n"],["-@","Fixnum","Fixnum.html#method-i-2D-40","()","<p>Negates <code>fix</code> (which might return a Bignum).\n"],["-@","Float","Float.html#method-i-2D-40","()","<p>Returns float, negated.\n"],["-@","Numeric","Numeric.html#method-i-2D-40","()","<p>Unary Minus—Returns the receiver’s value, negated.\n"],["/","Bignum","Bignum.html#method-i-2F","(p1)","<p>Divides big by other, returning the result.\n"],["/","Fixnum","Fixnum.html#method-i-2F","(p1)","<p>Performs division: the class of the resulting object depends on the class\nof <code>numeric</code> and on the magnitude …\n"],["/","Float","Float.html#method-i-2F","(p1)","<p>Returns a new float which is the result of dividing <code>float</code> by\n<code>other</code>.\n"],["<","Comparable","Comparable.html#method-i-3C","(p1)","<p>Compares two objects based on the receiver’s <code>&lt;=&gt;</code> method,\nreturning true if it returns -1.\n"],["<","Fixnum","Fixnum.html#method-i-3C","(p1)","<p>Returns <code>true</code> if the value of <code>fix</code> is less than\nthat of <code>other</code>.\n"],["<","Float","Float.html#method-i-3C","(p1)","<p><code>true</code> if <code>flt</code> is less than <code>other</code>.\n"],["<","Module","Module.html#method-i-3C","(p1)","<p>Returns true if <em>mod</em> is a subclass of <em>other</em>. Returns \n<code>nil</code> if there’s no relationship between the two. …\n"],["<<","Array","Array.html#method-i-3C-3C","(p1)","<p>Append—Pushes the given object on to the end of this array. This expression\nreturns the array itself, …\n"],["<<","Bignum","Bignum.html#method-i-3C-3C","(p1)","<p>Shifts big left <em>numeric</em> positions (right if <em>numeric</em> is\nnegative).\n"],["<<","Fixnum","Fixnum.html#method-i-3C-3C","(p1)","<p>Shifts <em>fix</em> left <em>count</em> positions (right if <em>count</em>\nis negative).\n"],["<<","IO","IO.html#method-i-3C-3C","(p1)","<p>String Output—Writes <em>obj</em> to <em>ios</em>. <em>obj</em> will be\nconverted to a string using <code>to_s</code>.\n\n<pre>$stdout &lt;&lt; &quot;Hello &quot; &lt;&lt; ...</pre>\n"],["<<","String","String.html#method-i-3C-3C","(p1)","<p>Append—Concatenates the given object to <em>str</em>. If the object is a\n<code>Fixnum</code> between 0 and 255, it is converted …\n"],["<=","Comparable","Comparable.html#method-i-3C-3D","(p1)","<p>Compares two objects based on the receiver’s <code>&lt;=&gt;</code> method,\nreturning true if it returns -1 or 0. …\n"],["<=","Fixnum","Fixnum.html#method-i-3C-3D","(p1)","<p>Returns <code>true</code> if the value of <code>fix</code> is less thanor\nequal to that of <code>other</code>.\n"],["<=","Float","Float.html#method-i-3C-3D","(p1)","<p><code>true</code> if <code>flt</code> is less than or equal to\n<code>other</code>.\n"],["<=","Module","Module.html#method-i-3C-3D","(p1)","<p>Returns true if <em>mod</em> is a subclass of <em>other</em> or is the same\nas <em>other</em>. Returns  <code>nil</code> if there’s no relationship …\n"],["<=>","Array","Array.html#method-i-3C-3D-3E","(p1)","<p>Comparison—Returns an integer (-1, 0, or +1) if this array is less than,\nequal to, or greater than …\n"],["<=>","Bignum","Bignum.html#method-i-3C-3D-3E","(p1)","<p>Comparison—Returns -1, 0, or +1 depending on whether <em>big</em> is less\nthan, equal to, or greater than <em>numeric</em> …\n"],["<=>","File::Stat","File/Stat.html#method-i-3C-3D-3E","(p1)","<p>Compares <code>File::Stat</code> objects by comparing their respective\nmodification times.\n\n<pre>f1 = File.new(&quot;f1&quot;, &quot;w&quot;) ...</pre>\n"],["<=>","Fixnum","Fixnum.html#method-i-3C-3D-3E","(p1)","<p>Comparison—Returns -1, 0, or +1 depending on whether <em>fix</em> is less\nthan, equal to, or greater than <em>numeric</em> …\n"],["<=>","Float","Float.html#method-i-3C-3D-3E","(p1)","<p>Returns -1, 0, or +1 depending on whether <em>flt</em> is less than, equal\nto, or greater than <em>numeric</em>. This is …\n"],["<=>","Module","Module.html#method-i-3C-3D-3E","(p1)","<p>Comparison—Returns -1 if <em>mod</em> includes <em>other_mod</em>, 0 if\n<em>mod</em> is the same as <em>other_mod</em>, and +1 if <em>mod</em> is …\n"],["<=>","Numeric","Numeric.html#method-i-3C-3D-3E","(p1)","<p>Returns zero if <em>num</em> equals <em>other</em>, <code>nil</code>\notherwise.\n"],["<=>","String","String.html#method-i-3C-3D-3E","(p1)","<p>Comparison—Returns -1 if <em>other_str</em> is less than, 0 if\n<em>other_str</em> is equal to, and +1 if <em>other_str</em> is …\n"],["<=>","Time","Time.html#method-i-3C-3D-3E","(p1)","<p>Comparison—Compares <em>time</em> with <em>other_time</em> or with\n<em>numeric</em>, which is the number of seconds (possibly …\n"],["==","Array","Array.html#method-i-3D-3D","(p1)","<p>Equality—Two arrays are equal if they contain the same number of elements\nand if each element is equal …\n"],["==","Bignum","Bignum.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> only if <em>obj</em> has the same value as\n<em>big</em>. Contrast this with <code>Bignum#eql?</code>, which requires\n<em>obj</em> …\n"],["==","Comparable","Comparable.html#method-i-3D-3D","(p1)","<p>Compares two objects based on the receiver’s <code>&lt;=&gt;</code> method,\nreturning true if it returns 0. Also returns …\n"],["==","Fixnum","Fixnum.html#method-i-3D-3D","(p1)","<p>Return <code>true</code> if <code>fix</code> equals <code>other</code>\nnumerically.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-value\">2</span>      <span class=\"ruby-comment\">#=&gt; false</span>\n<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-value\">1.0</span>    <span class=\"ruby-comment\">#=&gt; true</span>\n</pre>\n"],["==","Float","Float.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> only if <em>obj</em> has the same value as\n<em>flt</em>. Contrast this with <code>Float#eql?</code>, which requires\n<em>obj</em> …\n"],["==","Hash","Hash.html#method-i-3D-3D","(p1)","<p>Equality—Two hashes are equal if they each contain the same number of keys\nand if each key-value pair …\n"],["==","Method","Method.html#method-i-3D-3D","(p1)","<p>Two method objects are equal if that are bound to the same object and\ncontain the same body.\n"],["==","Module","Module.html#method-i-3D-3D","(p1)","<p>Equality—At the <code>Object</code> level, <code>==</code> returns\n<code>true</code> only if <em>obj</em> and <em>other</em> are the same\nobject. Typically …\n"],["==","Object","Object.html#method-i-3D-3D","(p1)","<p>Equality—At the <code>Object</code> level, <code>==</code> returns\n<code>true</code> only if <em>obj</em> and <em>other</em> are the same\nobject. Typically …\n"],["==","Proc","Proc.html#method-i-3D-3D","(p1)","<p>Return <code>true</code> if <em>prc</em> is the same object as\n<em>other_proc</em>, or if they are both procs with the same body.\n"],["==","Process::Status","Process/Status.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> if the integer value of <em>stat</em> equals\n<em>other</em>.\n"],["==","Range","Range.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> only if <em>obj</em> is a Range, has equivalent\nbeginning and end items (by comparing them with  …\n"],["==","Regexp","Regexp.html#method-i-3D-3D","(p1)","<p>Equality—Two regexps are equal if their patterns are identical, they have\nthe same character set code, …\n"],["==","String","String.html#method-i-3D-3D","(p1)","<p>Equality—If <em>obj</em> is not a <code>String</code>, returns\n<code>false</code>. Otherwise, returns <code>true</code> if <em>str</em>\n<code>&lt;=&gt;</code> <em>obj</em> returns …\n"],["==","Struct","Struct.html#method-i-3D-3D","(p1)","<p>Equality—Returns <code>true</code> if <em>other_struct</em> is equal to\nthis one: they must be of the same class as generated …\n"],["==","UnboundMethod","UnboundMethod.html#method-i-3D-3D","(p1)","<p>Two method objects are equal if that are bound to the same object and\ncontain the same body.\n"],["===","Module","Module.html#method-i-3D-3D-3D","(p1)","<p>Case Equality—Returns <code>true</code> if <em>anObject</em> is an instance\nof <em>mod</em> or one of <em>mod</em>’s descendents. Of limited …\n"],["===","Object","Object.html#method-i-3D-3D-3D","(p1)","<p>Case Equality—For class <code>Object</code>, effectively the same as\ncalling  <code>#==</code>, but typically overridden by descendents …\n"],["===","Range","Range.html#method-i-3D-3D-3D","(p1)","<p>Returns <code>true</code> if <em>obj</em> is an element of <em>rng</em>,\n<code>false</code> otherwise. Conveniently, <code>===</code> is the\ncomparison operator …\n"],["===","Regexp","Regexp.html#method-i-3D-3D-3D","(p1)","<p>Case Equality—Synonym for <code>Regexp#=~</code> used in case statements.\n\n<pre>a = &quot;HELLO&quot;\ncase a\nwhen /^[a-z]*$/; print ...</pre>\n"],["===","Symbol","Symbol.html#method-i-3D-3D-3D","(p1)","<p>Equality—At the <code>Object</code> level, <code>==</code> returns\n<code>true</code> only if <em>obj</em> and <em>other</em> are the same\nobject. Typically …\n"],["===","SystemCallError","SystemCallError.html#method-c-3D-3D-3D","(p1)","<p>Return <code>true</code> if the receiver is a generic\n<code>SystemCallError</code>, or if the error numbers <em>self</em> and\n<em>other</em> are …\n"],["=~","Object","Object.html#method-i-3D-7E","(p1)","<p>Pattern Match—Overridden by descendents (notably <code>Regexp</code> and\n<code>String</code>) to provide meaningful pattern-match …\n"],["=~","Regexp","Regexp.html#method-i-3D-7E","(p1)","<p>Returns a <code>MatchData</code> object describing the match, or\n<code>nil</code> if there was no match. This is equivalent to …\n"],["=~","String","String.html#method-i-3D-7E","(p1)","<p>Match—If <em>obj</em> is a <code>Regexp</code>, use it as a pattern to\nmatch against <em>str</em>,and returns the position the match …\n"],[">","Comparable","Comparable.html#method-i-3E","(p1)","<p>Compares two objects based on the receiver’s <code>&lt;=&gt;</code> method,\nreturning true if it returns 1.\n"],[">","Fixnum","Fixnum.html#method-i-3E","(p1)","<p>Returns <code>true</code> if the value of <code>fix</code> is greater than\nthat of <code>other</code>.\n"],[">","Float","Float.html#method-i-3E","(p1)","<p><code>true</code> if <code>flt</code> is greater than <code>other</code>.\n"],[">","Module","Module.html#method-i-3E","(p1)","<p>Returns true if <em>mod</em> is an ancestor of <em>other</em>. Returns \n<code>nil</code> if there’s no relationship between the two. …\n"],[">=","Comparable","Comparable.html#method-i-3E-3D","(p1)","<p>Compares two objects based on the receiver’s <code>&lt;=&gt;</code> method,\nreturning true if it returns 0 or 1.\n"],[">=","Fixnum","Fixnum.html#method-i-3E-3D","(p1)","<p>Returns <code>true</code> if the value of <code>fix</code> is greater than\nor equal to that of <code>other</code>.\n"],[">=","Float","Float.html#method-i-3E-3D","(p1)","<p><code>true</code> if <code>flt</code> is greater than or equal to\n<code>other</code>.\n"],[">=","Module","Module.html#method-i-3E-3D","(p1)","<p>Returns true if <em>mod</em> is an ancestor of <em>other</em>, or the two\nmodules are the same. Returns  <code>nil</code> if there’s …\n"],[">>","Bignum","Bignum.html#method-i-3E-3E","(p1)","<p>Shifts big right <em>numeric</em> positions (left if <em>numeric</em> is\nnegative).\n"],[">>","Fixnum","Fixnum.html#method-i-3E-3E","(p1)","<p>Shifts <em>fix</em> right <em>count</em> positions (left if <em>count</em>\nis negative).\n"],[">>","Process::Status","Process/Status.html#method-i-3E-3E","(p1)","<p>Shift the bits in <em>stat</em> right <em>num</em> places.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">fork</span> { <span class=\"ruby-identifier\">exit</span> <span class=\"ruby-value\">99</span> }   <span class=\"ruby-comment\">#=&gt; 26563</span>\n<span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">wait</span>       <span class=\"ruby-comment\">#=&gt; 26563</span>\n<span class=\"ruby-identifier\">$?</span>.<span class=\"ruby-identifier\">to_i</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Array","Kernel","Kernel.html#method-i-Array","(p1)","<p>Returns <em>arg</em> as an <code>Array</code>. First tries to call\n<em>arg</em><code>.to_ary</code>, then <em>arg</em><code>.to_a</code>. If\nboth fail, creates a single …\n"],["Float","Kernel","Kernel.html#method-i-Float","(p1)","<p>Returns <em>arg</em> converted to a float. Numeric types are converted\ndirectly, the rest are converted using …\n"],["Integer","Kernel","Kernel.html#method-i-Integer","(p1)","<p>Converts <em>arg</em> to a <code>Fixnum</code> or <code>Bignum</code>.\nNumeric types are converted directly (with floating point numbers …\n"],["String","Kernel","Kernel.html#method-i-String","(p1)","<p>Converts <em>arg</em> to a <code>String</code> by calling its\n<code>to_s</code> method.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">String</span>(<span class=\"ruby-keyword\">self</span>)        <span class=\"ruby-comment\">#=&gt; &quot;main&quot;</span>\n<span class=\"ruby-constant\">String</span>(<span class=\"ruby-keyword\">self</span>.<span class=\"ruby-identifier\">class</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["[]","Array","Array.html#method-i-5B-5D","(p1, p2 = v2)","<p>Element Reference—Returns the element at <em>index</em>, or returns a\nsubarray starting at <em>start</em> and continuing …\n"],["[]","Array","Array.html#method-c-5B-5D","(*args)","<p>Returns a new array populated with the given objects.\n\n<pre>Array.[]( 1, 'a', /^A/ )\nArray[ 1, 'a', /^A/ ] ...</pre>\n"],["[]","Bignum","Bignum.html#method-i-5B-5D","(p1)","<p>Bit Reference—Returns the <em>n</em>th bit in the (assumed) binary\nrepresentation of <em>big</em>, where <em>big</em> is the least …\n"],["[]","Continuation","Continuation.html#method-i-5B-5D","(*args)","<p>Invokes the continuation. The program continues from the end of the\n<code>callcc</code> block. If no arguments are …\n"],["[]","Dir","Dir.html#method-c-5B-5D","(p1, p2 = v2)","<p>Equivalent to calling <code>Dir.glob(</code><em>array,</em><code>0)</code>\nand  <code>Dir.glob([string,...],0)</code>.\n"],["[]","Fixnum","Fixnum.html#method-i-5B-5D","(p1)","<p>Bit Reference—Returns the <em>n</em>th bit in the binary representation of\n<em>fix</em>, where <em>fix</em> is the least significant …\n"],["[]","Hash","Hash.html#method-c-5B-5D","(*args)","<p>Creates a new hash populated with the given objects. Equivalent to the\nliteral <code>{ <em>key</em>, <em>value</em>, ... }</code>.  …\n"],["[]","Hash","Hash.html#method-i-5B-5D","(p1)","<p>Element Reference—Retrieves the <em>value</em> object corresponding to the\n<em>key</em> object. If not found, returns …\n"],["[]","MatchData","MatchData.html#method-i-5B-5D","(p1, p2 = v2)","<p>Match Reference—<code>MatchData</code> acts as an array, and may be\naccessed using the normal array indexing techniques. …\n"],["[]","Method","Method.html#method-i-5B-5D","(*args)","<p>Invokes the <em>meth</em> with the specified arguments, returning the\nmethod’s return value.\n\n<pre>m = 12.method(&quot;+&quot;) ...</pre>\n"],["[]","Proc","Proc.html#method-i-5B-5D","(*args)","<p>Invokes the block, setting the block’s parameters to the values in\n<em>params</em> using something close to method …\n"],["[]","String","String.html#method-i-5B-5D","(*args)","<p>Element Reference—If passed a single <code>Fixnum</code>, returns the code\nof the character at that position. If …\n"],["[]","Struct","Struct.html#method-i-5B-5D","(p1)","<p>Attribute Reference—Returns the value of the instance variable named by\n<em>symbol</em>, or indexed (0..length-1) …\n"],["[]","Thread","Thread.html#method-i-5B-5D","(p1)","<p>Attribute Reference—Returns the value of a thread-local variable, using\neither a symbol or a string …\n"],["[]=","Array","Array.html#method-i-5B-5D-3D","(*args)","<p>Element Assignment—Sets the element at <em>index</em>, or replaces a\nsubarray starting at <em>start</em> and continuing …\n"],["[]=","Hash","Hash.html#method-i-5B-5D-3D","(p1, p2)","<p>Element Assignment—Associates the value given by <em>value</em> with the\nkey given by <em>key</em>. <em>key</em> should not have …\n"],["[]=","String","String.html#method-i-5B-5D-3D","(*args)","<p>Element Assignment—Replaces some or all of the content of <em>str</em>. The\nportion of the string affected is …\n"],["[]=","Struct","Struct.html#method-i-5B-5D-3D","(p1, p2)","<p>Attribute Assignment—Assigns to the instance variable named by\n<em>symbol</em> or <em>fixnum</em> the value <em>obj</em> and returns …\n"],["[]=","Thread","Thread.html#method-i-5B-5D-3D","(p1, p2)","<p>Attribute Assignment—Sets or creates the value of a thread-local variable,\nusing either a symbol or …\n"],["^","Bignum","Bignum.html#method-i-5E","(p1)","<p>Performs bitwise +exclusive or+ between <em>big</em> and <em>numeric</em>.\n"],["^","FalseClass","FalseClass.html#method-i-5E","(p1)","<p>Exclusive Or—If <em>obj</em> is <code>nil</code> or <code>false</code>,\nreturns <code>false</code>; otherwise, returns <code>true</code>.\n"],["^","Fixnum","Fixnum.html#method-i-5E","(p1)","<p>Bitwise EXCLUSIVE OR.\n"],["^","NilClass","NilClass.html#method-i-5E","(p1)","<p>Exclusive Or—If <em>obj</em> is <code>nil</code> or <code>false</code>,\nreturns <code>false</code>; otherwise, returns <code>true</code>.\n"],["^","TrueClass","TrueClass.html#method-i-5E","(p1)","<p>Exclusive Or—Returns <code>true</code> if <em>obj</em> is <code>nil</code>\nor <code>false</code>, <code>false</code> otherwise.\n"],["__id__","Object","Object.html#method-i-__id__","()","<p>Returns an integer identifier for <em>obj</em>. The same number will be\nreturned on all calls to <code>id</code> for a given ...\n"],["__method__","Kernel","Kernel.html#method-i-__method__","()","<p>Returns the name of the current method as a Symbol. If called from inside\nof an aliased method it will …\n"],["__send__","Object","Object.html#method-i-__send__","(*args)","<p>Invokes the method identified by <em>symbol</em>, passing it any arguments\nspecified. You can use <code>__send__</code> if …\n"],["_dump","Time","Time.html#method-i-_dump","(p1 = v1)","<p>Dump <em>time</em> for marshaling.\n"],["_id2ref","ObjectSpace","ObjectSpace.html#method-c-_id2ref","(p1)","<p>Converts an object id to a reference to the object. May not be called on an\nobject id passed as a parameter …\n"],["_load","Time","Time.html#method-c-_load","(p1)","<p>Unmarshal a dumped <code>Time</code> object.\n"],["`","Kernel","Kernel.html#method-i-60","(p1)","<p>Returns the standard output of running <em>cmd</em> in a subshell. The\nbuilt-in syntax <code>%x{...}</code> uses this method. …\n"],["abort","Kernel","Kernel.html#method-i-abort","(p1)","<p>Terminate execution immediately, effectively by calling\n<code>Kernel.exit(1)</code>. If <em>msg</em> is given, it is written …\n"],["abort","Process","Process.html#method-c-abort","(p1)","<p>Terminate execution immediately, effectively by calling\n<code>Kernel.exit(1)</code>. If <em>msg</em> is given, it is written …\n"],["abort_on_exception","Thread","Thread.html#method-i-abort_on_exception","()","<p>Returns the status of the thread-local “abort on exception” condition for\n<em>thr</em>. The default is <code>false</code> …\n"],["abort_on_exception","Thread","Thread.html#method-c-abort_on_exception","()","<p>Returns the status of the global “abort on exception” condition.  The\ndefault is <code>false</code>. When set to …\n"],["abort_on_exception=","Thread","Thread.html#method-i-abort_on_exception-3D","(p1)","<p>When set to <code>true</code>, causes all threads (including the main\nprogram) to abort if an exception is raised …\n"],["abort_on_exception=","Thread","Thread.html#method-c-abort_on_exception-3D","(p1)","<p>When set to <code>true</code>, all threads will abort if an exception is\nraised. Returns the new state.\n\n<pre>Thread.abort_on_exception ...</pre>\n"],["abs","Bignum","Bignum.html#method-i-abs","()","<p>Returns the absolute value of <em>big</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">-1234567890987654321</span>.<span class=\"ruby-identifier\">abs</span>   <span class=\"ruby-comment\">#=&gt; 1234567890987654321</span>\n</pre>\n"],["abs","Fixnum","Fixnum.html#method-i-abs","()","<p>Returns the absolute value of <em>fix</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">-12345</span>.<span class=\"ruby-identifier\">abs</span>   <span class=\"ruby-comment\">#=&gt; 12345</span>\n<span class=\"ruby-value\">12345</span>.<span class=\"ruby-identifier\">abs</span>    <span class=\"ruby-comment\">#=&gt; 12345</span>\n</pre>\n"],["abs","Float","Float.html#method-i-abs","()","<p>Returns the absolute value of <em>flt</em>.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">-34.56</span>).<span class=\"ruby-identifier\">abs</span>   <span class=\"ruby-comment\">#=&gt; 34.56</span>\n<span class=\"ruby-value\">-34.56</span>.<span class=\"ruby-identifier\">abs</span>     <span class=\"ruby-comment\">#=&gt; 34.56</span>\n</pre>\n"],["abs","Numeric","Numeric.html#method-i-abs","()","<p>Returns the absolute value of <em>num</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">12</span>.<span class=\"ruby-identifier\">abs</span>         <span class=\"ruby-comment\">#=&gt; 12</span>\n(<span class=\"ruby-value\">-34.56</span>).<span class=\"ruby-identifier\">abs</span>   <span class=\"ruby-comment\">#=&gt; 34.56</span>\n<span class=\"ruby-value\">-34.56</span>.<span class=\"ruby-identifier\">abs</span>     <span class=\"ruby-comment\">#=&gt; 34.56</span>\n</pre>\n"],["acos","Math","Math.html#method-c-acos","(p1)","<p>Computes the arc cosine of <em>x</em>. Returns 0..PI.\n"],["acosh","Math","Math.html#method-c-acosh","(p1)","<p>Computes the inverse hyperbolic cosine of <em>x</em>.\n"],["add","ThreadGroup","ThreadGroup.html#method-i-add","(p1)","<p>Adds the given <em>thread</em> to this group, removing it from any other\ngroup to which it may have previously …\n"],["add_finalizer","ObjectSpace","ObjectSpace.html#method-c-add_finalizer","(p1)","<p>deprecated\n"],["alias_method","Module","Module.html#method-i-alias_method","(p1, p2)","<p>Makes <em>new_name</em> a new copy of the method <em>old_name</em>. This\ncan be used to retain access to methods that are …\n"],["alive?","Thread","Thread.html#method-i-alive-3F","()","<p>Returns <code>true</code> if <em>thr</em> is running or sleeping.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">thr</span> = <span class=\"ruby-constant\">Thread</span>.<span class=\"ruby-identifier\">new</span> { }\n<span class=\"ruby-identifier\">thr</span>.<span class=\"ruby-identifier\">join</span>                <span class=\"ruby-comment\">#=&gt; #&lt;Thread:0x401b3fb0 ...</span>\n</pre>\n"],["all?","Enumerable","Enumerable.html#method-i-all-3F","()","<p>Passes each element of the collection to the given block. The method\nreturns <code>true</code> if the block never …\n"],["all_symbols","Symbol","Symbol.html#method-c-all_symbols","()","<p>Returns an array of all the symbols currently in Ruby’s symbol table.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Symbol</span>.<span class=\"ruby-identifier\">all_symbols</span>.<span class=\"ruby-identifier\">size</span>    <span class=\"ruby-comment\">#=&gt; 903 ...</span>\n</pre>\n"],["allocate","Class","Class.html#method-i-allocate","()","<p>Allocates space for a new object of <em>class</em>’s class and does not\ncall initialize on the new instance.  …\n"],["ancestors","Module","Module.html#method-i-ancestors","()","<p>Returns a list of modules included in <em>mod</em> (including <em>mod</em>\nitself).\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">Mod</span>\n  <span class=\"ruby-identifier\">include</span> <span class=\"ruby-constant\">Math</span>\n  <span class=\"ruby-identifier\">include</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["any?","Enumerable","Enumerable.html#method-i-any-3F","()","<p>Passes each element of the collection to the given block. The method\nreturns <code>true</code> if the block ever returns …\n"],["append_features","Module","Module.html#method-i-append_features","(p1)","<p>When this module is included in another, Ruby calls\n<code>append_features</code> in this module, passing it the receiving …\n"],["args","NoMethodError","NoMethodError.html#method-i-args","()","<p>Return the arguments passed in as the third parameter to the constructor.\n"],["arity","Method","Method.html#method-i-arity","()","<p>Returns an indication of the number of arguments accepted by a method.\nReturns a nonnegative integer …\n"],["arity","Proc","Proc.html#method-i-arity","()","<p>Returns the number of arguments that would not be ignored. If the block is\ndeclared to take no arguments, …\n"],["arity","UnboundMethod","UnboundMethod.html#method-i-arity","()","<p>Returns an indication of the number of arguments accepted by a method.\nReturns a nonnegative integer …\n"],["asctime","Time","Time.html#method-i-asctime","()","<p>Returns a canonical string representation of <em>time</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>.<span class=\"ruby-identifier\">asctime</span>   <span class=\"ruby-comment\">#=&gt; &quot;Wed Apr  9 08:56:03 2003&quot;</span>\n</pre>\n"],["asin","Math","Math.html#method-c-asin","(p1)","<p>Computes the arc sine of <em>x</em>. Returns -{PI/2} .. {PI/2}.\n"],["asinh","Math","Math.html#method-c-asinh","(p1)","<p>Computes the inverse hyperbolic sine of <em>x</em>.\n"],["assoc","Array","Array.html#method-i-assoc","(p1)","<p>Searches through an array whose elements are also arrays comparing\n<em>obj</em> with the first element of each …\n"],["at","Array","Array.html#method-i-at","(p1)","<p>Returns the element at <em>index</em>. A negative index counts from the end\nof <em>self</em>.  Returns <code>nil</code> if the index …\n"],["at","Time","Time.html#method-c-at","(p1, p2 = v2)","<p>Creates a new time object with the value given by <em>aTime</em>, or the\ngiven number of <em>seconds</em> (and optional …\n"],["at_exit","Kernel","Kernel.html#method-i-at_exit","()","<p>Converts <em>block</em> to a <code>Proc</code> object (and therefore binds\nit at the point of call) and registers it for execution …\n"],["atan","Math","Math.html#method-c-atan","(p1)","<p>Computes the arc tangent of <em>x</em>. Returns -{PI/2} .. {PI/2}.\n"],["atan2","Math","Math.html#method-c-atan2","(p1, p2)","<p>Computes the arc tangent given <em>y</em> and <em>x</em>. Returns -PI..PI.\n"],["atanh","Math","Math.html#method-c-atanh","(p1)","<p>Computes the inverse hyperbolic tangent of <em>x</em>.\n"],["atime","File","File.html#method-c-atime","(p1)","<p>Returns the last access time for the named file as a Time object).\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">atime</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>)   <span class=\"ruby-comment\">#=&gt; Wed Apr ...</span>\n</pre>\n"],["atime","File","File.html#method-i-atime","()","<p>Returns the last access time (a <code>Time</code> object)\n\n<pre>for &lt;i&gt;file&lt;/i&gt;, or epoch if &lt;i&gt;file&lt;/i&gt; has not been accessed. ...</pre>\n"],["atime","File::Stat","File/Stat.html#method-i-atime","()","<p>Returns the last access time for this file as an object of class\n<code>Time</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">atime</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["attr","Module","Module.html#method-i-attr","(p1, p2 = v2)","<p>Defines a named attribute for this module, where the name is\n<em>symbol.</em><code>id2name</code>, creating an instance variable …\n"],["attr_accessor","Module","Module.html#method-i-attr_accessor","(*args)","<p>Equivalent to calling “<code>attr</code><em>symbol</em><code>, true</code>”\non each <em>symbol</em> in turn.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">Mod</span>\n  <span class=\"ruby-identifier\">attr_accessor</span>(:<span class=\"ruby-identifier\">one</span>, :<span class=\"ruby-identifier\">two</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["attr_reader","Module","Module.html#method-i-attr_reader","(*args)","<p>Creates instance variables and corresponding methods that return the value\nof each instance variable. …\n"],["attr_writer","Module","Module.html#method-i-attr_writer","(*args)","<p>Creates an accessor method to allow assignment to the attribute\n<em>aSymbol</em><code>.id2name</code>.\n"],["autoload","Kernel","Kernel.html#method-i-autoload","(p1, p2)","<p>Registers <em>filename</em> to be loaded (using\n<code>Kernel::require</code>)  the first time that <em>module</em> (which\nmay be a  …\n"],["autoload","Module","Module.html#method-i-autoload","(p1, p2)","<p>Registers <em>filename</em> to be loaded (using\n<code>Kernel::require</code>)  the first time that <em>name</em> (which may\nbe a <code>String</code> …\n"],["autoload?","Kernel","Kernel.html#method-i-autoload-3F","(p1)","<p>Registers <em>filename</em> to be loaded (using\n<code>Kernel::require</code>) the first time that <em>module</em> (which\nmay be a <code>String</code> …\n"],["autoload?","Module","Module.html#method-i-autoload-3F","(p1)","<p>Returns <em>filename</em> to be loaded if <em>name</em> is registered as\n<code>autoload</code> in the namespace of <em>mod</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">A</span>\n<span class=\"ruby-keyword\">end</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["backtrace","Exception","Exception.html#method-i-backtrace","()","<p>Returns any backtrace associated with the exception. The backtrace is an\narray of strings, each containing …\n"],["basename","File","File.html#method-c-basename","(p1, p2 = v2)","<p>Returns the last component of the filename given in <em>file_name</em>,\nwhich must be formed using forward slashes …\n"],["begin","MatchData","MatchData.html#method-i-begin","(p1)","<p>Returns the offset of the start of the <em>n</em>th element of the match\narray in the string.\n\n<pre>m = /(.)(.)(\\d+)(\\d)/.match(&quot;THX1138.&quot;) ...</pre>\n"],["begin","Range","Range.html#method-i-begin","()","<p>Returns the first object in <em>rng</em>.\n"],["between?","Comparable","Comparable.html#method-i-between-3F","(p1, p2)","<p>Returns <code>false</code> if <em>obj</em> <code>&lt;=&gt;</code>\n<em>min</em> is less than zero or if <em>anObject</em>\n<code>&lt;=&gt;</code> <em>max</em> is greater than zero, …\n"],["bind","UnboundMethod","UnboundMethod.html#method-i-bind","(p1)","<p>Bind <em>umeth</em> to <em>obj</em>. If <code>Klass</code> was the class\nfrom which <em>umeth</em> was obtained, <code>obj.kind_of?(Klass)</code>\nmust be …\n"],["binding","Kernel","Kernel.html#method-i-binding","()","<p>Returns a <code>Binding</code> object, describing the variable and method\nbindings at the point of call. This object …\n"],["binding","Proc","Proc.html#method-i-binding","()","<p>Returns the binding associated with <em>prc</em>. Note that\n<code>Kernel#eval</code> accepts either a <code>Proc</code> or a\n<code>Binding</code> object …\n"],["binmode","IO","IO.html#method-i-binmode","()","<p>Puts <em>ios</em> into binary mode. This is useful only in MS-DOS/Windows\nenvironments. Once a stream is in binary …\n"],["blksize","File::Stat","File/Stat.html#method-i-blksize","()","<p>Returns the native file system’s block size. Will return <code>nil</code>\non platforms that don’t support this information. …\n"],["block_given?","Kernel","Kernel.html#method-i-block_given-3F","()","<p>Returns <code>true</code> if <code>yield</code> would execute a block in\nthe current context. The <code>iterator?</code> form is mildly deprecated.\n…\n"],["blockdev?","File","File.html#method-c-blockdev-3F","(p1)","<p>Returns <code>true</code> if the named file is a block device.\n"],["blockdev?","File::Stat","File/Stat.html#method-i-blockdev-3F","()","<p>Returns <code>true</code> if the file is a block device, <code>false</code>\nif it isn’t or if the operating system doesn’t support …\n"],["blockdev?","FileTest","FileTest.html#method-i-blockdev-3F","(p1)","<p>Returns <code>true</code> if the named file is a block device.\n"],["blocks","File::Stat","File/Stat.html#method-i-blocks","()","<p>Returns the number of native file system blocks allocated for this file, or\n<code>nil</code> if the operating system …\n"],["bytes","IO","IO.html#method-i-bytes","()","<p>Returns an enumerator that gives each byte (0..255) in <em>ios</em>. The\nstream must be opened for reading or …\n"],["bytes","String","String.html#method-i-bytes","()","<p>Returns an enumerator that gives each byte in the string.  If a block is\ngiven, it iterates over each ...\n"],["bytesize","String","String.html#method-i-bytesize","()","<p>Returns the length of <em>str</em>.\n"],["call","Continuation","Continuation.html#method-i-call","(*args)","<p>Invokes the continuation. The program continues from the end of the\n<code>callcc</code> block. If no arguments are …\n"],["call","Method","Method.html#method-i-call","(*args)","<p>Invokes the <em>meth</em> with the specified arguments, returning the\nmethod’s return value.\n\n<pre>m = 12.method(&quot;+&quot;) ...</pre>\n"],["call","Proc","Proc.html#method-i-call","(*args)","<p>Invokes the block, setting the block’s parameters to the values in\n<em>params</em> using something close to method …\n"],["call_finalizer","ObjectSpace","ObjectSpace.html#method-c-call_finalizer","(p1)","<p>deprecated\n"],["callcc","Kernel","Kernel.html#method-i-callcc","()","<p>Generates a <code>Continuation</code> object, which it passes to the\nassociated block. Performing a <em>cont</em><code>.call</code> will …\n"],["caller","Kernel","Kernel.html#method-i-caller","(p1 = v1)","<p>Returns the current execution stack—an array containing strings in the form\n“<em>file:line</em>” or “<em>file:line:</em> …\n"],["capitalize","String","String.html#method-i-capitalize","()","<p>Returns a copy of <em>str</em> with the first character converted to\nuppercase and the remainder to lowercase. …\n"],["capitalize!","String","String.html#method-i-capitalize-21","()","<p>Modifies <em>str</em> by converting the first character to uppercase and\nthe remainder to lowercase. Returns  …\n"],["captures","MatchData","MatchData.html#method-i-captures","()","<p>Returns the array of captures; equivalent to <code>mtch.to_a[1..-1]</code>.\n\n<pre>f1,f2,f3,f4 = /(.)(.)(\\d+)(\\d)/.match(&quot;THX1138.&quot;).captures ...</pre>\n"],["casecmp","String","String.html#method-i-casecmp","(p1)","<p>Case-insensitive version of <code>String#&lt;=&gt;</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;abcdef&quot;</span>.<span class=\"ruby-identifier\">casecmp</span>(<span class=\"ruby-string\">&quot;abcde&quot;</span>)     <span class=\"ruby-comment\">#=&gt; 1</span>\n<span class=\"ruby-string\">&quot;aBcDeF&quot;</span>.<span class=\"ruby-identifier\">casecmp</span>(<span class=\"ruby-string\">&quot;abcdef&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["casefold?","Regexp","Regexp.html#method-i-casefold-3F","()","<p>Returns the value of the case-insensitive flag.\n"],["catch","Kernel","Kernel.html#method-i-catch","(p1)","<p><code>catch</code> executes its block. If a <code>throw</code> is executed,\nRuby searches up its stack for a <code>catch</code> block with a ...\n"],["ceil","Float","Float.html#method-i-ceil","()","<p>Returns the smallest <code>Integer</code> greater than or equal to\n<em>flt</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1.2</span>.<span class=\"ruby-identifier\">ceil</span>      <span class=\"ruby-comment\">#=&gt; 2</span>\n<span class=\"ruby-value\">2.0</span>.<span class=\"ruby-identifier\">ceil</span>      <span class=\"ruby-comment\">#=&gt; 2</span>\n(<span class=\"ruby-value\">-1.2</span>).<span class=\"ruby-identifier\">ceil</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ceil","Integer","Integer.html#method-i-ceil","()","<p>As <em>int</em> is already an <code>Integer</code>, all these methods\nsimply return the receiver.\n"],["ceil","Numeric","Numeric.html#method-i-ceil","()","<p>Returns the smallest <code>Integer</code> greater than or equal to\n<em>num</em>. Class <code>Numeric</code> achieves this by converting …\n"],["center","String","String.html#method-i-center","(*args)","<p>If <em>integer</em> is greater than the length of <em>str</em>, returns a\nnew <code>String</code> of length <em>integer</em> with <em>str</em>\ncentered …\n"],["change_privilege","Process::GID","Process/GID.html#method-c-change_privilege","(p1)","<p>Change the current process’s real and effective group ID to that specified\nby <em>integer</em>. Returns the new …\n"],["change_privilege","Process::UID","Process/UID.html#method-c-change_privilege","(p1)","<p>Change the current process’s real and effective user ID to that specified\nby <em>integer</em>. Returns the new …\n"],["chardev?","File","File.html#method-c-chardev-3F","(p1)","<p>Returns <code>true</code> if the named file is a character device.\n"],["chardev?","File::Stat","File/Stat.html#method-i-chardev-3F","()","<p>Returns <code>true</code> if the file is a character device,\n<code>false</code> if it isn’t or if the operating system doesn’t …\n"],["chardev?","FileTest","FileTest.html#method-i-chardev-3F","(p1)","<p>Returns <code>true</code> if the named file is a character device.\n"],["chars","IO","IO.html#method-i-chars","()","<p>Calls the given block once for each character in <em>ios</em>, passing the\ncharacter as an argument. The stream …\n"],["chars","String","String.html#method-i-chars","()","<p>Returns an enumerator that gives each character in the string. If a block\nis given, it iterates over ...\n"],["chdir","Dir","Dir.html#method-c-chdir","(p1 = v1)","<p>Changes the current working directory of the process to the given string.\nWhen called without an argument, …\n"],["chmod","File","File.html#method-c-chmod","(p1, *args)","<p>Changes permission bits on the named file(s) to the bit pattern represented\nby <em>mode_int</em>. Actual effects …\n"],["chmod","File","File.html#method-i-chmod","(p1)","<p>Changes permission bits on <em>file</em> to the bit pattern represented by\n<em>mode_int</em>. Actual effects are platform …\n"],["choice","Array","Array.html#method-i-choice","()","<p>Choose a random element from an array.\n"],["chomp","Kernel","Kernel.html#method-i-chomp","(*args)","<p>Equivalent to <code>$_ = $_.chomp(<em>string</em>)</code>. See\n<code>String#chomp</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">$_</span> = <span class=\"ruby-string\">&quot;now\\n&quot;</span>\n<span class=\"ruby-identifier\">chomp</span>         <span class=\"ruby-comment\">#=&gt; &quot;now&quot;</span>\n<span class=\"ruby-identifier\">$_</span>        <span class=\"ruby-operator\">...</span>\n</pre>\n"],["chomp","String","String.html#method-i-chomp","(*args)","<p>Returns a new <code>String</code> with the given record separator removed\nfrom the end of <em>str</em> (if present). If <code>$/</code> …\n"],["chomp!","Kernel","Kernel.html#method-i-chomp-21","(*args)","<p>Equivalent to <code>$_.chomp!(<em>string</em>)</code>. See\n<code>String#chomp!</code>\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">$_</span> = <span class=\"ruby-string\">&quot;now\\n&quot;</span>\n<span class=\"ruby-identifier\">chomp!</span>       <span class=\"ruby-comment\">#=&gt; &quot;now&quot;</span>\n<span class=\"ruby-identifier\">$_</span>           <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["chomp!","String","String.html#method-i-chomp-21","(p1 = v1)","<p>Modifies <em>str</em> in place as described for <code>String#chomp</code>,\nreturning <em>str</em>, or <code>nil</code> if no modifications were made.\n…\n"],["chop","Kernel","Kernel.html#method-i-chop","()","<p>Equivalent to <code>($_.dup).chop!</code>, except <code>nil</code> is never\nreturned. See <code>String#chop!</code>.\n\n<pre>a  =  &quot;now\\r\\n&quot;\n$_ = a\nchop ...</pre>\n"],["chop","String","String.html#method-i-chop","()","<p>Returns a new <code>String</code> with the last character removed.  If the\nstring ends with <code>\\r\\n</code>, both characters …\n"],["chop!","Kernel","Kernel.html#method-i-chop-21","()","<p>Equivalent to <code>$_.chop!</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span>  = <span class=\"ruby-string\">&quot;now\\r\\n&quot;</span>\n<span class=\"ruby-identifier\">$_</span> = <span class=\"ruby-identifier\">a</span>\n<span class=\"ruby-identifier\">chop!</span>   <span class=\"ruby-comment\">#=&gt; &quot;now&quot;</span>\n<span class=\"ruby-identifier\">chop!</span>   <span class=\"ruby-comment\">#=&gt; &quot;no&quot;</span>\n<span class=\"ruby-identifier\">chop!</span>   <span class=\"ruby-comment\">#=&gt; &quot;n&quot;</span>\n<span class=\"ruby-identifier\">chop!</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["chop!","String","String.html#method-i-chop-21","()","<p>Processes <em>str</em> as for <code>String#chop</code>, returning\n<em>str</em>, or <code>nil</code> if <em>str</em> is the empty string.  See\nalso <code>String#chomp!</code> …\n"],["chown","File","File.html#method-i-chown","(p1, p2)","<p>Changes the owner and group of <em>file</em> to the given numeric owner and\ngroup id’s. Only a process with superuser …\n"],["chown","File","File.html#method-c-chown","(p1, p2, *args)","<p>Changes the owner and group of the named file(s) to the given numeric owner\nand group id’s. Only a process …\n"],["chr","Integer","Integer.html#method-i-chr","()","<p>Returns a string containing the ASCII character represented by the\nreceiver’s value.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">65</span>.<span class=\"ruby-identifier\">chr</span>    <span class=\"ruby-comment\">#=&gt; &quot;A&quot; ...</span>\n</pre>\n"],["chroot","Dir","Dir.html#method-c-chroot","(p1)","<p>Changes this process’s idea of the file system root. Only a privileged\nprocess may make this call. Not …\n"],["class","Object","Object.html#method-i-class","()","<p>Returns the class of <em>obj</em>, now preferred over\n<code>Object#type</code>, as an object’s type in Ruby is only loosely …\n"],["class_eval","Module","Module.html#method-i-class_eval","(*args)","<p>Evaluates the string or block in the context of <em>mod</em>. This can be\nused to add methods to a class. <code>module_eval</code> …\n"],["class_exec","Module","Module.html#method-i-class_exec","(*args)","<p>Evaluates the given block in the context of the class/module. The method\ndefined in the block will belong …\n"],["class_variable_defined?","Module","Module.html#method-i-class_variable_defined-3F","(p1)","<p>Returns <code>true</code> if the given class variable is defined in\n<em>obj</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Fred</span>\n  <span class=\"ruby-identifier\">@@foo</span> = <span class=\"ruby-value\">99</span>\n<span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-constant\">Fred</span>.<span class=\"ruby-identifier\">class_variable_defined?</span>(:<span class=\"ruby-identifier\">@@foo</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["class_variable_get","Module","Module.html#method-i-class_variable_get","(p1)","<p>Returns the value of the given class variable (or throws a\n<code>NameError</code> exception). The <code>@@</code> part of the variable\n…\n"],["class_variable_set","Module","Module.html#method-i-class_variable_set","(p1, p2)","<p>Sets the class variable names by <em>symbol</em> to <em>object</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Fred</span>\n  <span class=\"ruby-identifier\">@@foo</span> = <span class=\"ruby-value\">99</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">foo</span>\n    <span class=\"ruby-identifier\">@@foo</span>\n  <span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-keyword\">end</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["class_variables","Module","Module.html#method-i-class_variables","()","<p>Returns an array of the names of class variables in <em>mod</em> and the\nancestors of <em>mod</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">One</span>\n  <span class=\"ruby-identifier\">@@var1</span> = <span class=\"ruby-operator\">...</span>\n</pre>\n"],["clear","Array","Array.html#method-i-clear","()","<p>Removes all elements from <em>self</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [ <span class=\"ruby-string\">&quot;a&quot;</span>, <span class=\"ruby-string\">&quot;b&quot;</span>, <span class=\"ruby-string\">&quot;c&quot;</span>, <span class=\"ruby-string\">&quot;d&quot;</span>, <span class=\"ruby-string\">&quot;e&quot;</span> ]\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">clear</span>    <span class=\"ruby-comment\">#=&gt; [ ]</span>\n</pre>\n"],["clear","Hash","Hash.html#method-i-clear","()","<p>Removes all key-value pairs from <em>hsh</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = { <span class=\"ruby-string\">&quot;a&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">100</span>, <span class=\"ruby-string\">&quot;b&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">200</span> }   <span class=\"ruby-comment\">#=&gt; {&quot;a&quot;=&gt;100, &quot;b&quot;=&gt;200}</span>\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">clear</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["clone","Binding","Binding.html#method-i-clone","()","<p>MISSING: documentation\n"],["clone","Method","Method.html#method-i-clone","()","<p>MISSING: documentation\n"],["clone","Object","Object.html#method-i-clone","()","<p>Produces a shallow copy of <em>obj</em>—the instance variables of\n<em>obj</em> are copied, but not the objects they reference. …\n"],["clone","Proc","Proc.html#method-i-clone","()","<p>MISSING: documentation\n"],["clone","UnboundMethod","UnboundMethod.html#method-i-clone","()","<p>MISSING: documentation\n"],["close","Dir","Dir.html#method-i-close","()","<p>Closes the directory stream. Any further attempts to access <em>dir</em>\nwill raise an <code>IOError</code>.\n\n<pre>d = Dir.new(&quot;testdir&quot;) ...</pre>\n"],["close","IO","IO.html#method-i-close","()","<p>Closes <em>ios</em> and flushes any pending writes to the operating system.\nThe stream is unavailable for any …\n"],["close_read","IO","IO.html#method-i-close_read","()","<p>Closes the read end of a duplex I/O stream (i.e., one that contains both a\nread and a write stream, such …\n"],["close_write","IO","IO.html#method-i-close_write","()","<p>Closes the write end of a duplex I/O stream (i.e., one that contains both a\nread and a write stream, …\n"],["closed?","IO","IO.html#method-i-closed-3F","()","<p>Returns <code>true</code> if <em>ios</em> is completely closed (for duplex\nstreams, both reader and writer), <code>false</code> otherwise. …\n"],["coerce","Bignum","Bignum.html#method-i-coerce","(p1)","<p>MISSING: documentation\n"],["coerce","Float","Float.html#method-i-coerce","(p1)","<p>MISSING: documentation\n"],["coerce","Numeric","Numeric.html#method-i-coerce","(p1)","<p>If <em>aNumeric</em> is the same type as <em>num</em>, returns an array\ncontaining <em>aNumeric</em> and <em>num</em>. Otherwise, returns …\n"],["collect","Array","Array.html#method-i-collect","()","<p>Invokes <em>block</em> once for each element of <em>self</em>. Creates a \nnew array containing the values returned by the …\n"],["collect","Enumerable","Enumerable.html#method-i-collect","()","<p>Returns a new array with the results of running <em>block</em> once for\nevery element in <em>enum</em>.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">collect</span> {<span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">i</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["collect!","Array","Array.html#method-i-collect-21","()","<p>Invokes the block once for each element of <em>self</em>, replacing the\nelement with the value returned by <em>block</em> …\n"],["combination","Array","Array.html#method-i-combination","(p1)","<p>When invoked with a block, yields all combinations of length <em>n</em>  of\nelements from <em>ary</em> and then returns …\n"],["compact","Array","Array.html#method-i-compact","()","<p>Returns a copy of <em>self</em> with all <code>nil</code> elements removed.\n\n<pre>[ &quot;a&quot;, nil, &quot;b&quot;, nil, &quot;c&quot;, nil ].compact\n       ...</pre>\n"],["compact!","Array","Array.html#method-i-compact-21","()","<p>Removes <code>nil</code> elements from array. Returns <code>nil</code> if\nno changes were made.\n\n<pre>[ &quot;a&quot;, nil, &quot;b&quot;, nil, &quot;c&quot; ].compact! ...</pre>\n"],["compile","Regexp","Regexp.html#method-c-compile","(*args)","<p>Synonym for <code>Regexp.new</code>\n"],["concat","Array","Array.html#method-i-concat","(p1)","<p>Appends the elements in other_array to <em>self</em>.\n\n<pre class=\"ruby\">[ <span class=\"ruby-string\">&quot;a&quot;</span>, <span class=\"ruby-string\">&quot;b&quot;</span> ].<span class=\"ruby-identifier\">concat</span>( [<span class=\"ruby-string\">&quot;c&quot;</span>, <span class=\"ruby-string\">&quot;d&quot;</span>] ) <span class=\"ruby-comment\">#=&gt; [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot; ...</span>\n</pre>\n"],["concat","String","String.html#method-i-concat","(p1)","<p>Append—Concatenates the given object to <em>str</em>. If the object is a\n<code>Fixnum</code> between 0 and 255, it is converted …\n"],["const_defined?","Module","Module.html#method-i-const_defined-3F","(p1)","<p>Returns <code>true</code> if a constant with the given name is defined by\n<em>mod</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Math</span>.<span class=\"ruby-identifier\">const_defined?</span> <span class=\"ruby-string\">&quot;PI&quot;</span>   <span class=\"ruby-comment\">#=&gt; true</span>\n</pre>\n"],["const_get","Module","Module.html#method-i-const_get","(p1)","<p>Returns the value of the named constant in <em>mod</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Math</span>.<span class=\"ruby-identifier\">const_get</span>(:<span class=\"ruby-constant\">PI</span>)   <span class=\"ruby-comment\">#=&gt; 3.14159265358979</span>\n</pre>\n"],["const_missing","Module","Module.html#method-i-const_missing","(p1)","<p>Invoked when a reference is made to an undefined constant in <em>mod</em>.\nIt is passed a symbol for the undefined …\n"],["const_set","Module","Module.html#method-i-const_set","(p1, p2)","<p>Sets the named constant to the given object, returning that object. Creates\na new constant if no constant …\n"],["constants","Module","Module.html#method-c-constants","()","<p>Returns an array of the names of all constants defined in the system. This\nlist includes the names of …\n"],["constants","Module","Module.html#method-i-constants","()","<p>Returns an array of the names of the constants accessible in <em>mod</em>.\nThis includes the names of constants …\n"],["coredump?","Process::Status","Process/Status.html#method-i-coredump-3F","()","<p>Returns <code>true</code> if <em>stat</em> generated a coredump when it\nterminated. Not available on all platforms.\n"],["cos","Math","Math.html#method-c-cos","(p1)","<p>Computes the cosine of <em>x</em> (expressed in radians). Returns -1..1.\n"],["cosh","Math","Math.html#method-c-cosh","(p1)","<p>Computes the hyperbolic cosine of <em>x</em> (expressed in radians).\n"],["count","Array","Array.html#method-i-count","(p1)","<p>Returns the number of elements.  If an argument is given, counts the number\nof elements which equals …\n"],["count","Enumerable","Enumerable.html#method-i-count","(p1)","<p>Returns the number of items in <em>enum</em>, where #size is called if it\nresponds to it, otherwise the items …\n"],["count","String","String.html#method-i-count","(*args)","<p>Each <em>other_str</em> parameter defines a set of characters to count. \nThe intersection of these sets defines …\n"],["critical","Thread","Thread.html#method-c-critical","()","<p>Returns the status of the global “thread critical” condition.\n"],["critical=","Thread","Thread.html#method-c-critical-3D","(p1)","<p>Sets the status of the global “thread critical” condition and returns it.\nWhen set to <code>true</code>, prohibits …\n"],["crypt","String","String.html#method-i-crypt","(p1)","<p>Applies a one-way cryptographic hash to <em>str</em> by invoking the\nstandard library function <code>crypt</code>. The argument …\n"],["ctime","File","File.html#method-c-ctime","(p1)","<p>Returns the change time for the named file (the time at which directory\ninformation about the file was …\n"],["ctime","File","File.html#method-i-ctime","()","<p>Returns the change time for <em>file</em> (that is, the time directory\ninformation about the file was changed, …\n"],["ctime","File::Stat","File/Stat.html#method-i-ctime","()","<p>Returns the change time for <em>stat</em> (that is, the time directory\ninformation about the file was changed, …\n"],["ctime","Time","Time.html#method-i-ctime","()","<p>Returns a canonical string representation of <em>time</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>.<span class=\"ruby-identifier\">asctime</span>   <span class=\"ruby-comment\">#=&gt; &quot;Wed Apr  9 08:56:03 2003&quot;</span>\n</pre>\n"],["current","Thread","Thread.html#method-c-current","()","<p>Returns the currently executing thread.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Thread</span>.<span class=\"ruby-identifier\">current</span>   <span class=\"ruby-comment\">#=&gt; #&lt;Thread:0x401bdf4c run&gt;</span>\n</pre>\n"],["cycle","Array","Array.html#method-i-cycle","(p1 = v1)","<p>Calls <em>block</em> for each element repeatedly <em>n</em> times or\nforever if none or nil is given.  If a non-positive …\n"],["cycle","Enumerable","Enumerable.html#method-i-cycle","(p1 = v1)","<p>Calls <em>block</em> for each element of <em>enum</em> repeatedly\n<em>n</em> times or forever if none or nil is given.  If a non-positive …\n"],["day","Time","Time.html#method-i-day","()","<p>Returns the day of the month (1..n) for <em>time</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>   <span class=\"ruby-comment\">#=&gt; Wed Apr 09 08:56:03 CDT 2003</span>\n<span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">day</span>   <span class=\"ruby-operator\">...</span>\n</pre>\n"],["default","Hash","Hash.html#method-i-default","(p1 = v1)","<p>Returns the default value, the value that would be returned by <em>hsh</em>\nif <em>key</em> did not exist in <em>hsh</em>. See also …\n"],["default=","Hash","Hash.html#method-i-default-3D","(p1)","<p>Sets the default value, the value returned for a key that does not exist in\nthe hash. It is not possible …\n"],["default_proc","Hash","Hash.html#method-i-default_proc","()","<p>If <code>Hash::new</code> was invoked with a block, return that block,\notherwise return <code>nil</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = <span class=\"ruby-constant\">Hash</span>.<span class=\"ruby-identifier\">new</span> {<span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">h</span>,<span class=\"ruby-identifier\">k</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">h</span>[<span class=\"ruby-identifier\">k</span>] <span class=\"ruby-operator\">...</span>\n</pre>\n"],["define_finalizer","ObjectSpace","ObjectSpace.html#method-c-define_finalizer","(p1, p2 = v2)","<p>Adds <em>aProc</em> as a finalizer, to be called after <em>obj</em> was\ndestroyed.\n"],["define_method","Module","Module.html#method-i-define_method","(*args)","<p>Defines an instance method in the receiver. The <em>method</em> parameter\ncan be a <code>Proc</code> or <code>Method</code> object. If a …\n"],["delete","Array","Array.html#method-i-delete","(p1)","<p>Deletes items from <em>self</em> that are equal to <em>obj</em>. If the\nitem is not found, returns <code>nil</code>. If the optional …\n"],["delete","Dir","Dir.html#method-c-delete","(p1)","<p>Deletes the named directory. Raises a subclass of\n<code>SystemCallError</code> if the directory isn’t empty.\n"],["delete","File","File.html#method-c-delete","(*args)","<p>Deletes the named files, returning the number of names passed as arguments.\nRaises an exception on any …\n"],["delete","Hash","Hash.html#method-i-delete","(p1)","<p>Deletes and returns a key-value pair from <em>hsh</em> whose key is equal\nto <em>key</em>. If the key is not found, returns …\n"],["delete","String","String.html#method-i-delete","(*args)","<p>Returns a copy of <em>str</em> with all characters in the intersection of\nits arguments deleted. Uses the same …\n"],["delete!","String","String.html#method-i-delete-21","(*args)","<p>Performs a <code>delete</code> operation in place, returning <em>str</em>,\nor <code>nil</code> if <em>str</em> was not modified.\n"],["delete_at","Array","Array.html#method-i-delete_at","(p1)","<p>Deletes the element at the specified index, returning that element, or\n<code>nil</code> if the index is out of range. …\n"],["delete_if","Array","Array.html#method-i-delete_if","()","<p>Deletes every element of <em>self</em> for which <em>block</em> evaluates\nto <code>true</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [ <span class=\"ruby-string\">&quot;a&quot;</span>, <span class=\"ruby-string\">&quot;b&quot;</span>, <span class=\"ruby-string\">&quot;c&quot;</span> ]\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">delete_if</span> {<span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">x</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["delete_if","Hash","Hash.html#method-i-delete_if","()","<p>Deletes every key-value pair from <em>hsh</em> for which <em>block</em>\nevaluates to <code>true</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = { <span class=\"ruby-string\">&quot;a&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">100</span>, <span class=\"ruby-string\">&quot;b&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">200</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["detach","Process","Process.html#method-c-detach","(p1)","<p>Some operating systems retain the status of terminated child processes\nuntil the parent collects that …\n"],["detect","Enumerable","Enumerable.html#method-i-detect","(p1 = v1)","<p>Passes each entry in <em>enum</em> to <em>block</em>. Returns the first for\nwhich <em>block</em> is not <code>false</code>.  If no object matches, …\n"],["dev","File::Stat","File/Stat.html#method-i-dev","()","<p>Returns an integer representing the device on which <em>stat</em> resides.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">dev</span>   <span class=\"ruby-comment\">#=&gt; 774</span>\n</pre>\n"],["dev_major","File::Stat","File/Stat.html#method-i-dev_major","()","<p>Returns the major part of <code>File_Stat#dev</code> or <code>nil</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;/dev/fd1&quot;</span>).<span class=\"ruby-identifier\">dev_major</span>   <span class=\"ruby-comment\">#=&gt; 2</span>\n<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;/dev/tty&quot;</span>).<span class=\"ruby-identifier\">dev_major</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["dev_minor","File::Stat","File/Stat.html#method-i-dev_minor","()","<p>Returns the minor part of <code>File_Stat#dev</code> or <code>nil</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;/dev/fd1&quot;</span>).<span class=\"ruby-identifier\">dev_minor</span>   <span class=\"ruby-comment\">#=&gt; 1</span>\n<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;/dev/tty&quot;</span>).<span class=\"ruby-identifier\">dev_minor</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["directory?","File","File.html#method-c-directory-3F","(p1)","<p>Returns <code>true</code> if the named file is a directory,\n<code>false</code> otherwise.\n\n<pre>File.directory?(&quot;.&quot;)</pre>\n"],["directory?","File::Stat","File/Stat.html#method-i-directory-3F","()","<p>Returns <code>true</code> if <em>stat</em> is a directory,\n<code>false</code> otherwise.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">directory?</span>   <span class=\"ruby-comment\">#=&gt; false</span>\n<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;.&quot;</span>).<span class=\"ruby-identifier\">directory?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["directory?","FileTest","FileTest.html#method-i-directory-3F","(p1)","<p>Returns <code>true</code> if the named file is a directory,\n<code>false</code> otherwise.\n\n<pre>File.directory?(&quot;.&quot;)</pre>\n"],["dirname","File","File.html#method-c-dirname","(p1)","<p>Returns all components of the filename given in <em>file_name</em> except\nthe last one. The filename must be formed …\n"],["disable","GC","GC.html#method-c-disable","()","<p>Disables garbage collection, returning <code>true</code> if garbage\ncollection was already disabled.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">GC</span>.<span class=\"ruby-identifier\">disable</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["display","Object","Object.html#method-i-display","(p1 = v1)","<p>Prints <em>obj</em> on the given port (default <code>$&gt;</code>).\nEquivalent to:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">display</span>(<span class=\"ruby-identifier\">port</span>=<span class=\"ruby-identifier\">$&gt;</span>)\n  <span class=\"ruby-identifier\">port</span>.<span class=\"ruby-identifier\">write</span> <span class=\"ruby-keyword\">self</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["div","Bignum","Bignum.html#method-i-div","(p1)","<p>Divides big by other, returning the result.\n"],["div","Fixnum","Fixnum.html#method-i-div","(p1)","<p>Performs division: the class of the resulting object depends on the class\nof <code>numeric</code> and on the magnitude …\n"],["div","Numeric","Numeric.html#method-i-div","(p1)","<p>Uses <code>/</code> to perform division, then converts the result to an\ninteger. <code>Numeric</code> does not define the <code>/</code> operator;\n…\n"],["divmod","Bignum","Bignum.html#method-i-divmod","(p1)","<p>See <code>Numeric#divmod</code>.\n"],["divmod","Fixnum","Fixnum.html#method-i-divmod","(p1)","<p>See <code>Numeric#divmod</code>.\n"],["divmod","Float","Float.html#method-i-divmod","(p1)","<p>See <code>Numeric#divmod</code>.\n"],["divmod","Numeric","Numeric.html#method-i-divmod","(p1)","<p>Returns an array containing the quotient and modulus obtained by dividing\n<em>num</em> by <em>aNumeric</em>. If <code>q, r =</code> …\n"],["downcase","String","String.html#method-i-downcase","()","<p>Returns a copy of <em>str</em> with all uppercase letters replaced with\ntheir lowercase counterparts. The operation …\n"],["downcase!","String","String.html#method-i-downcase-21","()","<p>Downcases the contents of <em>str</em>, returning <code>nil</code> if no\nchanges were made.\n"],["downto","Integer","Integer.html#method-i-downto","(p1)","<p>Iterates <em>block</em>, passing decreasing values from <em>int</em> down\nto and including <em>limit</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">5</span>.<span class=\"ruby-identifier\">downto</span>(<span class=\"ruby-value\">1</span>) { <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">n</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">print</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["drop","Array","Array.html#method-i-drop","(p1)","<p>Drops first n elements from <em>ary</em>, and returns rest elements in an\narray.\n\n<pre>a = [1, 2, 3, 4, 5, 0]\na.drop(3) ...</pre>\n"],["drop","Enumerable","Enumerable.html#method-i-drop","(p1)","<p>Drops first n elements from <em>enum</em>, and returns rest elements in an\narray.\n\n<pre>a = [1, 2, 3, 4, 5, 0]\na.drop(3) ...</pre>\n"],["drop_while","Array","Array.html#method-i-drop_while","()","<p>Drops elements up to, but not including, the first element for which the\nblock returns nil or false and …\n"],["drop_while","Enumerable","Enumerable.html#method-i-drop_while","()","<p>Drops elements up to, but not including, the first element for which the\nblock returns nil or false and …\n"],["dst?","Time","Time.html#method-i-dst-3F","()","<p>Returns <code>true</code> if <em>time</em> occurs during Daylight Saving\nTime in its time zone.\n\n<pre>Time.local(2000, 7, 1).isdst ...</pre>\n"],["dump","Marshal","Marshal.html#method-c-dump","(p1, p2 = v2, p3 = v3)","<p>Serializes obj and all descendent objects. If anIO is specified, the\nserialized data will be written …\n"],["dump","String","String.html#method-i-dump","()","<p>Produces a version of <em>str</em> with all nonprinting characters replaced\nby <code>\\nnn</code> notation and all special characters …\n"],["dup","Binding","Binding.html#method-i-dup","()",""],["dup","Object","Object.html#method-i-dup","()","<p>Produces a shallow copy of <em>obj</em>—the instance variables of\n<em>obj</em> are copied, but not the objects they reference. …\n"],["dup","Proc","Proc.html#method-i-dup","()",""],["each","Array","Array.html#method-i-each","()","<p>Calls <em>block</em> once for each element in <em>self</em>, passing that\nelement as a parameter.\n\n<pre>a = [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; ] ...</pre>\n"],["each","Dir","Dir.html#method-i-each","()","<p>Calls the block once for each entry in this directory, passing the filename\nof each entry as a parameter …\n"],["each","Enumerable::Enumerator","Enumerable/Enumerator.html#method-i-each","()","<p>Iterates the given block using the object and the method specified in the\nfirst place.  If no block is …\n"],["each","Hash","Hash.html#method-i-each","()","<p>Calls <em>block</em> once for each key in <em>hsh</em>, passing the key and\nvalue to the block as a two-element array. …\n"],["each","IO","IO.html#method-i-each","(p1)","<p>Executes the block for every line in <em>ios</em>, where lines are\nseparated by <em>sep_string</em>. <em>ios</em> must be opened …\n"],["each","Range","Range.html#method-i-each","()","<p>Iterates over the elements <em>rng</em>, passing each in turn to the block.\nYou can only iterate if the start …\n"],["each","String","String.html#method-i-each","(p1 = v1)","<p>Splits <em>str</em> using the supplied parameter as the record separator\n(<code>$/</code> by default), passing each substring …\n"],["each","Struct","Struct.html#method-i-each","()","<p>Calls <em>block</em> once for each instance variable, passing the value as\na parameter.\n\n<pre>Customer = Struct.new(:name, ...</pre>\n"],["each_byte","IO","IO.html#method-i-each_byte","()","<p>Calls the given block once for each byte (0..255) in <em>ios</em>, passing\nthe byte as an argument. The stream …\n"],["each_byte","String","String.html#method-i-each_byte","()","<p>Passes each byte in <em>str</em> to the given block.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;hello&quot;</span>.<span class=\"ruby-identifier\">each_byte</span> {<span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">c</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">print</span> <span class=\"ruby-identifier\">c</span>, <span class=\"ruby-string\">' '</span> }\n</pre>\n<p><em>produces:</em>\n"],["each_char","IO","IO.html#method-i-each_char","()","<p>Calls the given block once for each character in <em>ios</em>, passing the\ncharacter as an argument. The stream …\n"],["each_char","String","String.html#method-i-each_char","()","<p>Passes each character in <em>str</em> to the given block.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;hello&quot;</span>.<span class=\"ruby-identifier\">each_char</span> {<span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">c</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">print</span> <span class=\"ruby-identifier\">c</span>, <span class=\"ruby-string\">' '</span> }\n</pre>\n<p><em>produces:</em>\n"],["each_cons","Enumerable","Enumerable.html#method-i-each_cons","(p1)","<p>Iterates the given block for each array of consecutive &lt;n&gt; elements. \nIf no block is given, returns …\n"],["each_index","Array","Array.html#method-i-each_index","()","<p>Same as <code>Array#each</code>, but passes the index of the element\ninstead of the element itself.\n\n<pre>a = [ &quot;a&quot;, &quot;b&quot;, ...</pre>\n"],["each_key","Hash","Hash.html#method-i-each_key","()","<p>Calls <em>block</em> once for each key in <em>hsh</em>, passing the key as\na parameter.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = { <span class=\"ruby-string\">&quot;a&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">100</span>, <span class=\"ruby-string\">&quot;b&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">200</span> }\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">each_key</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["each_line","IO","IO.html#method-i-each_line","(p1)","<p>Executes the block for every line in <em>ios</em>, where lines are\nseparated by <em>sep_string</em>. <em>ios</em> must be opened …\n"],["each_line","String","String.html#method-i-each_line","(p1 = v1)","<p>Splits <em>str</em> using the supplied parameter as the record separator\n(<code>$/</code> by default), passing each substring …\n"],["each_object","ObjectSpace","ObjectSpace.html#method-c-each_object","(p1 = v1)","<p>Calls the block once for each living, nonimmediate object in this Ruby\nprocess. If <em>module</em> is specified, …\n"],["each_pair","Hash","Hash.html#method-i-each_pair","()","<p>Calls <em>block</em> once for each key in <em>hsh</em>, passing the key and\nvalue as parameters.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = { <span class=\"ruby-string\">&quot;a&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">100</span>, <span class=\"ruby-string\">&quot;b&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["each_pair","Struct","Struct.html#method-i-each_pair","()","<p>Calls <em>block</em> once for each instance variable, passing the name (as\na symbol) and the value as parameters. …\n"],["each_slice","Enumerable","Enumerable.html#method-i-each_slice","(p1)","<p>Iterates the given block for each slice of &lt;n&gt; elements.  If no block\nis given, returns an enumerator. …\n"],["each_value","Hash","Hash.html#method-i-each_value","()","<p>Calls <em>block</em> once for each key in <em>hsh</em>, passing the value\nas a parameter.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = { <span class=\"ruby-string\">&quot;a&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">100</span>, <span class=\"ruby-string\">&quot;b&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">200</span> } <span class=\"ruby-operator\">...</span>\n</pre>\n"],["each_with_index","Enumerable","Enumerable.html#method-i-each_with_index","()","<p>Calls <em>block</em> with two arguments, the item and its index, for each\nitem in <em>enum</em>.\n\n<pre>hash = Hash.new\n%w(cat ...</pre>\n"],["each_with_index","Enumerable::Enumerator","Enumerable/Enumerator.html#method-i-each_with_index","()","<p>Iterates the given block for each elements with an index, which start from\n0.  If no block is given, …\n"],["egid","Process","Process.html#method-c-egid","()","<p>Returns the effective group ID for this process. Not available on all\nplatforms.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">egid</span>   <span class=\"ruby-comment\">#=&gt; 500</span>\n</pre>\n"],["egid=","Process","Process.html#method-c-egid-3D","(p1)","<p>Sets the effective group ID for this process. Not available on all\nplatforms.\n"],["eid","Process::GID","Process/GID.html#method-c-eid","()","<p>Returns the effective group ID for this process. Not available on all\nplatforms.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">egid</span>   <span class=\"ruby-comment\">#=&gt; 500</span>\n</pre>\n"],["eid","Process::UID","Process/UID.html#method-c-eid","()","<p>Returns the effective user ID for this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">euid</span>   <span class=\"ruby-comment\">#=&gt; 501</span>\n</pre>\n"],["empty?","Array","Array.html#method-i-empty-3F","()","<p>Returns <code>true</code> if <em>self</em> array contains no elements.\n\n<pre class=\"ruby\">[].<span class=\"ruby-identifier\">empty?</span>   <span class=\"ruby-comment\">#=&gt; true</span>\n</pre>\n"],["empty?","Hash","Hash.html#method-i-empty-3F","()","<p>Returns <code>true</code> if <em>hsh</em> contains no key-value pairs.\n\n<pre class=\"ruby\">{}.<span class=\"ruby-identifier\">empty?</span>   <span class=\"ruby-comment\">#=&gt; true</span>\n</pre>\n"],["empty?","String","String.html#method-i-empty-3F","()","<p>Returns <code>true</code> if <em>str</em> has a length of zero.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;hello&quot;</span>.<span class=\"ruby-identifier\">empty?</span>   <span class=\"ruby-comment\">#=&gt; false</span>\n<span class=\"ruby-string\">&quot;&quot;</span>.<span class=\"ruby-identifier\">empty?</span>        <span class=\"ruby-comment\">#=&gt; true</span>\n</pre>\n"],["enable","GC","GC.html#method-c-enable","()","<p>Enables garbage collection, returning <code>true</code> if garbage\ncollection was previously disabled.\n\n<pre>GC.disable  ...</pre>\n"],["enclose","ThreadGroup","ThreadGroup.html#method-i-enclose","()","<p>Prevents threads from being added to or removed from the receiving\n<code>ThreadGroup</code>. New threads can still …\n"],["enclosed?","ThreadGroup","ThreadGroup.html#method-i-enclosed-3F","()","<p>Returns <code>true</code> if <em>thgrp</em> is enclosed. See also\nThreadGroup#enclose.\n"],["end","MatchData","MatchData.html#method-i-end","(p1)","<p>Returns the offset of the character immediately following the end of the\n<em>n</em>th element of the match array …\n"],["end","Range","Range.html#method-i-end","()","<p>Returns the object that defines the end of <em>rng</em>.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">10</span>).<span class=\"ruby-identifier\">end</span>    <span class=\"ruby-comment\">#=&gt; 10</span>\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">...</span><span class=\"ruby-value\">10</span>).<span class=\"ruby-identifier\">end</span>   <span class=\"ruby-comment\">#=&gt; 10</span>\n</pre>\n"],["end_with?","String","String.html#method-i-end_with-3F","(*args)","<p>Returns true if <em>str</em> ends with the suffix given.\n"],["entries","Dir","Dir.html#method-c-entries","(p1)","<p>Returns an array containing all of the filenames in the given directory.\nWill raise a <code>SystemCallError</code> …\n"],["entries","Enumerable","Enumerable.html#method-i-entries","(*args)","<p>Returns an array containing the items in <em>enum</em>.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">7</span>).<span class=\"ruby-identifier\">to_a</span>                       <span class=\"ruby-comment\">#=&gt; [1, 2, 3, 4, 5, 6, ...</span>\n</pre>\n"],["enum_cons","Enumerable","Enumerable.html#method-i-enum_cons","(p1)","<p>Iterates the given block for each array of consecutive &lt;n&gt; elements. \nIf no block is given, returns …\n"],["enum_for","Object","Object.html#method-i-enum_for","(*args)","<p>Returns Enumerable::Enumerator.new(self, method, *args).\n<p>e.g.:\n\n<pre>str = &quot;xyz&quot;\n\nenum = str.enum_for(:each_byte) ...</pre>\n"],["enum_slice","Enumerable","Enumerable.html#method-i-enum_slice","(p1)","<p>Iterates the given block for each slice of &lt;n&gt; elements.  If no block\nis given, returns an enumerator. …\n"],["enum_with_index","Enumerable","Enumerable.html#method-i-enum_with_index","()","<p>Calls <em>block</em> with two arguments, the item and its index, for each\nitem in <em>enum</em>.\n\n<pre>hash = Hash.new\n%w(cat ...</pre>\n"],["eof","IO","IO.html#method-i-eof","()","<p>Returns true if <em>ios</em> is at end of file that means there are no more\ndata to read. The stream must be opened …\n"],["eof?","IO","IO.html#method-i-eof-3F","()","<p>Returns true if <em>ios</em> is at end of file that means there are no more\ndata to read. The stream must be opened …\n"],["eql?","Array","Array.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if <em>array</em> and <em>other</em> are the same\nobject, or are both arrays with the same content.\n"],["eql?","Bignum","Bignum.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> only if <em>obj</em> is a <code>Bignum</code>\nwith the same value as <em>big</em>. Contrast this with\n<code>Bignum#==</code>, which …\n"],["eql?","Float","Float.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> only if <em>obj</em> is a <code>Float</code> with\nthe same value as <em>flt</em>. Contrast this with <code>Float#==</code>,\nwhich performs …\n"],["eql?","Hash","Hash.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if <em>hash</em> and <em>other</em> are both\nhashes with the same content.\n"],["eql?","Numeric","Numeric.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if <em>num</em> and <em>numeric</em> are the same\ntype and have equal values.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-value\">1.0</span>          <span class=\"ruby-comment\">#=&gt; true</span>\n<span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">eql?</span>(<span class=\"ruby-value\">1.0</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["eql?","Object","Object.html#method-i-eql-3F","(p1)","<p>Equality—At the <code>Object</code> level, <code>==</code> returns\n<code>true</code> only if <em>obj</em> and <em>other</em> are the same\nobject. Typically …\n"],["eql?","Range","Range.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> only if <em>obj</em> is a Range, has equivalent\nbeginning and end items (by comparing them with  …\n"],["eql?","Regexp","Regexp.html#method-i-eql-3F","(p1)","<p>Equality—Two regexps are equal if their patterns are identical, they have\nthe same character set code, …\n"],["eql?","String","String.html#method-i-eql-3F","(p1)","<p>Two strings are equal if the have the same length and content.\n"],["eql?","Struct","Struct.html#method-i-eql-3F","(p1)","<p>code-seq:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">struct</span>.<span class=\"ruby-identifier\">eql?</span>(<span class=\"ruby-identifier\">other</span>)   =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-keyword\">true</span> <span class=\"ruby-keyword\">or</span> <span class=\"ruby-keyword\">false</span>\n</pre>\n<p>Two structures are equal if they are the same object, or …\n"],["eql?","Time","Time.html#method-i-eql-3F","(p1)","<p>Return <code>true</code> if <em>time</em> and <em>other_time</em> are both\n<code>Time</code> objects with the same seconds and fractional seconds. …\n"],["equal?","Object","Object.html#method-i-equal-3F","(p1)","<p>Equality—At the <code>Object</code> level, <code>==</code> returns\n<code>true</code> only if <em>obj</em> and <em>other</em> are the same\nobject. Typically …\n"],["erf","Math","Math.html#method-c-erf","(p1)","<p>Calculates the error function of x.\n"],["erfc","Math","Math.html#method-c-erfc","(p1)","<p>Calculates the complementary error function of x.\n"],["errno","SystemCallError","SystemCallError.html#method-i-errno","()","<p>Return this SystemCallError’s error number.\n"],["escape","Regexp","Regexp.html#method-c-escape","(p1, p2 = v2)","<p>Escapes any characters that would have special meaning in a regular\nexpression. Returns a new escaped …\n"],["euid","Process","Process.html#method-c-euid","()","<p>Returns the effective user ID for this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">euid</span>   <span class=\"ruby-comment\">#=&gt; 501</span>\n</pre>\n"],["euid=","Process","Process.html#method-c-euid-3D","(p1)","<p>Sets the effective user ID for this process. Not available on all\nplatforms.\n"],["eval","Binding","Binding.html#method-i-eval","(p1, p2 = v2, p3 = v3)","<p>Evaluates the Ruby expression(s) in <em>string</em>, in the\n<em>binding</em>’s context.  If the optional <em>filename</em> and  …\n"],["eval","Kernel","Kernel.html#method-i-eval","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Evaluates the Ruby expression(s) in <em>string</em>. If <em>binding</em> is\ngiven, the evaluation is performed in its context. …\n"],["even?","Fixnum","Fixnum.html#method-i-even-3F","()","<p>Returns <code>true</code> if <em>fix</em> is an even number.\n"],["even?","Integer","Integer.html#method-i-even-3F","()","<p>Returns <code>true</code> if <em>int</em> is an even number.\n"],["exception","Exception","Exception.html#method-i-exception","(*args)","<p>With no argument, or if the argument is the same as the receiver, return\nthe receiver. Otherwise, create ...\n"],["exception","Exception","Exception.html#method-c-exception","(*args)","<p>With no argument, or if the argument is the same as the receiver, return\nthe receiver. Otherwise, create ...\n"],["exclude_end?","Range","Range.html#method-i-exclude_end-3F","()","<p>Returns <code>true</code> if <em>rng</em> excludes its end value.\n"],["exec","Kernel","Kernel.html#method-i-exec","(*args)","<p>Replaces the current process by running the given external\n<em>command</em>. If <code>exec</code> is given a single argument, …\n"],["exec","Process","Process.html#method-c-exec","(*args)","<p>Replaces the current process by running the given external\n<em>command</em>. If <code>exec</code> is given a single argument, …\n"],["executable?","File","File.html#method-c-executable-3F","(p1)","<p>Returns <code>true</code> if the named file is executable by the effective\nuser id of this process.\n"],["executable?","File::Stat","File/Stat.html#method-i-executable-3F","()","<p>Returns <code>true</code> if <em>stat</em> is executable or if the\noperating system doesn’t distinguish executable files from …\n"],["executable?","FileTest","FileTest.html#method-i-executable-3F","(p1)","<p>Returns <code>true</code> if the named file is executable by the effective\nuser id of this process.\n"],["executable_real?","File","File.html#method-c-executable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is executable by the real user\nid of this process.\n"],["executable_real?","File::Stat","File/Stat.html#method-i-executable_real-3F","()","<p>Same as <code>executable?</code>, but tests using the real owner of the\nprocess.\n"],["executable_real?","FileTest","FileTest.html#method-i-executable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is executable by the real user\nid of this process.\n"],["exist?","File","File.html#method-c-exist-3F","(p1)","<p>Return <code>true</code> if the named file exists.\n"],["exist?","FileTest","FileTest.html#method-i-exist-3F","(p1)","<p>Return <code>true</code> if the named file exists.\n"],["exists?","File","File.html#method-c-exists-3F","(p1)","<p>Return <code>true</code> if the named file exists.\n"],["exists?","FileTest","FileTest.html#method-i-exists-3F","(p1)","<p>Return <code>true</code> if the named file exists.\n"],["exit","Kernel","Kernel.html#method-i-exit","(p1 = v1)","<p>Initiates the termination of the Ruby script by raising the\n<code>SystemExit</code> exception. This exception may …\n"],["exit","Process","Process.html#method-c-exit","(p1 = v1)","<p>Initiates the termination of the Ruby script by raising the\n<code>SystemExit</code> exception. This exception may …\n"],["exit","Thread","Thread.html#method-c-exit","()","<p>Terminates the currently running thread and schedules another thread to be\nrun. If this thread is already …\n"],["exit","Thread","Thread.html#method-i-exit","()","<p>Terminates <em>thr</em> and schedules another thread to be run, returning\nthe terminated <code>Thread</code>.  If this is the …\n"],["exit!","Kernel","Kernel.html#method-i-exit-21","(p1 = v1)","<p>Exits the process immediately. No exit handlers are run. <em>fixnum</em> is\nreturned to the underlying system …\n"],["exit!","Process","Process.html#method-c-exit-21","(p1 = v1)","<p>Exits the process immediately. No exit handlers are run. <em>fixnum</em> is\nreturned to the underlying system …\n"],["exit!","Thread","Thread.html#method-i-exit-21","()","<p>Terminates <em>thr</em> without calling ensure clauses and schedules\nanother thread to be run, returning the terminated …\n"],["exit_value","LocalJumpError","LocalJumpError.html#method-i-exit_value","()","<p>call_seq:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">local_jump_error</span>.<span class=\"ruby-identifier\">exit_value</span>  =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-identifier\">obj</span>\n</pre>\n<p>Returns the exit value associated with this <code>LocalJumpError</code> …\n"],["exited?","Process::Status","Process/Status.html#method-i-exited-3F","()","<p>Returns <code>true</code> if <em>stat</em> exited normally (for example\nusing an <code>exit()</code> call or finishing the program).\n"],["exitstatus","Process::Status","Process/Status.html#method-i-exitstatus","()","<p>Returns the least significant eight bits of the return code of\n<em>stat</em>. Only available if <code>exited?</code> is <code>true</code>\n…\n"],["exp","Math","Math.html#method-c-exp","(p1)","<p>Returns e**x.\n"],["expand_path","File","File.html#method-c-expand_path","(p1, p2 = v2)","<p>Converts a pathname to an absolute pathname. Relative paths are referenced\nfrom the current working directory …\n"],["extend","Object","Object.html#method-i-extend","(*args)","<p>Adds to <em>obj</em> the instance methods from each module given as a\nparameter.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">Mod</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">hello</span>\n    <span class=\"ruby-string\">&quot;Hello ...\n</span></pre>\n"],["extend_object","Module","Module.html#method-i-extend_object","(p1)","<p>Extends the specified object by adding this module’s constants and methods\n(which are added as singleton …\n"],["extended","Module","Module.html#method-i-extended","(p1)","<p>Not documented\n"],["extname","File","File.html#method-c-extname","(p1)","<p>Returns the extension (the portion of file name in <em>path</em> after the\nperiod).\n\n<pre>File.extname(&quot;test.rb&quot;)    ...</pre>\n"],["fail","Kernel","Kernel.html#method-i-fail","(*args)","<p>With no arguments, raises the exception in <code>$!</code> or raises a\n<code>RuntimeError</code> if <code>$!</code> is <code>nil</code>. With a\nsingle <code>String</code> …\n"],["fcntl","IO","IO.html#method-i-fcntl","(p1, p2 = v2)","<p>Provides a mechanism for issuing low-level commands to control or query\nfile-oriented I/O streams. Arguments …\n"],["fdiv","Bignum","Bignum.html#method-i-fdiv","(p1)","<p>Returns the floating point result of dividing <em>big</em> by\n<em>numeric</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">-1234567890987654321</span>.<span class=\"ruby-identifier\">quo</span>(<span class=\"ruby-value\">13731</span>)      <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["fdiv","Fixnum","Fixnum.html#method-i-fdiv","(p1)","<p>Returns the floating point result of dividing <em>fix</em> by\n<em>numeric</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">654321</span>.<span class=\"ruby-identifier\">quo</span>(<span class=\"ruby-value\">13731</span>)      <span class=\"ruby-comment\">#=&gt; 47.6528293642124 ...</span>\n</pre>\n"],["fdiv","Numeric","Numeric.html#method-i-fdiv","(p1)","<p>Equivalent to <code>Numeric#/</code>, but overridden in subclasses.\n"],["fetch","Array","Array.html#method-i-fetch","(p1, p2 = v2)","<p>Tries to return the element at position <em>index</em>. If the index lies\noutside the array, the first form throws …\n"],["fetch","Hash","Hash.html#method-i-fetch","(p1, p2 = v2)","<p>Returns a value from the hash for the given key. If the key can’t be found,\nthere are several options: …\n"],["file?","File","File.html#method-c-file-3F","(p1)","<p>Returns <code>true</code> if the named file exists and is a regular file.\n"],["file?","File::Stat","File/Stat.html#method-i-file-3F","()","<p>Returns <code>true</code> if <em>stat</em> is a regular file (not a device\nfile, pipe, socket, etc.).\n\n<pre>File.stat(&quot;testfile&quot;).file? ...</pre>\n"],["file?","FileTest","FileTest.html#method-i-file-3F","(p1)","<p>Returns <code>true</code> if the named file exists and is a regular file.\n"],["fileno","IO","IO.html#method-i-fileno","()","<p>Returns an integer representing the numeric file descriptor for\n<em>ios</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">$stdin</span>.<span class=\"ruby-identifier\">fileno</span>    <span class=\"ruby-comment\">#=&gt; 0</span>\n<span class=\"ruby-identifier\">$stdout</span>.<span class=\"ruby-identifier\">fileno</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["fill","Array","Array.html#method-i-fill","(p1 = v1, p2 = v2)","<p>The first three forms set the selected elements of <em>self</em> (which may\nbe the entire array) to <em>obj</em>. A <em>start</em> …\n"],["finalizers","ObjectSpace","ObjectSpace.html#method-c-finalizers","()","<p>deprecated\n"],["find","Enumerable","Enumerable.html#method-i-find","(p1 = v1)","<p>Passes each entry in <em>enum</em> to <em>block</em>. Returns the first for\nwhich <em>block</em> is not <code>false</code>.  If no object matches, …\n"],["find_all","Enumerable","Enumerable.html#method-i-find_all","()","<p>Returns an array containing all elements of <em>enum</em> for which\n<em>block</em> is not <code>false</code> (see also\n<code>Enumerable#reject</code> …\n"],["find_index","Array","Array.html#method-i-find_index","(p1 = v1)","<p>Returns the index of the first object in <em>self</em> such that is\n<code>==</code> to <em>obj</em>. If a block is given instead of …\n"],["find_index","Enumerable","Enumerable.html#method-i-find_index","(p1)","<p>Compares each entry in <em>enum</em> with <em>value</em> or passes to\n<em>block</em>.  Returns the index for the first for which …\n"],["finite?","Float","Float.html#method-i-finite-3F","()","<p>Returns <code>true</code> if <em>flt</em> is a valid IEEE floating point\nnumber (it is not infinite, and <code>nan?</code> is <code>false</code>).\n"],["first","Array","Array.html#method-i-first","(*args)","<p>Returns the first element, or the first <code>n</code> elements, of the\narray. If the array is empty, the first form …\n"],["first","Enumerable","Enumerable.html#method-i-first","(p1 = v1)","<p>Returns the first element, or the first <code>n</code> elements, of the\nenumerable. If the enumerable is empty, the …\n"],["first","Range","Range.html#method-i-first","()","<p>Returns the first object in <em>rng</em>.\n"],["flatten","Array","Array.html#method-i-flatten","(p1 = v1)","<p>Returns a new array that is a one-dimensional flattening of this array\n(recursively). That is, for every …\n"],["flatten!","Array","Array.html#method-i-flatten-21","(p1 = v1)","<p>Flattens <em>self</em> in place. Returns <code>nil</code> if no\nmodifications were made (i.e., <em>array</em> contains no subarrays.) …\n"],["flock","File","File.html#method-i-flock","(p1)","<p>Locks or unlocks a file according to <em>locking_constant</em> (a logical\n<em>or</em> of the values in the table below). …\n"],["floor","Float","Float.html#method-i-floor","()","<p>Returns the largest integer less than or equal to <em>flt</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1.2</span>.<span class=\"ruby-identifier\">floor</span>      <span class=\"ruby-comment\">#=&gt; 1</span>\n<span class=\"ruby-value\">2.0</span>.<span class=\"ruby-identifier\">floor</span>      <span class=\"ruby-comment\">#=&gt; 2</span>\n(<span class=\"ruby-value\">-1.2</span>).<span class=\"ruby-identifier\">floor</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["floor","Integer","Integer.html#method-i-floor","()","<p>As <em>int</em> is already an <code>Integer</code>, all these methods\nsimply return the receiver.\n"],["floor","Numeric","Numeric.html#method-i-floor","()","<p>Returns the largest integer less than or equal to <em>num</em>.\n<code>Numeric</code> implements this by converting <em>anInteger</em> …\n"],["flush","IO","IO.html#method-i-flush","()","<p>Flushes any buffered data within <em>ios</em> to the underlying operating\nsystem (note that this is Ruby internal …\n"],["fnmatch","File","File.html#method-c-fnmatch","(p1, p2, p3 = v3)","<p>Returns true if <em>path</em> matches against <em>pattern</em> The pattern\nis not a regular expression; instead it follows …\n"],["fnmatch?","File","File.html#method-c-fnmatch-3F","(p1, p2, p3 = v3)","<p>Returns true if <em>path</em> matches against <em>pattern</em> The pattern\nis not a regular expression; instead it follows …\n"],["for_fd","IO","IO.html#method-c-for_fd","(*args)","<p>Synonym for <code>IO::new</code>.\n"],["foreach","Dir","Dir.html#method-c-foreach","(p1)","<p>Calls the block once for each entry in the named directory, passing the\nfilename of each entry as a parameter …\n"],["foreach","IO","IO.html#method-c-foreach","(p1, p2 = v2)","<p>Executes the block for every line in the named I/O port, where lines are\nseparated by <em>sep_string</em>.\n\n<pre>IO.foreach(&quot;testfile&quot;) ...</pre>\n"],["fork","Kernel","Kernel.html#method-i-fork","()","<p>Creates a subprocess. If a block is specified, that block is run in the\nsubprocess, and the subprocess …\n"],["fork","Process","Process.html#method-c-fork","()","<p>Creates a subprocess. If a block is specified, that block is run in the\nsubprocess, and the subprocess …\n"],["fork","Thread","Thread.html#method-c-fork","(*args)","<p>Basically the same as <code>Thread::new</code>. However, if class\n<code>Thread</code> is subclassed, then calling <code>start</code> in that\n…\n"],["format","Kernel","Kernel.html#method-i-format","(*args)","<p>Returns the string resulting from applying <em>format_string</em> to any\nadditional arguments. Within the format …\n"],["freeze","Module","Module.html#method-i-freeze","()","<p>Prevents further modifications to <em>mod</em>.\n"],["freeze","Object","Object.html#method-i-freeze","()","<p>Prevents further modifications to <em>obj</em>. A <code>TypeError</code>\nwill be raised if modification is attempted. There …\n"],["frexp","Math","Math.html#method-c-frexp","(p1)","<p>Returns a two-element array containing the normalized fraction (a\n<code>Float</code>) and exponent (a <code>Fixnum</code>) of  …\n"],["frozen?","Array","Array.html#method-i-frozen-3F","()","<p>Return <code>true</code> if this array is frozen (or temporarily frozen\nwhile being sorted).\n"],["frozen?","Object","Object.html#method-i-frozen-3F","()","<p>Returns the freeze status of <em>obj</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [ <span class=\"ruby-string\">&quot;a&quot;</span>, <span class=\"ruby-string\">&quot;b&quot;</span>, <span class=\"ruby-string\">&quot;c&quot;</span> ]\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">freeze</span>    <span class=\"ruby-comment\">#=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span>\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">frozen?</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["fsync","IO","IO.html#method-i-fsync","()","<p>Immediately writes all buffered data in <em>ios</em> to disk. Returns\n<code>nil</code> if the underlying operating system does …\n"],["ftype","File","File.html#method-c-ftype","(p1)","<p>Identifies the type of the named file; the return string is one of\n“<code>file</code>”, “<code>directory</code>”,\n“<code>characterSpecial</code> …\n"],["ftype","File::Stat","File/Stat.html#method-i-ftype","()","<p>Identifies the type of <em>stat</em>. The return string is one of:\n“<code>file</code>”, “<code>directory</code>”,\n“<code>characterSpecial</code> …\n"],["garbage_collect","GC","GC.html#method-i-garbage_collect","()","<p>Initiates garbage collection, unless manually disabled.\n"],["garbage_collect","ObjectSpace","ObjectSpace.html#method-c-garbage_collect","()","<p>Initiates garbage collection, unless manually disabled.\n"],["getbyte","IO","IO.html#method-i-getbyte","()","<p>Gets the next 8-bit byte (0..255) from <em>ios</em>. Returns\n<code>nil</code> if called at end of file.\n\n<pre>f = File.new(&quot;testfile&quot;) ...</pre>\n"],["getc","IO","IO.html#method-i-getc","()","<p>Gets the next 8-bit byte (0..255) from <em>ios</em>. Returns\n<code>nil</code> if called at end of file.\n\n<pre>f = File.new(&quot;testfile&quot;) ...</pre>\n"],["getc","Kernel","Kernel.html#method-i-getc","()","<p>obsolete\n"],["getegid","Process::Sys","Process/Sys.html#method-c-getegid","()","<p>Returns the effective group ID for this process. Not available on all\nplatforms.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">egid</span>   <span class=\"ruby-comment\">#=&gt; 500</span>\n</pre>\n"],["geteuid","Process::Sys","Process/Sys.html#method-c-geteuid","()","<p>Returns the effective user ID for this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">euid</span>   <span class=\"ruby-comment\">#=&gt; 501</span>\n</pre>\n"],["getgid","Process::Sys","Process/Sys.html#method-c-getgid","()","<p>Returns the (real) group ID for this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">gid</span>   <span class=\"ruby-comment\">#=&gt; 500</span>\n</pre>\n"],["getgm","Time","Time.html#method-i-getgm","()","<p>Returns a new <code>new_time</code> object representing <em>time</em> in\nUTC.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">local</span>(<span class=\"ruby-value\">2000</span>,<span class=\"ruby-value\">1</span>,<span class=\"ruby-value\">1</span>,<span class=\"ruby-value\">20</span>,<span class=\"ruby-value\">15</span>,<span class=\"ruby-value\">1</span>)   <span class=\"ruby-comment\">#=&gt; Sat Jan ...</span>\n</pre>\n"],["getlocal","Time","Time.html#method-i-getlocal","()","<p>Returns a new <code>new_time</code> object representing <em>time</em> in\nlocal time (using the local time zone in effect for …\n"],["getpgid","Process","Process.html#method-c-getpgid","(p1)","<p>Returns the process group ID for the given process id. Not available on all\nplatforms.\n\n<pre>Process.getpgid(Process.ppid()) ...</pre>\n"],["getpgrp","Process","Process.html#method-c-getpgrp","()","<p>Returns the process group ID for this process. Not available on all\nplatforms.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">getpgid</span>(<span class=\"ruby-value\">0</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["getpriority","Process","Process.html#method-c-getpriority","(p1, p2)","<p>Gets the scheduling priority for specified process, process group, or user.\n<em>kind</em> indicates the kind of …\n"],["getrlimit","Process","Process.html#method-c-getrlimit","(p1)","<p>Gets the resource limit of the process. <em>cur_limit</em> means current\n(soft) limit and <em>max_limit</em> means maximum …\n"],["gets","IO","IO.html#method-i-gets","(p1)","<p>Reads the next “line” from the I/O stream; lines are separated by\n<em>sep_string</em>. A separator of <code>nil</code> reads …\n"],["gets","Kernel","Kernel.html#method-i-gets","(*args)","<p>Returns (and assigns to <code>$_</code>) the next line from the list of\nfiles in <code>ARGV</code> (or <code>$*</code>), or from standard input …\n"],["getuid","Process::Sys","Process/Sys.html#method-c-getuid","()","<p>Returns the (real) user ID of this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">uid</span>   <span class=\"ruby-comment\">#=&gt; 501</span>\n</pre>\n"],["getutc","Time","Time.html#method-i-getutc","()","<p>Returns a new <code>new_time</code> object representing <em>time</em> in\nUTC.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">local</span>(<span class=\"ruby-value\">2000</span>,<span class=\"ruby-value\">1</span>,<span class=\"ruby-value\">1</span>,<span class=\"ruby-value\">20</span>,<span class=\"ruby-value\">15</span>,<span class=\"ruby-value\">1</span>)   <span class=\"ruby-comment\">#=&gt; Sat Jan ...</span>\n</pre>\n"],["getwd","Dir","Dir.html#method-c-getwd","()","<p>Returns the path to the current working directory of this process as a\nstring.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">chdir</span>(<span class=\"ruby-string\">&quot;/tmp&quot;</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["gid","File::Stat","File/Stat.html#method-i-gid","()","<p>Returns the numeric group id of the owner of <em>stat</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">gid</span>   <span class=\"ruby-comment\">#=&gt; 500</span>\n</pre>\n"],["gid","Process","Process.html#method-c-gid","()","<p>Returns the (real) group ID for this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">gid</span>   <span class=\"ruby-comment\">#=&gt; 500</span>\n</pre>\n"],["gid=","Process","Process.html#method-c-gid-3D","(p1)","<p>Sets the group ID for this process.\n"],["glob","Dir","Dir.html#method-c-glob","(p1, p2 = v2)","<p>Returns the filenames found by expanding <em>pattern</em> which is an\n<code>Array</code> of the patterns or the pattern <code>String</code> …\n"],["global_variables","Kernel","Kernel.html#method-i-global_variables","()","<p>Returns an array of the names of global variables.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">global_variables</span>.<span class=\"ruby-identifier\">grep</span> <span class=\"ruby-regexp\">/std/</span>   <span class=\"ruby-comment\">#=&gt; [&quot;$stderr&quot;, &quot;$stdout&quot;, ...</span>\n</pre>\n"],["gm","Time","Time.html#method-c-gm","(*args)","<p>Creates a time based on given values, interpreted as UTC (GMT). The year\nmust be specified. Other values …\n"],["gmt?","Time","Time.html#method-i-gmt-3F","()","<p>Returns <code>true</code> if <em>time</em> represents a time in UTC (GMT).\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>                        <span class=\"ruby-comment\">#=&gt; Wed Apr 09 ...</span>\n</pre>\n"],["gmt_offset","Time","Time.html#method-i-gmt_offset","()","<p>Returns the offset in seconds between the timezone of <em>time</em> and\nUTC.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">gm</span>(<span class=\"ruby-value\">2000</span>,<span class=\"ruby-value\">1</span>,<span class=\"ruby-value\">1</span>,<span class=\"ruby-value\">20</span>,<span class=\"ruby-value\">15</span>,<span class=\"ruby-value\">1</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["gmtime","Time","Time.html#method-i-gmtime","()","<p>Converts <em>time</em> to UTC (GMT), modifying the receiver.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>   <span class=\"ruby-comment\">#=&gt; Wed Apr 09 08:56:03 CDT 2003</span>\n<span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">gmt?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["gmtoff","Time","Time.html#method-i-gmtoff","()","<p>Returns the offset in seconds between the timezone of <em>time</em> and\nUTC.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">gm</span>(<span class=\"ruby-value\">2000</span>,<span class=\"ruby-value\">1</span>,<span class=\"ruby-value\">1</span>,<span class=\"ruby-value\">20</span>,<span class=\"ruby-value\">15</span>,<span class=\"ruby-value\">1</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["grant_privilege","Process::GID","Process/GID.html#method-c-grant_privilege","(p1)","<p>Set the effective group ID, and if possible, the saved group ID of the\nprocess to the given <em>integer</em>. …\n"],["grant_privilege","Process::UID","Process/UID.html#method-c-grant_privilege","(p1)","<p>Set the effective user ID, and if possible, the saved user ID of the\nprocess to the given <em>integer</em>. Returns …\n"],["grep","Enumerable","Enumerable.html#method-i-grep","(p1)","<p>Returns an array of every element in <em>enum</em> for which <code>Pattern\n=== element</code>. If the optional <em>block</em> is supplied, …\n"],["group","Thread","Thread.html#method-i-group","()","<p>Returns the <code>ThreadGroup</code> which contains <em>thr</em>, or nil if\nthe thread is not a member of any group.\n\n<pre>Thread.main.group ...</pre>\n"],["group_by","Enumerable","Enumerable.html#method-i-group_by","()","<p>Returns a hash, which keys are evaluated result from the block, and values\nare arrays of elements in …\n"],["groups","Process","Process.html#method-c-groups","()","<p>Get an <code>Array</code> of the gids of groups in the supplemental group\naccess list for this process.\n\n<pre>Process.groups ...</pre>\n"],["groups=","Process","Process.html#method-c-groups-3D","(p1)","<p>Set the supplemental group access list to the given <code>Array</code> of\ngroup IDs.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">groups</span>   <span class=\"ruby-comment\">#=&gt; [0, 1, 2, ...</span>\n</pre>\n"],["grpowned?","File","File.html#method-c-grpowned-3F","(p1)","<p>Returns <code>true</code> if the named file exists and the effective group\nid of the calling process is the owner …\n"],["grpowned?","File::Stat","File/Stat.html#method-i-grpowned-3F","()","<p>Returns true if the effective group id of the process is the same as the\ngroup id of <em>stat</em>. On Windows …\n"],["grpowned?","FileTest","FileTest.html#method-i-grpowned-3F","(p1)","<p>Returns <code>true</code> if the named file exists and the effective group\nid of the calling process is the owner …\n"],["gsub","Kernel","Kernel.html#method-i-gsub","(*args)","<p>Equivalent to <code>$_.gsub...</code>, except that <code>$_</code> receives\nthe modified result.\n\n<pre>$_ = &quot;quick brown fox&quot;\ngsub /[aeiou]/, ...</pre>\n"],["gsub","String","String.html#method-i-gsub","(*args)","<p>Returns a copy of <em>str</em> with <em>all</em> occurrences of\n<em>pattern</em> replaced with either <em>replacement</em> or the value of\n…\n"],["gsub!","Kernel","Kernel.html#method-i-gsub-21","(*args)","<p>Equivalent to <code>Kernel::gsub</code>, except <code>nil</code> is\nreturned if <code>$_</code> is not modified.\n\n<pre>$_ = &quot;quick brown fox&quot;\ngsub! ...</pre>\n"],["gsub!","String","String.html#method-i-gsub-21","(*args)","<p>Performs the substitutions of <code>String#gsub</code> in place, returning\n<em>str</em>, or <code>nil</code> if no substitutions were performed. …\n"],["has_key?","Hash","Hash.html#method-i-has_key-3F","(p1)","<p>Returns <code>true</code> if the given key is present in <em>hsh</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = { <span class=\"ruby-string\">&quot;a&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">100</span>, <span class=\"ruby-string\">&quot;b&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">200</span> }\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">has_key?</span>(<span class=\"ruby-string\">&quot;a&quot;</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["has_value?","Hash","Hash.html#method-i-has_value-3F","(p1)","<p>Returns <code>true</code> if the given value is present for some key in\n<em>hsh</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = { <span class=\"ruby-string\">&quot;a&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">100</span>, <span class=\"ruby-string\">&quot;b&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">200</span> }\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">has_value?</span>(<span class=\"ruby-value\">100</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["hash","Array","Array.html#method-i-hash","()","<p>Compute a hash-code for this array. Two arrays with the same content will\nhave the same hash code (and …\n"],["hash","Bignum","Bignum.html#method-i-hash","()","<p>Compute a hash based on the value of <em>big</em>.\n"],["hash","Float","Float.html#method-i-hash","()","<p>Returns a hash code for this float.\n"],["hash","Hash","Hash.html#method-i-hash","()","<p>Compute a hash-code for this array. Two arrays with the same content will\nhave the same hash code (and …\n"],["hash","Object","Object.html#method-i-hash","()","<p>Generates a <code>Fixnum</code> hash value for this object. This function\nmust have the property that <code>a.eql?(b)</code> implies …\n"],["hash","Range","Range.html#method-i-hash","()","<p>Generate a hash value such that two ranges with the same start and end\npoints, and the same value for …\n"],["hash","Regexp","Regexp.html#method-i-hash","()","<p>Produce a hash based on the text and options of this regular expression.\n"],["hash","String","String.html#method-i-hash","()","<p>Return a hash based on the string’s length and content.\n"],["hash","Struct","Struct.html#method-i-hash","()","<p>Return a hash value based on this struct’s contents.\n"],["hash","Time","Time.html#method-i-hash","()","<p>Return a hash code for this time object.\n"],["hex","String","String.html#method-i-hex","()","<p>Treats leading characters from <em>str</em> as a string of hexadecimal\ndigits (with an optional sign and an optional …\n"],["hour","Time","Time.html#method-i-hour","()","<p>Returns the hour of the day (0..23) for <em>time</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>   <span class=\"ruby-comment\">#=&gt; Wed Apr 09 08:56:03 CDT 2003</span>\n<span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">hour</span>  <span class=\"ruby-operator\">...</span>\n</pre>\n"],["hypot","Math","Math.html#method-c-hypot","(p1, p2)","<p>Returns sqrt(x**2 + y**2), the hypotenuse of a right-angled triangle with\nsides <em>x</em> and <em>y</em>.\n\n<pre>Math.hypot(3, ...</pre>\n"],["id","Object","Object.html#method-i-id","()","<p>Soon-to-be deprecated version of <code>Object#object_id</code>.\n"],["id2name","Fixnum","Fixnum.html#method-i-id2name","()","<p>Returns the name of the object whose symbol id is <em>fix</em>. If there is\nno symbol in the symbol table with …\n"],["id2name","Symbol","Symbol.html#method-i-id2name","()","<p>Returns the name or string corresponding to <em>sym</em>.\n\n<pre class=\"ruby\">:<span class=\"ruby-identifier\">fred</span>.<span class=\"ruby-identifier\">id2name</span>   <span class=\"ruby-comment\">#=&gt; &quot;fred&quot;</span>\n</pre>\n"],["identical?","File","File.html#method-c-identical-3F","(p1, p2)","<p>Returns <code>true</code> if the named files are identical.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&quot;a&quot;</span>, <span class=\"ruby-string\">&quot;w&quot;</span>) {}\n<span class=\"ruby-identifier\">p</span> <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">identical?</span>(<span class=\"ruby-string\">&quot;a&quot;</span>, <span class=\"ruby-string\">&quot;a&quot;</span>)      <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["identical?","FileTest","FileTest.html#method-i-identical-3F","(p1, p2)","<p>Returns <code>true</code> if the named files are identical.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&quot;a&quot;</span>, <span class=\"ruby-string\">&quot;w&quot;</span>) {}\n<span class=\"ruby-identifier\">p</span> <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">identical?</span>(<span class=\"ruby-string\">&quot;a&quot;</span>, <span class=\"ruby-string\">&quot;a&quot;</span>)      <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["include","Module","Module.html#method-i-include","(*args)","<p>Invokes <code>Module.append_features</code> on each parameter in turn.\n"],["include?","Array","Array.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if the given object is present in <em>self</em>\n(that is, if any object <code>==</code> <em>anObject</em>),\n<code>false</code> otherwise. …\n"],["include?","Enumerable","Enumerable.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if any member of <em>enum</em> equals\n<em>obj</em>. Equality is tested using <code>==</code>.\n\n<pre>IO.constants.include? &quot;SEEK_SET&quot; ...</pre>\n"],["include?","Hash","Hash.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if the given key is present in <em>hsh</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = { <span class=\"ruby-string\">&quot;a&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">100</span>, <span class=\"ruby-string\">&quot;b&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">200</span> }\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">has_key?</span>(<span class=\"ruby-string\">&quot;a&quot;</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["include?","Module","Module.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if <em>module</em> is included in <em>mod</em> or\none of <em>mod</em>’s ancestors.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">A</span>\n<span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">B</span>\n  <span class=\"ruby-identifier\">include</span> <span class=\"ruby-constant\">A</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["include?","Range","Range.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if <em>obj</em> is an element of <em>rng</em>,\n<code>false</code> otherwise. Conveniently, <code>===</code> is the\ncomparison operator …\n"],["include?","String","String.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if <em>str</em> contains the given string or\ncharacter.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;hello&quot;</span>.<span class=\"ruby-identifier\">include?</span> <span class=\"ruby-string\">&quot;lo&quot;</span>   <span class=\"ruby-comment\">#=&gt; true</span>\n<span class=\"ruby-string\">&quot;hello&quot;</span>.<span class=\"ruby-identifier\">include?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["included","Module","Module.html#method-i-included","(p1)","<p>Callback invoked whenever the receiver is included in another module or\nclass. This should be used in ...\n"],["included","Precision","Precision.html#method-c-included","(p1)","<p>call_seq:\n\n<pre>included</pre>\n<p>When the <code>Precision</code> module is mixed-in to a class, this\n<code>included</code> method is used to add …\n"],["included_modules","Module","Module.html#method-i-included_modules","()","<p>Returns the list of modules included in <em>mod</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">Mixin</span>\n<span class=\"ruby-keyword\">end</span>\n\n<span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">Outer</span>\n  <span class=\"ruby-identifier\">include</span> <span class=\"ruby-constant\">Mixin</span>\n<span class=\"ruby-keyword\">end</span>\n\n<span class=\"ruby-constant\">Mixin</span>.<span class=\"ruby-identifier\">included_modules</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["index","Array","Array.html#method-i-index","(p1 = v1)","<p>Returns the index of the first object in <em>self</em> such that is\n<code>==</code> to <em>obj</em>. If a block is given instead of …\n"],["index","Hash","Hash.html#method-i-index","(p1)","<p>Returns the key for a given value. If not found, returns <code>nil</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = { <span class=\"ruby-string\">&quot;a&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">100</span>, <span class=\"ruby-string\">&quot;b&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">200</span> }\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">index</span>(<span class=\"ruby-value\">200</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["index","String","String.html#method-i-index","(p1, p2 = v2)","<p>Returns the index of the first occurrence of the given <em>substring</em>,\ncharacter (<em>fixnum</em>), or pattern (<em>regexp</em> …\n"],["indexes","Array","Array.html#method-i-indexes","(*args)","<p>Deprecated; use <code>Array#values_at</code>.\n"],["indexes","Hash","Hash.html#method-i-indexes","(*args)","<p>Deprecated in favor of <code>Hash#select</code>.\n"],["indices","Array","Array.html#method-i-indices","(*args)","<p>Deprecated; use <code>Array#values_at</code>.\n"],["indices","Hash","Hash.html#method-i-indices","(*args)","<p>Deprecated in favor of <code>Hash#select</code>.\n"],["induced_from","Fixnum","Fixnum.html#method-c-induced_from","(p1)","<p>Convert <code>obj</code> to a Fixnum. Works with numeric parameters. Also\nworks with Symbols, but this is deprecated. …\n"],["induced_from","Float","Float.html#method-c-induced_from","(p1)","<p>Convert <code>obj</code> to a float.\n"],["induced_from","Integer","Integer.html#method-c-induced_from","(p1)","<p>Convert <code>obj</code> to an Integer.\n"],["infinite?","Float","Float.html#method-i-infinite-3F","()","<p>Returns <code>nil</code>, -1, or +1 depending on whether <em>flt</em> is\nfinite, -infinity, or +infinity.\n\n<pre>(0.0).infinite?   ...</pre>\n"],["inherited","Class","Class.html#method-i-inherited","(p1)","<p>Callback invoked whenever a subclass of the current class is created.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Foo</span>\n   <span class=\"ruby-keyword\">def</span> <span class=\"ruby-keyword\">self</span>.<span class=\"ruby-identifier\">inherited</span>(<span class=\"ruby-identifier\">subclass</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["initgroups","Process","Process.html#method-c-initgroups","(p1, p2)","<p>Initializes the supplemental group access list by reading the system group\ndatabase and using all groups …\n"],["initialize_copy","Array","Array.html#method-i-initialize_copy","(p1)","<p>Replaces the contents of <em>self</em> with the contents of\n<em>other_array</em>, truncating or expanding if necessary. …\n"],["initialize_copy","Hash","Hash.html#method-i-initialize_copy","(p1)","<p>Replaces the contents of <em>hsh</em> with the contents of\n<em>other_hash</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = { <span class=\"ruby-string\">&quot;a&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">100</span>, <span class=\"ruby-string\">&quot;b&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">200</span> }\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">replace</span>({ <span class=\"ruby-operator\">...</span>\n</pre>\n"],["initialize_copy","String","String.html#method-i-initialize_copy","(p1)","<p>Replaces the contents and taintedness of <em>str</em> with the\ncorresponding values in <em>other_str</em>.\n\n<pre>s = &quot;hello&quot;  ...</pre>\n"],["inject","Enumerable","Enumerable.html#method-i-inject","(p1 = v1, p2 = v2)","<p>Combines all elements of <em>enum</em> by applying a binary operation,\nspecified by a block or a symbol that names …\n"],["ino","File::Stat","File/Stat.html#method-i-ino","()","<p>Returns the inode number for <em>stat</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">ino</span>   <span class=\"ruby-comment\">#=&gt; 1083669</span>\n</pre>\n"],["insert","Array","Array.html#method-i-insert","(*args)","<p>Inserts the given values before the element with the given index (which may\nbe negative).\n\n<pre>a = %w{ a b ...</pre>\n"],["insert","String","String.html#method-i-insert","(p1, p2)","<p>Inserts <em>other_str</em> before the character at the given\n<em>index</em>, modifying <em>str</em>. Negative indices count from …\n"],["inspect","Array","Array.html#method-i-inspect","()","<p>Create a printable version of <em>array</em>.\n"],["inspect","Dir","Dir.html#method-i-inspect","()","<p>Return a string describing this Dir object.\n"],["inspect","Exception","Exception.html#method-i-inspect","()","<p>Return this exception’s class name an message\n"],["inspect","File::Stat","File/Stat.html#method-i-inspect","()","<p>Produce a nicely formatted description of <em>stat</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;/etc/passwd&quot;</span>).<span class=\"ruby-identifier\">inspect</span>\n   <span class=\"ruby-comment\">#=&gt; &quot;#&lt;File::Stat ...</span>\n</pre>\n"],["inspect","Hash","Hash.html#method-i-inspect","()","<p>Return the contents of this hash as a string.\n"],["inspect","IO","IO.html#method-i-inspect","()","<p>Return a string describing this IO object.\n"],["inspect","MatchData","MatchData.html#method-i-inspect","()","<p>Returns a printable version of <em>mtch</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">puts</span> <span class=\"ruby-regexp\">/.$/</span>.<span class=\"ruby-identifier\">match</span>(<span class=\"ruby-string\">&quot;foo&quot;</span>).<span class=\"ruby-identifier\">inspect</span>\n<span class=\"ruby-comment\">#=&gt; #&lt;MatchData &quot;o&quot;&gt;</span>\n\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-regexp\">/(.)(.)(.)/</span>.<span class=\"ruby-identifier\">match</span>(<span class=\"ruby-string\">&quot;foo&quot;</span>).<span class=\"ruby-identifier\">inspect</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["inspect","Method","Method.html#method-i-inspect","()","<p>Show the name of the underlying method.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;cat&quot;</span>.<span class=\"ruby-identifier\">method</span>(:<span class=\"ruby-identifier\">count</span>).<span class=\"ruby-identifier\">inspect</span>   <span class=\"ruby-comment\">#=&gt; &quot;#&lt;Method: String#count&gt;&quot;</span>\n</pre>\n"],["inspect","NilClass","NilClass.html#method-i-inspect","()","<p>Always returns the string “nil”.\n"],["inspect","Object","Object.html#method-i-inspect","()","<p>Returns a string containing a human-readable representation of\n<em>obj</em>. If not overridden, uses the <code>to_s</code> …\n"],["inspect","Process::Status","Process/Status.html#method-i-inspect","()","<p>Override the inspection method.\n"],["inspect","Range","Range.html#method-i-inspect","()","<p>Convert this range object to a printable form (using  <code>inspect</code>\nto convert the start and end objects). …\n"],["inspect","Regexp","Regexp.html#method-i-inspect","()","<p>Produce a nicely formatted string-version of <em>rxp</em>. Perhaps\nsurprisingly, <code>#inspect</code> actually produces the …\n"],["inspect","String","String.html#method-i-inspect","()","<p>Returns a printable version of <em>str</em>, with special characters\nescaped.\n\n<pre>str = &quot;hello&quot;\nstr[3] = 8\nstr.inspect ...</pre>\n"],["inspect","Struct","Struct.html#method-i-inspect","()","<p>Describe the contents of this struct in a string.\n"],["inspect","Symbol","Symbol.html#method-i-inspect","()","<p>Returns the representation of <em>sym</em> as a symbol literal.\n\n<pre class=\"ruby\">:<span class=\"ruby-identifier\">fred</span>.<span class=\"ruby-identifier\">inspect</span>   <span class=\"ruby-comment\">#=&gt; &quot;:fred&quot;</span>\n</pre>\n"],["inspect","Thread","Thread.html#method-i-inspect","()","<p>Dump the name, id, and status of <em>thr</em> to a string.\n"],["inspect","Time","Time.html#method-i-inspect","()","<p>Returns a string representing <em>time</em>. Equivalent to calling\n<code>Time#strftime</code> with a format string of “<code>%a</code> …\n"],["inspect","UnboundMethod","UnboundMethod.html#method-i-inspect","()","<p>Show the name of the underlying method.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;cat&quot;</span>.<span class=\"ruby-identifier\">method</span>(:<span class=\"ruby-identifier\">count</span>).<span class=\"ruby-identifier\">inspect</span>   <span class=\"ruby-comment\">#=&gt; &quot;#&lt;Method: String#count&gt;&quot;</span>\n</pre>\n"],["instance_eval","Object","Object.html#method-i-instance_eval","(*args)","<p>Evaluates a string containing Ruby source code, or the given block, within\nthe context of the receiver …\n"],["instance_exec","Object","Object.html#method-i-instance_exec","(*args)","<p>Executes the given block within the context of the receiver (<em>obj</em>).\nIn order to set the context, the variable …\n"],["instance_method","Module","Module.html#method-i-instance_method","(p1)","<p>Returns an <code>UnboundMethod</code> representing the given instance\nmethod in <em>mod</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Interpreter</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">do_a</span>() <span class=\"ruby-operator\">...</span>\n</pre>\n"],["instance_methods","Module","Module.html#method-i-instance_methods","(*args)","<p>Returns an array containing the names of public instance methods in the\nreceiver. For a module, these …\n"],["instance_of?","Object","Object.html#method-i-instance_of-3F","(p1)","<p>Returns <code>true</code> if <em>obj</em> is an instance of the given\nclass. See also <code>Object#kind_of?</code>.\n"],["instance_variable_defined?","Object","Object.html#method-i-instance_variable_defined-3F","(p1)","<p>Returns <code>true</code> if the given instance variable is defined in\n<em>obj</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Fred</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">initialize</span>(<span class=\"ruby-identifier\">p1</span>, <span class=\"ruby-identifier\">p2</span>)\n   <span class=\"ruby-operator\">...</span>\n</pre>\n"],["instance_variable_get","Object","Object.html#method-i-instance_variable_get","(p1)","<p>Returns the value of the given instance variable, or nil if the instance\nvariable is not set. The <code>@</code> part …\n"],["instance_variable_set","Object","Object.html#method-i-instance_variable_set","(p1, p2)","<p>Sets the instance variable names by <em>symbol</em> to <em>object</em>,\nthereby frustrating the efforts of the class’s …\n"],["instance_variables","Object","Object.html#method-i-instance_variables","()","<p>Returns an array of instance variable names for the receiver. Note that\nsimply defining an accessor does …\n"],["integer?","Integer","Integer.html#method-i-integer-3F","()","<p>Always returns <code>true</code>.\n"],["integer?","Numeric","Numeric.html#method-i-integer-3F","()","<p>Returns <code>true</code> if <em>num</em> is an <code>Integer</code>\n(including <code>Fixnum</code> and <code>Bignum</code>).\n"],["intern","String","String.html#method-i-intern","()","<p>Returns the <code>Symbol</code> corresponding to <em>str</em>, creating the\nsymbol if it did not previously exist. See <code>Symbol#id2name</code> …\n"],["invert","Hash","Hash.html#method-i-invert","()","<p>Returns a new hash created by using <em>hsh</em>’s values as keys, and the\nkeys as values.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = { <span class=\"ruby-string\">&quot;n&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">100</span>, <span class=\"ruby-string\">&quot;m&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ioctl","IO","IO.html#method-i-ioctl","(p1, p2 = v2)","<p>Provides a mechanism for issuing low-level commands to control or query I/O\ndevices. Arguments and results …\n"],["is_a?","Object","Object.html#method-i-is_a-3F","(p1)","<p>Returns <code>true</code> if <em>class</em> is the class of <em>obj</em>,\nor if <em>class</em> is one of the superclasses of <em>obj</em> or modules\nincluded …\n"],["isatty","IO","IO.html#method-i-isatty","()","<p>Returns <code>true</code> if <em>ios</em> is associated with a terminal\ndevice (tty), <code>false</code> otherwise.\n\n<pre>File.new(&quot;testfile&quot;).isatty ...</pre>\n"],["isdst","Time","Time.html#method-i-isdst","()","<p>Returns <code>true</code> if <em>time</em> occurs during Daylight Saving\nTime in its time zone.\n\n<pre>Time.local(2000, 7, 1).isdst ...</pre>\n"],["issetugid","Process::Sys","Process/Sys.html#method-c-issetugid","()","<p>Returns <code>true</code> if the process was created as a result of an\nexecve(2) system call which had either of the …\n"],["iterator?","Kernel","Kernel.html#method-i-iterator-3F","()","<p>Returns <code>true</code> if <code>yield</code> would execute a block in\nthe current context. The <code>iterator?</code> form is mildly deprecated.\n…\n"],["join","Array","Array.html#method-i-join","(p1 = v1)","<p>Returns a string created by converting each element of the array to a\nstring, separated by <em>sep</em>.\n\n<pre>[ &quot;a&quot;, ...</pre>\n"],["join","File","File.html#method-c-join","(*args)","<p>Returns a new string formed by joining the strings using\n<code>File::SEPARATOR</code>.\n\n<pre>File.join(&quot;usr&quot;, &quot;mail&quot;, &quot;gumby&quot;) ...</pre>\n"],["join","Thread","Thread.html#method-i-join","(p1 = v1)","<p>The calling thread will suspend execution and run <em>thr</em>. Does not\nreturn until <em>thr</em> exits or until <em>limit</em> …\n"],["kcode","Regexp","Regexp.html#method-i-kcode","()","<p>Returns the character set code for the regexp.\n"],["key?","Hash","Hash.html#method-i-key-3F","(p1)","<p>Returns <code>true</code> if the given key is present in <em>hsh</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = { <span class=\"ruby-string\">&quot;a&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">100</span>, <span class=\"ruby-string\">&quot;b&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">200</span> }\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">has_key?</span>(<span class=\"ruby-string\">&quot;a&quot;</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["key?","Thread","Thread.html#method-i-key-3F","(p1)","<p>Returns <code>true</code> if the given string (or symbol) exists as a\nthread-local variable.\n\n<pre>me = Thread.current\nme[:oliver] ...</pre>\n"],["keys","Hash","Hash.html#method-i-keys","()","<p>Returns a new array populated with the keys from this hash. See also\n<code>Hash#values</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = { <span class=\"ruby-string\">&quot;a&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">100</span>, <span class=\"ruby-string\">&quot;b&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["keys","Thread","Thread.html#method-i-keys","()","<p>Returns an an array of the names of the thread-local variables (as\nSymbols).\n\n<pre>thr = Thread.new do\n  Thread.current[:cat] ...</pre>\n"],["kill","Process","Process.html#method-c-kill","(*args)","<p>Sends the given signal to the specified process id(s), or to the current\nprocess if <em>pid</em> is zero. <em>signal</em> …\n"],["kill","Thread","Thread.html#method-i-kill","()","<p>Terminates <em>thr</em> and schedules another thread to be run, returning\nthe terminated <code>Thread</code>.  If this is the …\n"],["kill","Thread","Thread.html#method-c-kill","(p1)","<p>Causes the given <em>thread</em> to exit (see <code>Thread::exit</code>).\n\n<pre>count = 0\na = Thread.new { loop { count += 1 } }\nsleep(0.1) ...</pre>\n"],["kill!","Thread","Thread.html#method-i-kill-21","()","<p>Terminates <em>thr</em> without calling ensure clauses and schedules\nanother thread to be run, returning the terminated …\n"],["kind_of?","Object","Object.html#method-i-kind_of-3F","(p1)","<p>Returns <code>true</code> if <em>class</em> is the class of <em>obj</em>,\nor if <em>class</em> is one of the superclasses of <em>obj</em> or modules\nincluded …\n"],["lambda","Kernel","Kernel.html#method-i-lambda","()","<p>Equivalent to <code>Proc.new</code>, except the resulting Proc objects\ncheck the number of parameters passed when …\n"],["last","Array","Array.html#method-i-last","(*args)","<p>Returns the last element(s) of <em>self</em>. If the array is empty, the\nfirst form returns <code>nil</code>.\n\n<pre>[ &quot;w&quot;, &quot;x&quot;, &quot;y&quot;, ...</pre>\n"],["last","Range","Range.html#method-i-last","()","<p>Returns the object that defines the end of <em>rng</em>.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">10</span>).<span class=\"ruby-identifier\">end</span>    <span class=\"ruby-comment\">#=&gt; 10</span>\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">...</span><span class=\"ruby-value\">10</span>).<span class=\"ruby-identifier\">end</span>   <span class=\"ruby-comment\">#=&gt; 10</span>\n</pre>\n"],["last_match","Regexp","Regexp.html#method-c-last_match","(p1 = v1)","<p>The first form returns the <code>MatchData</code> object generated by the\nlast successful pattern match. Equivalent …\n"],["lchmod","File","File.html#method-c-lchmod","(p1, *args)","<p>Equivalent to <code>File::chmod</code>, but does not follow symbolic links\n(so it will change the permissions associated …\n"],["lchown","File","File.html#method-c-lchown","(p1, p2, *args)","<p>Equivalent to <code>File::chown</code>, but does not follow symbolic links\n(so it will change the owner associated …\n"],["ldexp","Math","Math.html#method-c-ldexp","(p1, p2)","<p>Returns the value of <em>flt</em>*(2**<em>int</em>).\n\n<pre>fraction, exponent = Math.frexp(1234)\nMath.ldexp(fraction, exponent) ...</pre>\n"],["length","Array","Array.html#method-i-length","()","<p>Returns the number of elements in <em>self</em>. May be zero.\n\n<pre class=\"ruby\">[ <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">4</span>, <span class=\"ruby-value\">5</span> ].<span class=\"ruby-identifier\">length</span>   <span class=\"ruby-comment\">#=&gt; 5</span>\n</pre>\n"],["length","Hash","Hash.html#method-i-length","()","<p>Returns the number of key-value pairs in the hash.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = { <span class=\"ruby-string\">&quot;d&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">100</span>, <span class=\"ruby-string\">&quot;a&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">200</span>, <span class=\"ruby-string\">&quot;v&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">300</span>, <span class=\"ruby-string\">&quot;e&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">400</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["length","MatchData","MatchData.html#method-i-length","()","<p>Returns the number of elements in the match array.\n\n<pre>m = /(.)(.)(\\d+)(\\d)/.match(&quot;THX1138.&quot;)\nm.length   ...</pre>\n"],["length","String","String.html#method-i-length","()","<p>Returns the length of <em>str</em>.\n"],["length","Struct","Struct.html#method-i-length","()","<p>Returns the number of instance variables.\n\n<pre>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new(&quot;Joe ...</pre>\n"],["lineno","IO","IO.html#method-i-lineno","()","<p>Returns the current line number in <em>ios</em>. The stream must be opened\nfor reading. <code>lineno</code> counts the number …\n"],["lineno=","IO","IO.html#method-i-lineno-3D","(p1)","<p>Manually sets the current line number to the given value. <code>$.</code>\nis updated only on the next read.\n\n<pre>f = File.new(&quot;testfile&quot;) ...</pre>\n"],["lines","IO","IO.html#method-i-lines","(*args)","<p>Returns an enumerator that gives each line in <em>ios</em>. The stream must\nbe opened for reading or an <code>IOError</code> …\n"],["lines","String","String.html#method-i-lines","(p1 = v1)","<p>Returns an enumerator that gives each line in the string.  If a block is\ngiven, it iterates over each ...\n"],["link","File","File.html#method-c-link","(p1, p2)","<p>Creates a new name for an existing file using a hard link. Will not\noverwrite <em>new_name</em> if it already …\n"],["list","Signal","Signal.html#method-c-list","()","<p>Returns a list of signal names mapped to the corresponding underlying\nsignal numbers.\n<p>Signal.list   #=&gt; …\n"],["list","Thread","Thread.html#method-c-list","()","<p>Returns an array of <code>Thread</code> objects for all threads that are\neither runnable or stopped.\n\n<pre>Thread.new { sleep(200) ...</pre>\n"],["list","ThreadGroup","ThreadGroup.html#method-i-list","()","<p>Returns an array of all existing <code>Thread</code> objects that belong to\nthis group.\n\n<pre>ThreadGroup::Default.list  ...</pre>\n"],["ljust","String","String.html#method-i-ljust","(*args)","<p>If <em>integer</em> is greater than the length of <em>str</em>, returns a\nnew <code>String</code> of length <em>integer</em> with <em>str</em> left\njustified …\n"],["load","Kernel","Kernel.html#method-i-load","(p1, p2 = v2)","<p>Loads and executes the Ruby program in the file <em>filename</em>. If the\nfilename does not resolve to an absolute …\n"],["load","Marshal","Marshal.html#method-c-load","(p1, p2 = v2)","<p>Returns the result of converting the serialized data in source into a Ruby\nobject (possibly with associated …\n"],["local","Time","Time.html#method-c-local","(*args)","<p>Same as <code>Time::gm</code>, but interprets the values in the local time\nzone.\n\n<pre>Time.local(2000,&quot;jan&quot;,1,20,15,1)  ...</pre>\n"],["local_variables","Kernel","Kernel.html#method-i-local_variables","()","<p>Returns the names of the current local variables.\n\n<pre>fred = 1\nfor i in 1..10\n   # ...\nend\nlocal_variables ...</pre>\n"],["localtime","Time","Time.html#method-i-localtime","()","<p>Converts <em>time</em> to local time (using the local time zone in effect\nfor this process) modifying the receiver. …\n"],["log","Math","Math.html#method-c-log","(p1)","<p>Returns the natural logarithm of <em>numeric</em>.\n"],["log10","Math","Math.html#method-c-log10","(p1)","<p>Returns the base 10 logarithm of <em>numeric</em>.\n"],["loop","Kernel","Kernel.html#method-i-loop","()","<p>Repeatedly executes the block.\n\n<pre>loop do\n  print &quot;Input: &quot;\n  line = gets\n  break if !line or line =~ /^qQ/ ...</pre>\n"],["lstat","File","File.html#method-i-lstat","()","<p>Same as <code>IO#stat</code>, but does not follow the last symbolic link.\nInstead, reports on the link itself.\n\n<pre>File.symlink(&quot;testfile&quot;, ...</pre>\n"],["lstat","File","File.html#method-c-lstat","(p1)","<p>Same as <code>File::stat</code>, but does not follow the last symbolic\nlink. Instead, reports on the link itself. …\n"],["lstrip","String","String.html#method-i-lstrip","()","<p>Returns a copy of <em>str</em> with leading whitespace removed. See also\n<code>String#rstrip</code> and <code>String#strip</code>.\n\n<pre>&quot;  hello ...</pre>\n"],["lstrip!","String","String.html#method-i-lstrip-21","()","<p>Removes leading whitespace from <em>str</em>, returning <code>nil</code> if\nno change was made. See also <code>String#rstrip!</code> and …\n"],["main","Thread","Thread.html#method-c-main","()","<p>Returns the main thread for the process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Thread</span>.<span class=\"ruby-identifier\">main</span>   <span class=\"ruby-comment\">#=&gt; #&lt;Thread:0x401bdf4c run&gt;</span>\n</pre>\n"],["map","Array","Array.html#method-i-map","()","<p>Invokes <em>block</em> once for each element of <em>self</em>. Creates a \nnew array containing the values returned by the …\n"],["map","Enumerable","Enumerable.html#method-i-map","()","<p>Returns a new array with the results of running <em>block</em> once for\nevery element in <em>enum</em>.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">collect</span> {<span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">i</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["map!","Array","Array.html#method-i-map-21","()","<p>Invokes the block once for each element of <em>self</em>, replacing the\nelement with the value returned by <em>block</em> …\n"],["marshal_dump","Time","Time.html#method-i-marshal_dump","()","<p>undocumented\n"],["marshal_load","Time","Time.html#method-i-marshal_load","(p1)","<p>undocumented\n"],["match","Regexp","Regexp.html#method-i-match","(p1)","<p>Returns a <code>MatchData</code> object describing the match, or\n<code>nil</code> if there was no match. This is equivalent to …\n"],["match","String","String.html#method-i-match","(p1)","<p>Converts <em>pattern</em> to a <code>Regexp</code> (if it isn’t already\none), then invokes its <code>match</code> method on <em>str</em>.\n\n<pre>'hello'.match('(.)\\1') ...</pre>\n"],["max","Enumerable","Enumerable.html#method-i-max","()","<p>Returns the object in <em>enum</em> with the maximum value. The first form\nassumes all objects implement <code>Comparable</code> …\n"],["max_by","Enumerable","Enumerable.html#method-i-max_by","()","<p>Returns the object in <em>enum</em> that gives the maximum value from the\ngiven block.\n\n<pre>a = %w(albatross dog horse) ...</pre>\n"],["maxgroups","Process","Process.html#method-c-maxgroups","()","<p>Returns the maximum number of gids allowed in the supplemental group access\nlist.\n\n<pre>Process.maxgroups   ...</pre>\n"],["maxgroups=","Process","Process.html#method-c-maxgroups-3D","(p1)","<p>Sets the maximum number of gids allowed in the supplemental group access\nlist.\n"],["mday","Time","Time.html#method-i-mday","()","<p>Returns the day of the month (1..n) for <em>time</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>   <span class=\"ruby-comment\">#=&gt; Wed Apr 09 08:56:03 CDT 2003</span>\n<span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">day</span>   <span class=\"ruby-operator\">...</span>\n</pre>\n"],["member?","Enumerable","Enumerable.html#method-i-member-3F","(p1)","<p>Returns <code>true</code> if any member of <em>enum</em> equals\n<em>obj</em>. Equality is tested using <code>==</code>.\n\n<pre>IO.constants.include? &quot;SEEK_SET&quot; ...</pre>\n"],["member?","Hash","Hash.html#method-i-member-3F","(p1)","<p>Returns <code>true</code> if the given key is present in <em>hsh</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = { <span class=\"ruby-string\">&quot;a&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">100</span>, <span class=\"ruby-string\">&quot;b&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">200</span> }\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">has_key?</span>(<span class=\"ruby-string\">&quot;a&quot;</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["member?","Range","Range.html#method-i-member-3F","(p1)","<p>Returns <code>true</code> if <em>obj</em> is an element of <em>rng</em>,\n<code>false</code> otherwise. Conveniently, <code>===</code> is the\ncomparison operator …\n"],["members","Struct","Struct.html#method-i-members","()","<p>Returns an array of strings representing the names of the instance\nvariables.\n\n<pre>Customer = Struct.new(:name, ...</pre>\n"],["merge","Hash","Hash.html#method-i-merge","(p1)","<p>Returns a new hash containing the contents of <em>other_hash</em> and the\ncontents of <em>hsh</em>, overwriting entries …\n"],["merge!","Hash","Hash.html#method-i-merge-21","(p1)","<p>Adds the contents of <em>other_hash</em> to <em>hsh</em>.  If no block is\nspecified entries with duplicate keys are overwritten …\n"],["message","Exception","Exception.html#method-i-message","()","<p>Returns the result of invoking <code>exception.to_s</code>. Normally this\nreturns the exception’s message or name. …\n"],["method","Object","Object.html#method-i-method","(p1)","<p>Looks up the named method as a receiver in <em>obj</em>, returning a\n<code>Method</code> object (or raising <code>NameError</code>). The …\n"],["method_added","Module","Module.html#method-i-method_added","(p1)","<p>Not documented\n"],["method_defined?","Module","Module.html#method-i-method_defined-3F","(p1)","<p>Returns <code>true</code> if the named method is defined by <em>mod</em>\n(or its included modules and, if <em>mod</em> is a class, its …\n"],["method_missing","Kernel","Kernel.html#method-i-method_missing","(*args)","<p>Invoked by Ruby when <em>obj</em> is sent a message it cannot handle.\n<em>symbol</em> is the symbol for the method called, …\n"],["method_removed","Module","Module.html#method-i-method_removed","(p1)","<p>Not documented\n"],["method_undefined","Module","Module.html#method-i-method_undefined","(p1)","<p>Not documented\n"],["methods","Object","Object.html#method-i-methods","(p1)","<p>Returns a list of the names of methods publicly accessible in <em>obj</em>.\nThis will include all the methods …\n"],["min","Enumerable","Enumerable.html#method-i-min","()","<p>Returns the object in <em>enum</em> with the minimum value. The first form\nassumes all objects implement <code>Comparable</code> …\n"],["min","Time","Time.html#method-i-min","()","<p>Returns the minute of the hour (0..59) for <em>time</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>   <span class=\"ruby-comment\">#=&gt; Wed Apr 09 08:56:03 CDT 2003</span>\n<span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">min</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["min_by","Enumerable","Enumerable.html#method-i-min_by","()","<p>Returns the object in <em>enum</em> that gives the minimum value from the\ngiven block.\n\n<pre>a = %w(albatross dog horse) ...</pre>\n"],["minmax","Enumerable","Enumerable.html#method-i-minmax","()","<p>Returns two elements array which contains the minimum and the maximum value\nin the enumerable.  The first …\n"],["minmax_by","Enumerable","Enumerable.html#method-i-minmax_by","()","<p>Returns two elements array array containing the objects in <em>enum</em>\nthat gives the minimum and maximum values …\n"],["mkdir","Dir","Dir.html#method-c-mkdir","(p1, p2 = v2)","<p>Makes a new directory named by <em>string</em>, with permissions specified\nby the optional parameter <em>anInteger</em> …\n"],["mktime","Time","Time.html#method-c-mktime","(*args)","<p>Same as <code>Time::gm</code>, but interprets the values in the local time\nzone.\n\n<pre>Time.local(2000,&quot;jan&quot;,1,20,15,1)  ...</pre>\n"],["mode","File::Stat","File/Stat.html#method-i-mode","()","<p>Returns an integer representing the permission bits of <em>stat</em>. The\nmeaning of the bits is platform dependent; …\n"],["module_eval","Module","Module.html#method-i-module_eval","(*args)","<p>Evaluates the string or block in the context of <em>mod</em>. This can be\nused to add methods to a class. <code>module_eval</code> …\n"],["module_exec","Module","Module.html#method-i-module_exec","(*args)","<p>Evaluates the given block in the context of the class/module. The method\ndefined in the block will belong …\n"],["module_function","Module","Module.html#method-i-module_function","(*args)","<p>Creates module functions for the named methods. These functions may be\ncalled with the module as a receiver, …\n"],["modulo","Bignum","Bignum.html#method-i-modulo","(p1)","<p>Returns big modulo other. See Numeric.divmod for more information.\n"],["modulo","Fixnum","Fixnum.html#method-i-modulo","(p1)","<p>Returns <code>fix</code> modulo <code>other</code>. See\n<code>Numeric.divmod</code> for more information.\n"],["modulo","Float","Float.html#method-i-modulo","(p1)","<p>Return the modulo after division of <code>flt</code> by <code>other</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">6543.21</span>.<span class=\"ruby-identifier\">modulo</span>(<span class=\"ruby-value\">137</span>)      <span class=\"ruby-comment\">#=&gt; 104.21</span>\n<span class=\"ruby-value\">6543.21</span>.<span class=\"ruby-identifier\">modulo</span>(<span class=\"ruby-value\">137.24</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["modulo","Numeric","Numeric.html#method-i-modulo","(p1)","<p>Equivalent to <em>num.divmod(aNumeric)</em>.\n"],["mon","Time","Time.html#method-i-mon","()","<p>Returns the month of the year (1..12) for <em>time</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>   <span class=\"ruby-comment\">#=&gt; Wed Apr 09 08:56:03 CDT 2003</span>\n<span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">mon</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["month","Time","Time.html#method-i-month","()","<p>Returns the month of the year (1..12) for <em>time</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>   <span class=\"ruby-comment\">#=&gt; Wed Apr 09 08:56:03 CDT 2003</span>\n<span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">mon</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["mtime","File","File.html#method-i-mtime","()","<p>Returns the modification time for <em>file</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">mtime</span>   <span class=\"ruby-comment\">#=&gt; Wed Apr 09 08:53:14 CDT 2003</span>\n</pre>\n"],["mtime","File","File.html#method-c-mtime","(p1)","<p>Returns the modification time for the named file as a Time object.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">mtime</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>)   <span class=\"ruby-comment\">#=&gt; Tue Apr ...</span>\n</pre>\n"],["mtime","File::Stat","File/Stat.html#method-i-mtime","()","<p>Returns the modification time of <em>stat</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">mtime</span>   <span class=\"ruby-comment\">#=&gt; Wed Apr 09 08:53:14 CDT 2003</span>\n</pre>\n"],["name","Method","Method.html#method-i-name","()","<p>Returns the name of the method.\n"],["name","Module","Module.html#method-i-name","()","<p>Returns the name of the module <em>mod</em>.\n"],["name","NameError","NameError.html#method-i-name","()","<p>Return the name associated with this NameError exception.\n"],["name","UnboundMethod","UnboundMethod.html#method-i-name","()","<p>Returns the name of the method.\n"],["nan?","Float","Float.html#method-i-nan-3F","()","<p>Returns <code>true</code> if <em>flt</em> is an invalid IEEE floating point\nnumber.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = <span class=\"ruby-value\">-1.0</span>      <span class=\"ruby-comment\">#=&gt; -1.0</span>\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">nan?</span>        <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["nesting","Module","Module.html#method-c-nesting","()","<p>Returns the list of <code>Modules</code> nested at the point of call.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">M1</span>\n  <span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">M2</span>\n    <span class=\"ruby-identifier\">$a</span> = <span class=\"ruby-constant\">Module</span>.<span class=\"ruby-identifier\">nesting</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["new","Array","Array.html#method-c-new","(p1 = v1, p2 = v2)","<p>Returns a new array. In the first form, the new array is empty. In the\nsecond it is created with <em>size</em> …\n"],["new","Class","Class.html#method-i-new","(*args)","<p>Calls <code>allocate</code> to create a new object of <em>class</em>’s\nclass, then invokes that object’s <code>initialize</code> method, …\n"],["new","Class","Class.html#method-c-new","(p1 = v1)","<p>Creates a new anonymous (unnamed) class with the given superclass (or\n<code>Object</code> if no parameter is given). …\n"],["new","Dir","Dir.html#method-c-new","(p1)","<p>Returns a new directory object for the named directory.\n"],["new","Enumerable::Enumerator","Enumerable/Enumerator.html#method-c-new","(*args)","<p>Creates a new Enumerable::Enumerator object, which is to be used as an\nEnumerable object using the given …\n"],["new","Exception","Exception.html#method-c-new","(p1 = v1)","<p>Construct a new Exception object, optionally passing in  a message.\n"],["new","File","File.html#method-c-new","(*args)","<p>Opens the file named by <em>filename</em> according to <em>mode</em>\n(default is “r”) and returns a new <code>File</code> object. …\n"],["new","File::Stat","File/Stat.html#method-c-new","(p1)","<p>Create a File::Stat object for the given file name (raising an exception if\nthe file doesn’t exist). …\n"],["new","Hash","Hash.html#method-c-new","(p1 = v1)","<p>Returns a new, empty hash. If this hash is subsequently accessed by a key\nthat doesn’t correspond to …\n"],["new","IO","IO.html#method-c-new","(*args)","<p>Returns a new <code>IO</code> object (a stream) for the given integer file\ndescriptor and mode string. See also <code>IO#fileno</code> …\n"],["new","Interrupt","Interrupt.html#method-c-new","(p1 = v1)",""],["new","Module","Module.html#method-c-new","()","<p>Creates a new anonymous module. If a block is given, it is passed the\nmodule object, and the block is …\n"],["new","NameError","NameError.html#method-c-new","(*args)","<p>Construct a new NameError exception. If given the <em>name</em> parameter\nmay subsequently be examined using the …\n"],["new","NoMethodError","NoMethodError.html#method-c-new","(*args)","<p>Construct a NoMethodError exception for a method of the given name called\nwith the given arguments.  …\n"],["new","Object","Object.html#method-c-new","()","<p>Not documented\n"],["new","Proc","Proc.html#method-c-new","(*args)","<p>Creates a new <code>Proc</code> object, bound to the current context.\n<code>Proc::new</code> may be called without a block only …\n"],["new","Range","Range.html#method-c-new","(p1, p2, p3 = v3)","<p>Constructs a range using the given <em>start</em> and <em>end</em>. If the\nthird parameter is omitted or is <code>false</code>, the …\n"],["new","Regexp","Regexp.html#method-c-new","(*args)","<p>Constructs a new regular expression from <em>pattern</em>, which can be\neither a <code>String</code> or a <code>Regexp</code> (in which …\n"],["new","SignalException","SignalException.html#method-c-new","(*args)","<p>Construct a new SignalException object.  <code>sig</code> should be a known\nsignal name, or a signal number.\n"],["new","String","String.html#method-c-new","(p1 = v1)","<p>Returns a new string object containing a copy of <em>str</em>.\n"],["new","Struct","Struct.html#method-c-new","(p1, *args)","<p>Creates a new class, named by <em>aString</em>, containing accessor methods\nfor the given symbols. If the name …\n"],["new","SystemCallError","SystemCallError.html#method-c-new","(p1, p2 = v2)","<p>If <em>errno</em> corresponds to a known system error code, constructs the\nappropriate <code>Errno</code> class for that error, …\n"],["new","SystemExit","SystemExit.html#method-c-new","(*args)","<p>Create a new <code>SystemExit</code> exception with the given status.\n"],["new","Thread","Thread.html#method-c-new","(*args)","<p>Creates and runs a new thread to execute the instructions given in\n<em>block</em>. Any arguments passed to <code>Thread::new</code> …\n"],["new","Time","Time.html#method-c-new","()","<p>Synonym for <code>Time.new</code>. Returns a <code>Time</code> object\ninitialized tot he current system time.\n<p>Returns a <code>Time</code> object …\n"],["next","Enumerable::Enumerator","Enumerable/Enumerator.html#method-i-next","()","<p>Returns the next object in the enumerator, and move the internal position\nforward.  When the position …\n"],["next","Integer","Integer.html#method-i-next","()","<p>Returns the <code>Integer</code> equal to <em>int</em> + 1.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">next</span>      <span class=\"ruby-comment\">#=&gt; 2</span>\n(<span class=\"ruby-value\">-1</span>).<span class=\"ruby-identifier\">next</span>   <span class=\"ruby-comment\">#=&gt; 0</span>\n</pre>\n"],["next","String","String.html#method-i-next","()","<p>Returns the successor to <em>str</em>. The successor is calculated by\nincrementing characters starting from the …\n"],["next!","String","String.html#method-i-next-21","()","<p>Equivalent to <code>String#succ</code>, but modifies the receiver in place.\n"],["nil?","NilClass","NilClass.html#method-i-nil-3F","()","<p>call_seq:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">nil?</span>               =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-keyword\">true</span>\n</pre>\n<p>Only the object <em>nil</em> responds <code>true</code> to\n<code>nil?</code>.\n"],["nil?","Object","Object.html#method-i-nil-3F","()","<p>call_seq:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">nil?</span>               =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-keyword\">true</span>\n<span class=\"ruby-operator\">&lt;</span><span class=\"ruby-identifier\">anything_else</span><span class=\"ruby-operator\">&gt;</span>.<span class=\"ruby-identifier\">nil?</span>   =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-keyword\">false</span>\n</pre>\n<p>Only the object <em>nil</em> responds  …\n"],["nitems","Array","Array.html#method-i-nitems","()","<p>Returns the number of non-<code>nil</code> elements in <em>self</em>.\n<p>May be zero.\n\n<pre class=\"ruby\">[ <span class=\"ruby-value\">1</span>, <span class=\"ruby-keyword\">nil</span>, <span class=\"ruby-value\">3</span>, <span class=\"ruby-keyword\">nil</span>, <span class=\"ruby-value\">5</span> ].<span class=\"ruby-identifier\">nitems</span>   <span class=\"ruby-comment\">#=&gt; 3</span>\n</pre>\n"],["nlink","File::Stat","File/Stat.html#method-i-nlink","()","<p>Returns the number of hard links to <em>stat</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">nlink</span>             <span class=\"ruby-comment\">#=&gt; 1</span>\n<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">link</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["none?","Enumerable","Enumerable.html#method-i-none-3F","()","<p>Passes each element of the collection to the given block. The method\nreturns <code>true</code> if the block never …\n"],["nonzero?","Numeric","Numeric.html#method-i-nonzero-3F","()","<p>Returns <em>num</em> if <em>num</em> is not zero, <code>nil</code>\notherwise. This behavior is useful when chaining comparisons:\n\n<pre>a = ...</pre>\n"],["now","Time","Time.html#method-c-now","(*args)","<p>Synonym for <code>Time.new</code>. Returns a <code>Time</code> object\ninitialized tot he current system time.\n<p>Returns a <code>Time</code> object ...\n"],["object_id","Object","Object.html#method-i-object_id","()","<p>Returns an integer identifier for <em>obj</em>. The same number will be\nreturned on all calls to <code>id</code> for a given ...\n"],["oct","String","String.html#method-i-oct","()","<p>Treats leading characters of <em>str</em> as a string of octal digits (with\nan optional sign) and returns the …\n"],["odd?","Fixnum","Fixnum.html#method-i-odd-3F","()","<p>Returns <code>true</code> if <em>fix</em> is an odd number.\n"],["odd?","Integer","Integer.html#method-i-odd-3F","()","<p>Returns <code>true</code> if <em>int</em> is an odd number.\n"],["offset","MatchData","MatchData.html#method-i-offset","(p1)","<p>Returns a two-element array containing the beginning and ending offsets of\nthe <em>n</em>th match.\n\n<pre>m = /(.)(.)(\\d+)(\\d)/.match(&quot;THX1138.&quot;) ...</pre>\n"],["one?","Enumerable","Enumerable.html#method-i-one-3F","()","<p>Passes each element of the collection to the given block. The method\nreturns <code>true</code> if the block returns …\n"],["open","Dir","Dir.html#method-c-open","(p1)","<p>With no block, <code>open</code> is a synonym for <code>Dir::new</code>. If\na block is present, it is passed <em>aDir</em> as a parameter. …\n"],["open","IO","IO.html#method-c-open","(*args)","<p>With no associated block, <code>open</code> is a synonym for\n<code>IO::new</code>. If the optional code block is given, it will …\n"],["open","Kernel","Kernel.html#method-i-open","(*args)","<p>Creates an <code>IO</code> object connected to the given stream, file, or\nsubprocess.\n<p>If <em>path</em> does not start with a …\n"],["options","Regexp","Regexp.html#method-i-options","()","<p>Returns the set of bits corresponding to the options used when creating\nthis Regexp (see <code>Regexp::new</code> …\n"],["ord","Integer","Integer.html#method-i-ord","()","<p>Returns the int itself.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">?a</span>.<span class=\"ruby-identifier\">ord</span>    <span class=\"ruby-comment\">#=&gt; 97</span>\n</pre>\n<p>This method is intended for compatibility to character constant …\n"],["owned?","File","File.html#method-c-owned-3F","(p1)","<p>Returns <code>true</code> if the named file exists and the effective used\nid of the calling process is the owner of …\n"],["owned?","File::Stat","File/Stat.html#method-i-owned-3F","()","<p>Returns <code>true</code> if the effective user id of the process is the\nsame as the owner of <em>stat</em>.\n\n<pre>File.stat(&quot;testfile&quot;).owned? ...</pre>\n"],["owned?","FileTest","FileTest.html#method-i-owned-3F","(p1)","<p>Returns <code>true</code> if the named file exists and the effective used\nid of the calling process is the owner of …\n"],["owner","Method","Method.html#method-i-owner","()","<p>Returns the class or module that defines the method.\n"],["owner","UnboundMethod","UnboundMethod.html#method-i-owner","()","<p>Returns the class or module that defines the method.\n"],["p","Kernel","Kernel.html#method-i-p","(*args)","<p>For each object, directly writes <em>obj</em>.<code>inspect</code> followed\nby the current output record separator to the program’s …\n"],["pack","Array","Array.html#method-i-pack","(p1)","<p>Packs the contents of <em>arr</em> into a binary sequence according to the\ndirectives in <em>aTemplateString</em> (see …\n"],["partition","Enumerable","Enumerable.html#method-i-partition","()","<p>Returns two arrays, the first containing the elements of <em>enum</em> for\nwhich the block evaluates to true, …\n"],["partition","String","String.html#method-i-partition","(p1)","<p>Searches the string for <em>sep</em> and returns the part before it, the\n<em>sep</em>, and the part after it.  If <em>sep</em> is …\n"],["pass","Thread","Thread.html#method-c-pass","()","<p>Invokes the thread scheduler to pass execution to another thread.\n\n<pre>a = Thread.new { print &quot;a&quot;; Thread.pass; ...</pre>\n"],["path","Dir","Dir.html#method-i-path","()","<p>Returns the path parameter passed to <em>dir</em>’s constructor.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;..&quot;</span>)\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">path</span>   <span class=\"ruby-comment\">#=&gt; &quot;..&quot;</span>\n</pre>\n"],["path","File","File.html#method-i-path","()","<p>Returns the pathname used to create <em>file</em> as a string. Does not\nnormalize the name.\n\n<pre>File.new(&quot;testfile&quot;).path ...</pre>\n"],["permutation","Array","Array.html#method-i-permutation","(p1 = v1)","<p>When invoked with a block, yield all permutations of length <em>n</em> of\nthe elements of <em>ary</em>, then return the …\n"],["pid","IO","IO.html#method-i-pid","()","<p>Returns the process ID of a child process associated with <em>ios</em>.\nThis will be set by <code>IO::popen</code>.\n\n<pre>pipe = IO.popen(&quot;-&quot;) ...</pre>\n"],["pid","Process","Process.html#method-c-pid","()","<p>Returns the process id of this process. Not available on all platforms.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">pid</span>   <span class=\"ruby-comment\">#=&gt; 27415</span>\n</pre>\n"],["pid","Process::Status","Process/Status.html#method-i-pid","()","<p>Returns the process ID that this status object represents.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">fork</span> { <span class=\"ruby-identifier\">exit</span> }   <span class=\"ruby-comment\">#=&gt; 26569</span>\n<span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">wait</span>    <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["pipe","IO","IO.html#method-c-pipe","()","<p>Creates a pair of pipe endpoints (connected to each other) and returns them\nas a two-element array of …\n"],["pipe?","File","File.html#method-c-pipe-3F","(p1)","<p>Returns <code>true</code> if the named file is a pipe.\n"],["pipe?","File::Stat","File/Stat.html#method-i-pipe-3F","()","<p>Returns <code>true</code> if the operating system supports pipes and\n<em>stat</em> is a pipe; <code>false</code> otherwise.\n"],["pipe?","FileTest","FileTest.html#method-i-pipe-3F","(p1)","<p>Returns <code>true</code> if the named file is a pipe.\n"],["pop","Array","Array.html#method-i-pop","(*args)","<p>Removes the last element from <em>self</em> and returns it, or\n<code>nil</code> if the array is empty.\n<p>If a number <em>n</em> is given, …\n"],["popen","IO","IO.html#method-c-popen","(p1, p2 = v2)","<p>Runs the specified command string as a subprocess; the subprocess’s\nstandard input and output will be …\n"],["pos","Dir","Dir.html#method-i-pos","()","<p>Returns the current position in <em>dir</em>. See also\n<code>Dir#seek</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testdir&quot;</span>)\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">tell</span>   <span class=\"ruby-comment\">#=&gt; 0</span>\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">read</span>  <span class=\"ruby-operator\">...</span>\n</pre>\n"],["pos","IO","IO.html#method-i-pos","()","<p>Returns the current offset (in bytes) of <em>ios</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>)\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">pos</span>    <span class=\"ruby-comment\">#=&gt; 0</span>\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">gets</span>   <span class=\"ruby-comment\">#=&gt; &quot;This ...</span>\n</pre>\n"],["pos=","Dir","Dir.html#method-i-pos-3D","(p1)","<p>Synonym for <code>Dir#seek</code>, but returns the position parameter.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testdir&quot;</span>)   <span class=\"ruby-comment\">#=&gt; #&lt;Dir:0x401b3c40&gt; ...</span>\n</pre>\n"],["pos=","IO","IO.html#method-i-pos-3D","(p1)","<p>Seeks to the given position (in bytes) in <em>ios</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>)\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">pos</span> = <span class=\"ruby-value\">17</span>\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">gets</span>   <span class=\"ruby-comment\">#=&gt; &quot;This ...</span>\n</pre>\n"],["post_match","MatchData","MatchData.html#method-i-post_match","()","<p>Returns the portion of the original string after the current match.\nEquivalent to the special variable …\n"],["ppid","Process","Process.html#method-c-ppid","()","<p>Returns the process id of the parent of this process. Always returns 0 on\nNT. Not available on all platforms. …\n"],["pre_match","MatchData","MatchData.html#method-i-pre_match","()","<p>Returns the portion of the original string before the current match.\nEquivalent to the special variable …\n"],["prec","Precision","Precision.html#method-i-prec","(p1)","<p>Converts <em>self</em> into an instance of <em>klass</em>. By default,\n<code>prec</code> invokes\n\n<pre>klass.induced_from(num)</pre>\n<p>and returns …\n"],["prec_f","Precision","Precision.html#method-i-prec_f","()","<p>Returns a <code>Float</code> converted from <em>num</em>. It is equivalent \nto <code>prec(Float)</code>.\n"],["prec_i","Precision","Precision.html#method-i-prec_i","()","<p>Returns an <code>Integer</code> converted from <em>num</em>. It is\nequivalent  to <code>prec(Integer)</code>.\n"],["pred","Integer","Integer.html#method-i-pred","()","<p>Returns the <code>Integer</code> equal to <em>int</em> - 1.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">pred</span>      <span class=\"ruby-comment\">#=&gt; 0</span>\n(<span class=\"ruby-value\">-1</span>).<span class=\"ruby-identifier\">pred</span>   <span class=\"ruby-comment\">#=&gt; -2</span>\n</pre>\n"],["print","IO","IO.html#method-i-print","(*args)","<p>Writes the given object(s) to <em>ios</em>. The stream must be opened for\nwriting. If the output record separator …\n"],["print","Kernel","Kernel.html#method-i-print","(*args)","<p>Prints each object in turn to <code>$stdout</code>. If the output field\nseparator (<code>$,</code>) is not <code>nil</code>, its contents will …\n"],["printf","IO","IO.html#method-i-printf","(*args)","<p>Formats and writes to <em>ios</em>, converting parameters under control of\nthe format string. See <code>Kernel#sprintf</code> …\n"],["printf","Kernel","Kernel.html#method-i-printf","(*args)","<p>Equivalent to:\n\n<pre>io.write(sprintf(string, obj, ...)</pre>\n<p>or\n"],["priority","Thread","Thread.html#method-i-priority","()","<p>Returns the priority of <em>thr</em>. Default is inherited from the current\nthread which creating the new thread, …\n"],["priority=","Thread","Thread.html#method-i-priority-3D","(p1)","<p>Sets the priority of <em>thr</em> to <em>integer</em>. Higher-priority\nthreads will run before lower-priority threads. …\n"],["private","Module","Module.html#method-i-private","(*args)","<p>With no arguments, sets the default visibility for subsequently defined\nmethods to private. With arguments, …\n"],["private_class_method","Module","Module.html#method-i-private_class_method","(*args)","<p>Makes existing class methods private. Often used to hide the default\nconstructor <code>new</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">SimpleSingleton</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["private_instance_methods","Module","Module.html#method-i-private_instance_methods","(*args)","<p>Returns a list of the private instance methods defined in <em>mod</em>. If\nthe optional parameter is not <code>false</code> …\n"],["private_method_defined?","Module","Module.html#method-i-private_method_defined-3F","(p1)","<p>Returns <code>true</code> if the named private method is defined by _ mod_\n(or its included modules and, if <em>mod</em> is …\n"],["private_methods","Object","Object.html#method-i-private_methods","(*args)","<p>Returns the list of private methods accessible to <em>obj</em>. If the\n<em>all</em> parameter is set to <code>false</code>, only those …\n"],["proc","Kernel","Kernel.html#method-i-proc","()","<p>Equivalent to <code>Proc.new</code>, except the resulting Proc objects\ncheck the number of parameters passed when …\n"],["product","Array","Array.html#method-i-product","(*args)","<p>Returns an array of all combinations of elements from all arrays. The\nlength of the returned array is …\n"],["protected","Module","Module.html#method-i-protected","(*args)","<p>With no arguments, sets the default visibility for subsequently defined\nmethods to protected. With arguments, …\n"],["protected_instance_methods","Module","Module.html#method-i-protected_instance_methods","(*args)","<p>Returns a list of the protected instance methods defined in <em>mod</em>.\nIf the optional parameter is not <code>false</code> …\n"],["protected_method_defined?","Module","Module.html#method-i-protected_method_defined-3F","(p1)","<p>Returns <code>true</code> if the named protected method is defined by\n<em>mod</em> (or its included modules and, if <em>mod</em> is …\n"],["protected_methods","Object","Object.html#method-i-protected_methods","(*args)","<p>Returns the list of protected methods accessible to <em>obj</em>. If the\n<em>all</em> parameter is set to <code>false</code>, only those …\n"],["public","Module","Module.html#method-i-public","(*args)","<p>With no arguments, sets the default visibility for subsequently defined\nmethods to public. With arguments, …\n"],["public_class_method","Module","Module.html#method-i-public_class_method","(*args)","<p>Makes a list of existing class methods public.\n"],["public_instance_methods","Module","Module.html#method-i-public_instance_methods","(*args)","<p>Returns a list of the public instance methods defined in <em>mod</em>. If\nthe optional parameter is not <code>false</code> …\n"],["public_method_defined?","Module","Module.html#method-i-public_method_defined-3F","(p1)","<p>Returns <code>true</code> if the named public method is defined by\n<em>mod</em> (or its included modules and, if <em>mod</em> is a class, …\n"],["public_methods","Object","Object.html#method-i-public_methods","(*args)","<p>Returns the list of public methods accessible to <em>obj</em>. If the\n<em>all</em> parameter is set to <code>false</code>, only those …\n"],["push","Array","Array.html#method-i-push","(*args)","<p>Append—Pushes the given object(s) on to the end of this array. This\nexpression returns the array itself, …\n"],["putc","IO","IO.html#method-i-putc","(p1)","<p>If <em>obj</em> is <code>Numeric</code>, write the character whose code is\n<em>obj</em>, otherwise write the first character of the …\n"],["putc","Kernel","Kernel.html#method-i-putc","(p1)","<p>Equivalent to:\n\n<pre>$stdout.putc(int)</pre>\n"],["puts","IO","IO.html#method-i-puts","(*args)","<p>Writes the given objects to <em>ios</em> as with <code>IO#print</code>.\nWrites a record separator (typically a newline) after …\n"],["puts","Kernel","Kernel.html#method-i-puts","(*args)","<p>Equivalent to\n\n<pre>$stdout.puts(obj, ...)</pre>\n"],["pwd","Dir","Dir.html#method-c-pwd","()","<p>Returns the path to the current working directory of this process as a\nstring.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">chdir</span>(<span class=\"ruby-string\">&quot;/tmp&quot;</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["quo","Bignum","Bignum.html#method-i-quo","(p1)","<p>Returns the floating point result of dividing <em>big</em> by\n<em>numeric</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">-1234567890987654321</span>.<span class=\"ruby-identifier\">quo</span>(<span class=\"ruby-value\">13731</span>)      <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["quo","Fixnum","Fixnum.html#method-i-quo","(p1)","<p>Returns the floating point result of dividing <em>fix</em> by\n<em>numeric</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">654321</span>.<span class=\"ruby-identifier\">quo</span>(<span class=\"ruby-value\">13731</span>)      <span class=\"ruby-comment\">#=&gt; 47.6528293642124 ...</span>\n</pre>\n"],["quo","Numeric","Numeric.html#method-i-quo","(p1)","<p>Equivalent to <code>Numeric#/</code>, but overridden in subclasses.\n"],["quote","Regexp","Regexp.html#method-c-quote","(p1, p2 = v2)","<p>Escapes any characters that would have special meaning in a regular\nexpression. Returns a new escaped …\n"],["raise","Kernel","Kernel.html#method-i-raise","(*args)","<p>With no arguments, raises the exception in <code>$!</code> or raises a\n<code>RuntimeError</code> if <code>$!</code> is <code>nil</code>. With a\nsingle <code>String</code> …\n"],["raise","Thread","Thread.html#method-i-raise","(*args)","<p>Raises an exception (see <code>Kernel::raise</code>) from <em>thr</em>. The\ncaller does not have to be <em>thr</em>.\n\n<pre>Thread.abort_on_exception ...</pre>\n"],["rand","Kernel","Kernel.html#method-i-rand","(p1 = v1)","<p>Converts <em>max</em> to an integer using max1 = max<code>.to_i.abs</code>.\nIf the result is zero, returns a pseudorandom floating …\n"],["rassoc","Array","Array.html#method-i-rassoc","(p1)","<p>Searches through the array whose elements are also arrays. Compares\n<em>key</em> with the second element of each …\n"],["rdev","File::Stat","File/Stat.html#method-i-rdev","()","<p>Returns an integer representing the device type on which <em>stat</em>\nresides. Returns <code>nil</code> if the operating system …\n"],["rdev_major","File::Stat","File/Stat.html#method-i-rdev_major","()","<p>Returns the major part of <code>File_Stat#rdev</code> or <code>nil</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;/dev/fd1&quot;</span>).<span class=\"ruby-identifier\">rdev_major</span>   <span class=\"ruby-comment\">#=&gt; 2</span>\n<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;/dev/tty&quot;</span>).<span class=\"ruby-identifier\">rdev_major</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["rdev_minor","File::Stat","File/Stat.html#method-i-rdev_minor","()","<p>Returns the minor part of <code>File_Stat#rdev</code> or <code>nil</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;/dev/fd1&quot;</span>).<span class=\"ruby-identifier\">rdev_minor</span>   <span class=\"ruby-comment\">#=&gt; 1</span>\n<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;/dev/tty&quot;</span>).<span class=\"ruby-identifier\">rdev_minor</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["re_exchange","Process::GID","Process/GID.html#method-c-re_exchange","()","<p>Exchange real and effective group IDs and return the new effective group\nID. Not available on all platforms. …\n"],["re_exchange","Process::UID","Process/UID.html#method-c-re_exchange","()","<p>Exchange real and effective user IDs and return the new effective user ID.\nNot available on all platforms. …\n"],["re_exchangeable?","Process::GID","Process/GID.html#method-c-re_exchangeable-3F","()","<p>Returns <code>true</code> if the real and effective group IDs of a process\nmay be exchanged on the current platform. …\n"],["re_exchangeable?","Process::UID","Process/UID.html#method-c-re_exchangeable-3F","()","<p>Returns <code>true</code> if the real and effective user IDs of a process\nmay be exchanged on the current platform. …\n"],["read","Dir","Dir.html#method-i-read","()","<p>Reads the next entry from <em>dir</em> and returns it as a string. Returns\n<code>nil</code> at the end of the stream.\n\n<pre>d = Dir.new(&quot;testdir&quot;) ...</pre>\n"],["read","IO","IO.html#method-i-read","(p1 = v1, p2 = v2)","<p>Reads at most <em>length</em> bytes from the I/O stream, or to the end of\nfile if <em>length</em> is omitted or is <code>nil</code> …\n"],["read","IO","IO.html#method-c-read","(p1, p2 = v2, p3 = v3)","<p>Opens the file, optionally seeks to the given offset, then returns\n<em>length</em> bytes (defaulting to the rest …\n"],["read_nonblock","IO","IO.html#method-i-read_nonblock","(*args)","<p>Reads at most <em>maxlen</em> bytes from <em>ios</em> using read(2) system\ncall after O_NONBLOCK is set for the underlying …\n"],["readable?","File","File.html#method-c-readable-3F","(p1)","<p>Returns <code>true</code> if the named file is readable by the effective\nuser id of this process.\n"],["readable?","File::Stat","File/Stat.html#method-i-readable-3F","()","<p>Returns <code>true</code> if <em>stat</em> is readable by the effective\nuser id of this process.\n\n<pre>File.stat(&quot;testfile&quot;).readable? ...</pre>\n"],["readable?","FileTest","FileTest.html#method-i-readable-3F","(p1)","<p>Returns <code>true</code> if the named file is readable by the effective\nuser id of this process.\n"],["readable_real?","File","File.html#method-c-readable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is readable by the real user id\nof this process.\n"],["readable_real?","File::Stat","File/Stat.html#method-i-readable_real-3F","()","<p>Returns <code>true</code> if <em>stat</em> is readable by the real user id\nof this process.\n\n<pre>File.stat(&quot;testfile&quot;).readable_real? ...</pre>\n"],["readable_real?","FileTest","FileTest.html#method-i-readable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is readable by the real user id\nof this process.\n"],["readbyte","IO","IO.html#method-i-readbyte","()","<p>Reads a character as with <code>IO#getc</code>, but raises an\n<code>EOFError</code> on end of file.\n"],["readchar","IO","IO.html#method-i-readchar","()","<p>Reads a character as with <code>IO#getc</code>, but raises an\n<code>EOFError</code> on end of file.\n"],["readline","IO","IO.html#method-i-readline","(*args)","<p>Reads a line as with <code>IO#gets</code>, but raises an\n<code>EOFError</code> on end of file.\n"],["readline","Kernel","Kernel.html#method-i-readline","(*args)","<p>Equivalent to <code>Kernel::gets</code>, except <code>readline</code>\nraises <code>EOFError</code> at end of file.\n"],["readlines","IO","IO.html#method-i-readlines","(p1)","<p>Reads all of the lines in <em>ios</em>, and returns them in\n<em>anArray</em>. Lines are separated by the optional <em>sep_string</em> …\n"],["readlines","IO","IO.html#method-c-readlines","(p1, p2 = v2)","<p>Reads the entire file specified by <em>name</em> as individual lines, and\nreturns those lines in an array. Lines …\n"],["readlines","Kernel","Kernel.html#method-i-readlines","(*args)","<p>Returns an array containing the lines returned by calling\n<code>Kernel.gets(<em>separator</em>)</code> until the end of file. …\n"],["readlink","File","File.html#method-c-readlink","(p1)","<p>Returns the name of the file referenced by the given link. Not available on\nall platforms.\n\n<pre>File.symlink(&quot;testfile&quot;, ...</pre>\n"],["readpartial","IO","IO.html#method-i-readpartial","(*args)","<p>Reads at most <em>maxlen</em> bytes from the I/O stream. It blocks only if\n<em>ios</em> has no data immediately available. …\n"],["reason","LocalJumpError","LocalJumpError.html#method-i-reason","()","<p>The reason this block was terminated: :break, :redo, :retry, :next,\n:return, or :noreason.\n"],["receiver","Method","Method.html#method-i-receiver","()","<p>Returns the bound receiver of the method object.\n"],["reduce","Enumerable","Enumerable.html#method-i-reduce","(p1 = v1, p2 = v2)","<p>Combines all elements of <em>enum</em> by applying a binary operation,\nspecified by a block or a symbol that names …\n"],["rehash","Hash","Hash.html#method-i-rehash","()","<p>Rebuilds the hash based on the current hash values for each key. If values\nof key objects have changed …\n"],["reject","Array","Array.html#method-i-reject","()","<p>Returns a new array containing the items in <em>self</em> for which the\nblock is not true.\n"],["reject","Enumerable","Enumerable.html#method-i-reject","()","<p>Returns an array for all elements of <em>enum</em> for which <em>block</em>\nis false (see also <code>Enumerable#find_all</code>).\n\n<pre>(1..10).reject ...</pre>\n"],["reject","Hash","Hash.html#method-i-reject","()","<p>Same as <code>Hash#delete_if</code>, but works on (and returns) a copy of\nthe <em>hsh</em>. Equivalent to <code><em>hsh</em>.dup.delete_if</code> …\n"],["reject!","Array","Array.html#method-i-reject-21","()","<p>Equivalent to <code>Array#delete_if</code>, deleting elements from\n<em>self</em> for which the block evaluates to true, but …\n"],["reject!","Hash","Hash.html#method-i-reject-21","()","<p>Equivalent to <code>Hash#delete_if</code>, but returns <code>nil</code> if\nno changes were made.\n"],["remainder","Bignum","Bignum.html#method-i-remainder","(p1)","<p>Returns the remainder after dividing <em>big</em> by <em>numeric</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">-1234567890987654321</span>.<span class=\"ruby-identifier\">remainder</span>(<span class=\"ruby-value\">13731</span>)      <span class=\"ruby-comment\">#=&gt; -6966 ...</span>\n</pre>\n"],["remainder","Numeric","Numeric.html#method-i-remainder","(p1)","<p>If <em>num</em> and <em>numeric</em> have different signs, returns\n<em>mod</em>-<em>numeric</em>; otherwise, returns <em>mod</em>. In both\ncases  …\n"],["remove_class_variable","Module","Module.html#method-i-remove_class_variable","(p1)","<p>Removes the definition of the <em>sym</em>, returning that constant’s\nvalue.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Dummy</span>\n  <span class=\"ruby-identifier\">@@var</span> = <span class=\"ruby-value\">99</span>\n  <span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">@@var</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["remove_const","Module","Module.html#method-i-remove_const","(p1)","<p>Removes the definition of the given constant, returning that constant’s\nvalue. Predefined classes and …\n"],["remove_finalizer","ObjectSpace","ObjectSpace.html#method-c-remove_finalizer","(p1)","<p>deprecated\n"],["remove_instance_variable","Object","Object.html#method-i-remove_instance_variable","(p1)","<p>Removes the named instance variable from <em>obj</em>, returning that\nvariable’s value.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Dummy</span>\n  <span class=\"ruby-identifier\">attr_reader</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["remove_method","Module","Module.html#method-i-remove_method","(*args)","<p>Removes the method identified by <em>symbol</em> from the current class.\nFor an example, see <code>Module.undef_method</code> …\n"],["rename","File","File.html#method-c-rename","(p1, p2)","<p>Renames the given file to the new name. Raises a\n<code>SystemCallError</code> if the file cannot be renamed.\n\n<pre>File.rename(&quot;afile&quot;, ...</pre>\n"],["reopen","IO","IO.html#method-i-reopen","(p1, p2 = v2)","<p>Reassociates <em>ios</em> with the I/O stream given in <em>other_IO</em> or\nto a new stream opened on <em>path</em>. This may dynamically …\n"],["replace","Array","Array.html#method-i-replace","(p1)","<p>Replaces the contents of <em>self</em> with the contents of\n<em>other_array</em>, truncating or expanding if necessary. …\n"],["replace","Hash","Hash.html#method-i-replace","(p1)","<p>Replaces the contents of <em>hsh</em> with the contents of\n<em>other_hash</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = { <span class=\"ruby-string\">&quot;a&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">100</span>, <span class=\"ruby-string\">&quot;b&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">200</span> }\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">replace</span>({ <span class=\"ruby-operator\">...</span>\n</pre>\n"],["replace","String","String.html#method-i-replace","(p1)","<p>Replaces the contents and taintedness of <em>str</em> with the\ncorresponding values in <em>other_str</em>.\n\n<pre>s = &quot;hello&quot;  ...</pre>\n"],["require","Kernel","Kernel.html#method-i-require","(p1)","<p>Ruby tries to load the library named <em>string</em>, returning\n<code>true</code> if successful. If the filename does not resolve …\n"],["respond_to?","Object","Object.html#method-i-respond_to-3F","(p1, p2 = v2)","<p>Returns <code>true</code>&gt; if <em>obj</em> responds to the given method.\nPrivate methods are included in the search only …\n"],["restore","Marshal","Marshal.html#method-c-restore","(p1, p2 = v2)","<p>Returns the result of converting the serialized data in source into a Ruby\nobject (possibly with associated …\n"],["reverse","Array","Array.html#method-i-reverse","()","<p>Returns a new array containing <em>self</em>’s elements in reverse order.\n\n<pre class=\"ruby\">[ <span class=\"ruby-string\">&quot;a&quot;</span>, <span class=\"ruby-string\">&quot;b&quot;</span>, <span class=\"ruby-string\">&quot;c&quot;</span> ].<span class=\"ruby-identifier\">reverse</span>   <span class=\"ruby-comment\">#=&gt; [&quot;c&quot;, ...</span>\n</pre>\n"],["reverse","String","String.html#method-i-reverse","()","<p>Returns a new string with the characters from <em>str</em> in reverse\norder.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;stressed&quot;</span>.<span class=\"ruby-identifier\">reverse</span>   <span class=\"ruby-comment\">#=&gt; &quot;desserts&quot;</span>\n</pre>\n"],["reverse!","Array","Array.html#method-i-reverse-21","()","<p>Reverses <em>self</em> in place.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [ <span class=\"ruby-string\">&quot;a&quot;</span>, <span class=\"ruby-string\">&quot;b&quot;</span>, <span class=\"ruby-string\">&quot;c&quot;</span> ]\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">reverse!</span>       <span class=\"ruby-comment\">#=&gt; [&quot;c&quot;, &quot;b&quot;, &quot;a&quot;]</span>\n<span class=\"ruby-identifier\">a</span>                <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["reverse!","String","String.html#method-i-reverse-21","()","<p>Reverses <em>str</em> in place.\n"],["reverse_each","Array","Array.html#method-i-reverse_each","()","<p>Same as <code>Array#each</code>, but traverses <em>self</em> in reverse\norder.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [ <span class=\"ruby-string\">&quot;a&quot;</span>, <span class=\"ruby-string\">&quot;b&quot;</span>, <span class=\"ruby-string\">&quot;c&quot;</span> ]\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">reverse_each</span> {<span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">x</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">print</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["reverse_each","Enumerable","Enumerable.html#method-i-reverse_each","(*args)","<p>Traverses <em>enum</em> in reverse order.\n"],["rewind","Dir","Dir.html#method-i-rewind","()","<p>Repositions <em>dir</em> to the first entry.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testdir&quot;</span>)\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">read</span>     <span class=\"ruby-comment\">#=&gt; &quot;.&quot;</span>\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">rewind</span>   <span class=\"ruby-comment\">#=&gt; #&lt;Dir:0x401b3fb0&gt; ...</span>\n</pre>\n"],["rewind","Enumerable::Enumerator","Enumerable/Enumerator.html#method-i-rewind","()","<p>Rewinds the enumeration sequence by the next method.\n"],["rewind","IO","IO.html#method-i-rewind","()","<p>Positions <em>ios</em> to the beginning of input, resetting\n<code>lineno</code> to zero.\n\n<pre>f = File.new(&quot;testfile&quot;)\nf.readline ...</pre>\n"],["rid","Process::GID","Process/GID.html#method-c-rid","()","<p>Returns the (real) group ID for this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">gid</span>   <span class=\"ruby-comment\">#=&gt; 500</span>\n</pre>\n"],["rid","Process::UID","Process/UID.html#method-c-rid","()","<p>Returns the (real) user ID of this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">uid</span>   <span class=\"ruby-comment\">#=&gt; 501</span>\n</pre>\n"],["rindex","Array","Array.html#method-i-rindex","(p1 = v1)","<p>Returns the index of the last object in <em>array</em> <code>==</code> to\n<em>obj</em>. If a block is given instead of an argument, …\n"],["rindex","String","String.html#method-i-rindex","(p1, p2 = v2)","<p>Returns the index of the last occurrence of the given <em>substring</em>,\ncharacter (<em>fixnum</em>), or pattern (<em>regexp</em> …\n"],["rjust","String","String.html#method-i-rjust","(*args)","<p>If <em>integer</em> is greater than the length of <em>str</em>, returns a\nnew <code>String</code> of length <em>integer</em> with <em>str</em> right\njustified …\n"],["rmdir","Dir","Dir.html#method-c-rmdir","(p1)","<p>Deletes the named directory. Raises a subclass of\n<code>SystemCallError</code> if the directory isn’t empty.\n"],["round","Float","Float.html#method-i-round","()","<p>Rounds <em>flt</em> to the nearest integer. Equivalent to:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">round</span>\n  <span class=\"ruby-keyword\">return</span> (<span class=\"ruby-keyword\">self</span><span class=\"ruby-operator\">+</span><span class=\"ruby-value\">0.5</span>).<span class=\"ruby-identifier\">floor</span> <span class=\"ruby-keyword\">if</span> <span class=\"ruby-keyword\">self</span> <span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">0.0</span>\n  <span class=\"ruby-operator\">...</span>\n</pre>\n"],["round","Integer","Integer.html#method-i-round","()","<p>As <em>int</em> is already an <code>Integer</code>, all these methods\nsimply return the receiver.\n"],["round","Numeric","Numeric.html#method-i-round","()","<p>Rounds <em>num</em> to the nearest integer. <code>Numeric</code> implements\nthis by converting itself to a <code>Float</code> and invoking …\n"],["rpartition","String","String.html#method-i-rpartition","(p1)","<p>Searches <em>sep</em> in the string from the end of the string, and returns\nthe part before it, the <em>sep</em>, and the …\n"],["rstrip","String","String.html#method-i-rstrip","()","<p>Returns a copy of <em>str</em> with trailing whitespace removed. See also\n<code>String#lstrip</code> and <code>String#strip</code>.\n\n<pre>&quot;  hello ...</pre>\n"],["rstrip!","String","String.html#method-i-rstrip-21","()","<p>Removes trailing whitespace from <em>str</em>, returning <code>nil</code>\nif no change was made. See also <code>String#lstrip!</code> and …\n"],["run","Thread","Thread.html#method-i-run","()","<p>Wakes up <em>thr</em>, making it eligible for scheduling. If not in a\ncritical section, then invokes the scheduler. …\n"],["safe_level","Thread","Thread.html#method-i-safe_level","()","<p>Returns the safe level in effect for <em>thr</em>. Setting thread-local\nsafe levels can help when implementing …\n"],["scan","Kernel","Kernel.html#method-i-scan","(p1)","<p>Equivalent to calling <code>$_.scan</code>. See <code>String#scan</code>.\n"],["scan","String","String.html#method-i-scan","(p1)","<p>Both forms iterate through <em>str</em>, matching the pattern (which may be\na <code>Regexp</code> or a <code>String</code>). For each match, …\n"],["sec","Time","Time.html#method-i-sec","()","<p>Returns the second of the minute (0..60)<em>[Yes, seconds really can range\nfrom zero to 60. This allows the</em> …\n"],["seek","Dir","Dir.html#method-i-seek","(p1)","<p>Seeks to a particular location in <em>dir</em>. <em>integer</em> must be a\nvalue returned by <code>Dir#tell</code>.\n\n<pre>d = Dir.new(&quot;testdir&quot;) ...</pre>\n"],["seek","IO","IO.html#method-i-seek","(p1, p2 = v2)","<p>Seeks to a given offset <em>anInteger</em> in the stream according to the\nvalue of <em>whence</em>:\n\n<pre>IO::SEEK_CUR  | Seeks ...</pre>\n"],["select","Array","Array.html#method-i-select","()","<p>Invokes the block passing in successive elements from <em>array</em>,\nreturning an array containing those elements …\n"],["select","Enumerable","Enumerable.html#method-i-select","()","<p>Returns an array containing all elements of <em>enum</em> for which\n<em>block</em> is not <code>false</code> (see also\n<code>Enumerable#reject</code> …\n"],["select","Hash","Hash.html#method-i-select","()","<p>Returns a new array consisting of <code>[key,value]</code> pairs for which\nthe block returns true. Also see <code>Hash.values_at</code> …\n"],["select","IO","IO.html#method-c-select","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>See <code>Kernel#select</code>.\n"],["select","Kernel","Kernel.html#method-i-select","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>See <code>Kernel#select</code>.\n"],["select","MatchData","MatchData.html#method-i-select","(*args)","<p>Returns an array containing match strings for which <em>block</em> gives\n<code>true</code>.  MatchData#select will be removed …\n"],["select","Struct","Struct.html#method-i-select","(*args)","<p>Invokes the block passing in successive elements from <em>struct</em>,\nreturning an array containing those elements …\n"],["send","Object","Object.html#method-i-send","(*args)","<p>Invokes the method identified by <em>symbol</em>, passing it any arguments\nspecified. You can use <code>__send__</code> if …\n"],["set_backtrace","Exception","Exception.html#method-i-set_backtrace","(p1)","<p>Sets the backtrace information associated with <em>exc</em>. The argument\nmust be an array of <code>String</code> objects in …\n"],["set_trace_func","Kernel","Kernel.html#method-i-set_trace_func","(p1)","<p>Establishes <em>proc</em> as the handler for tracing, or disables tracing\nif the parameter is <code>nil</code>. <em>proc</em> takes …\n"],["setegid","Process::Sys","Process/Sys.html#method-c-setegid","(p1)","<p>Set the effective group ID of the calling process to <em>integer</em>.  Not\navailable on all platforms.\n"],["seteuid","Process::Sys","Process/Sys.html#method-c-seteuid","(p1)","<p>Set the effective user ID of the calling process to <em>integer</em>.  Not\navailable on all platforms.\n"],["setgid","Process::Sys","Process/Sys.html#method-c-setgid","(p1)","<p>Set the group ID of the current process to <em>integer</em>. Not available\non all platforms.\n"],["setgid?","File","File.html#method-c-setgid-3F","(p1)","<p>Returns <code>true</code> if the named file has the setgid bit set.\n"],["setgid?","File::Stat","File/Stat.html#method-i-setgid-3F","()","<p>Returns <code>true</code> if <em>stat</em> has the set-group-id permission\nbit set, <code>false</code> if it doesn’t or if the operating …\n"],["setgid?","FileTest","FileTest.html#method-i-setgid-3F","(p1)","<p>Returns <code>true</code> if the named file has the setgid bit set.\n"],["setpgid","Process","Process.html#method-c-setpgid","(p1, p2)","<p>Sets the process group ID of <em>pid</em> (0 indicates this process) to\n<em>integer</em>. Not available on all platforms. …\n"],["setpgrp","Process","Process.html#method-c-setpgrp","()","<p>Equivalent to <code>setpgid(0,0)</code>. Not available on all platforms.\n"],["setpriority","Process","Process.html#method-c-setpriority","(p1, p2, p3)","<p>See <code>Process#getpriority</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">setpriority</span>(<span class=\"ruby-constant\">Process</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">PRIO_USER</span>, <span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">19</span>)      <span class=\"ruby-comment\">#=&gt; 0</span>\n<span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">setpriority</span>(<span class=\"ruby-constant\">Process</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">PRIO_PROCESS</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["setregid","Process::Sys","Process/Sys.html#method-c-setregid","(p1, p2)","<p>Sets the (integer) real and/or effective group IDs of the current process\nto <em>rid</em> and <em>eid</em>, respectively. …\n"],["setresgid","Process::Sys","Process/Sys.html#method-c-setresgid","(p1, p2, p3)","<p>Sets the (integer) real, effective, and saved user IDs of the current\nprocess to <em>rid</em>, <em>eid</em>, and <em>sid</em> respectively. …\n"],["setresuid","Process::Sys","Process/Sys.html#method-c-setresuid","(p1, p2, p3)","<p>Sets the (integer) real, effective, and saved user IDs of the current\nprocess to <em>rid</em>, <em>eid</em>, and <em>sid</em> respectively. …\n"],["setreuid","Process::Sys","Process/Sys.html#method-c-setreuid","(p1, p2)","<p>Sets the (integer) real and/or effective user IDs of the current process to\n<em>rid</em> and <em>eid</em>, respectively. …\n"],["setrgid","Process::Sys","Process/Sys.html#method-c-setrgid","(p1)","<p>Set the real group ID of the calling process to <em>integer</em>. Not\navailable on all platforms.\n"],["setrlimit","Process","Process.html#method-c-setrlimit","(p1, p2, p3 = v3)","<p>Sets the resource limit of the process. <em>cur_limit</em> means current\n(soft) limit and <em>max_limit</em> means maximum …\n"],["setruid","Process::Sys","Process/Sys.html#method-c-setruid","(p1)","<p>Set the real user ID of the calling process to <em>integer</em>. Not\navailable on all platforms.\n"],["setsid","Process","Process.html#method-c-setsid","()","<p>Establishes this process as a new session and process group leader, with no\ncontrolling tty. Returns …\n"],["setuid","Process::Sys","Process/Sys.html#method-c-setuid","(p1)","<p>Set the user ID of the current process to <em>integer</em>. Not available\non all platforms.\n"],["setuid?","File","File.html#method-c-setuid-3F","(p1)","<p>Returns <code>true</code> if the named file has the setuid bit set.\n"],["setuid?","File::Stat","File/Stat.html#method-i-setuid-3F","()","<p>Returns <code>true</code> if <em>stat</em> has the set-user-id permission\nbit set, <code>false</code> if it doesn’t or if the operating …\n"],["setuid?","FileTest","FileTest.html#method-i-setuid-3F","(p1)","<p>Returns <code>true</code> if the named file has the setuid bit set.\n"],["shift","Array","Array.html#method-i-shift","(*args)","<p>Returns the first element of <em>self</em> and removes it (shifting all\nother elements down by one). Returns  …\n"],["shift","Hash","Hash.html#method-i-shift","()","<p>Removes a key-value pair from <em>hsh</em> and returns it as the two-item\narray <code>[</code> <em>key, value</em> <code>]</code>, or the hash’s …\n"],["shuffle","Array","Array.html#method-i-shuffle","()","<p>Returns a new array with elements of this array shuffled.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [ <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span> ]           <span class=\"ruby-comment\">#=&gt; [1, 2, 3]</span>\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">shuffle</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["shuffle!","Array","Array.html#method-i-shuffle-21","()","<p>Shuffles elements in <em>self</em> in place.\n"],["sid_available?","Process::GID","Process/GID.html#method-c-sid_available-3F","()","<p>Returns <code>true</code> if the current platform has saved group ID\nfunctionality.\n"],["sid_available?","Process::UID","Process/UID.html#method-c-sid_available-3F","()","<p>Returns <code>true</code> if the current platform has saved user ID\nfunctionality.\n"],["signaled?","Process::Status","Process/Status.html#method-i-signaled-3F","()","<p>Returns <code>true</code> if <em>stat</em> terminated because of an\nuncaught signal.\n"],["sin","Math","Math.html#method-c-sin","(p1)","<p>Computes the sine of <em>x</em> (expressed in radians). Returns -1..1.\n"],["singleton_method_added","Numeric","Numeric.html#method-i-singleton_method_added","(p1)","<p>Trap attempts to add methods to <code>Numeric</code> objects. Always raises\na <code>TypeError</code>\n"],["singleton_method_added","Object","Object.html#method-i-singleton_method_added","(p1)","<p>Invoked as a callback whenever a singleton method is added to the receiver.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">Chatty</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-constant\">Chatty</span>.<span class=\"ruby-identifier\">singleton_method_added</span>(<span class=\"ruby-identifier\">id</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["singleton_method_removed","Object","Object.html#method-i-singleton_method_removed","(p1)","<p>Invoked as a callback whenever a singleton method is removed from the\nreceiver.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">Chatty</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-constant\">Chatty</span>.<span class=\"ruby-identifier\">singleton_method_removed</span>(<span class=\"ruby-identifier\">id</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["singleton_method_undefined","Object","Object.html#method-i-singleton_method_undefined","(p1)","<p>Invoked as a callback whenever a singleton method is undefined in the\nreceiver.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">Chatty</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-constant\">Chatty</span>.<span class=\"ruby-identifier\">singleton_method_undefined</span>(<span class=\"ruby-identifier\">id</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["singleton_methods","Object","Object.html#method-i-singleton_methods","(p1 = v1)","<p>Returns an array of the names of singleton methods for <em>obj</em>. If the\noptional <em>all</em> parameter is true, the …\n"],["sinh","Math","Math.html#method-c-sinh","(p1)","<p>Computes the hyperbolic sine of <em>x</em> (expressed in radians).\n"],["size","Array","Array.html#method-i-size","()",""],["size","Bignum","Bignum.html#method-i-size","()","<p>Returns the number of bytes in the machine representation of <em>big</em>.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">256</span><span class=\"ruby-operator\">**</span><span class=\"ruby-value\">10</span> <span class=\"ruby-operator\">-</span> <span class=\"ruby-value\">1</span>).<span class=\"ruby-identifier\">size</span>   <span class=\"ruby-comment\">#=&gt; 12</span>\n(<span class=\"ruby-value\">256</span><span class=\"ruby-operator\">**</span><span class=\"ruby-value\">20</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["size","File","File.html#method-c-size","(p1)","<p>Returns the size of <code>file_name</code>.\n"],["size","File::Stat","File/Stat.html#method-i-size","()","<p>Returns the size of <em>stat</em> in bytes.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">size</span>   <span class=\"ruby-comment\">#=&gt; 66</span>\n</pre>\n"],["size","FileTest","FileTest.html#method-i-size","(p1)","<p>Returns the size of <code>file_name</code>.\n"],["size","Fixnum","Fixnum.html#method-i-size","()","<p>Returns the number of <em>bytes</em> in the machine representation of a\n<code>Fixnum</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">size</span>            <span class=\"ruby-comment\">#=&gt; 4</span>\n<span class=\"ruby-value\">-1</span>.<span class=\"ruby-identifier\">size</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["size","Hash","Hash.html#method-i-size","()","<p>Returns the number of key-value pairs in the hash.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = { <span class=\"ruby-string\">&quot;d&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">100</span>, <span class=\"ruby-string\">&quot;a&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">200</span>, <span class=\"ruby-string\">&quot;v&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">300</span>, <span class=\"ruby-string\">&quot;e&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">400</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["size","MatchData","MatchData.html#method-i-size","()","<p>Returns the number of elements in the match array.\n\n<pre>m = /(.)(.)(\\d+)(\\d)/.match(&quot;THX1138.&quot;)\nm.length   ...</pre>\n"],["size","String","String.html#method-i-size","()","<p>Returns the length of <em>str</em>.\n"],["size","Struct","Struct.html#method-i-size","()","<p>Returns the number of instance variables.\n\n<pre>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new(&quot;Joe ...</pre>\n"],["size?","File","File.html#method-c-size-3F","(p1)","<p>Returns <code>nil</code> if <code>file_name</code> doesn’t exist or has\nzero size, the size of the file otherwise.\n"],["size?","File::Stat","File/Stat.html#method-i-size-3F","()","<p>Returns the size of <em>stat</em> in bytes.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">size</span>   <span class=\"ruby-comment\">#=&gt; 66</span>\n</pre>\n"],["size?","FileTest","FileTest.html#method-i-size-3F","(p1)","<p>Returns <code>nil</code> if <code>file_name</code> doesn’t exist or has\nzero size, the size of the file otherwise.\n"],["sleep","Kernel","Kernel.html#method-i-sleep","(*args)","<p>Suspends the current thread for <em>duration</em> seconds (which may be any\nnumber, including a <code>Float</code> with fractional …\n"],["slice","Array","Array.html#method-i-slice","(p1, p2 = v2)","<p>Element Reference—Returns the element at <em>index</em>, or returns a\nsubarray starting at <em>start</em> and continuing …\n"],["slice","String","String.html#method-i-slice","(*args)","<p>Element Reference—If passed a single <code>Fixnum</code>, returns the code\nof the character at that position. If …\n"],["slice!","Array","Array.html#method-i-slice-21","(p1, p2 = v2)","<p>Deletes the element(s) given by an index (optionally with a length) or by a\nrange. Returns the deleted …\n"],["slice!","String","String.html#method-i-slice-21","(*args)","<p>Deletes the specified portion from <em>str</em>, and returns the portion\ndeleted. The forms that take a <code>Fixnum</code> …\n"],["socket?","File","File.html#method-c-socket-3F","(p1)","<p>Returns <code>true</code> if the named file is a socket.\n"],["socket?","File::Stat","File/Stat.html#method-i-socket-3F","()","<p>Returns <code>true</code> if <em>stat</em> is a socket, <code>false</code>\nif it isn’t or if the operating system doesn’t support this feature. …\n"],["socket?","FileTest","FileTest.html#method-i-socket-3F","(p1)","<p>Returns <code>true</code> if the named file is a socket.\n"],["sort","Array","Array.html#method-i-sort","()","<p>Returns a new array created by sorting <em>self</em>. Comparisons for the\nsort will be done using the <code>&lt;=&gt;</code> …\n"],["sort","Enumerable","Enumerable.html#method-i-sort","()","<p>Returns an array containing the items in <em>enum</em> sorted, either\naccording to their own <code>&lt;=&gt;</code> method, …\n"],["sort","Hash","Hash.html#method-i-sort","()","<p>Converts <em>hsh</em> to a nested array of <code>[</code> <em>key,\nvalue</em> <code>]</code> arrays and sorts it, using\n<code>Array#sort</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = { <span class=\"ruby-string\">&quot;a&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">20</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["sort!","Array","Array.html#method-i-sort-21","()","<p>Sorts <em>self</em>. Comparisons for the sort will be done using the\n<code>&lt;=&gt;</code> operator or using an optional code …\n"],["sort_by","Enumerable","Enumerable.html#method-i-sort_by","()","<p>Sorts <em>enum</em> using a set of keys generated by mapping the values in\n<em>enum</em> through the given block.\n\n<pre>%w{ apple ...</pre>\n"],["source","Regexp","Regexp.html#method-i-source","()","<p>Returns the original string of the pattern.\n\n<pre class=\"ruby\"><span class=\"ruby-regexp\">/ab+c/</span><span class=\"ruby-identifier\">x</span>.<span class=\"ruby-identifier\">source</span>   <span class=\"ruby-comment\">#=&gt; &quot;ab+c&quot;</span>\n</pre>\n"],["split","File","File.html#method-c-split","(p1)","<p>Splits the given string into a directory and a file component and returns\nthem in a two-element array. …\n"],["split","Kernel","Kernel.html#method-i-split","(*args)","<p>Equivalent to <code>$_.split(<em>pattern</em>, <em>limit</em>)</code>. See\n<code>String#split</code>.\n"],["split","String","String.html#method-i-split","(p1 = v1, p2 = v2)","<p>Divides <em>str</em> into substrings based on a delimiter, returning an\narray of these substrings.\n<p>If <em>pattern</em> is …\n"],["sprintf","Kernel","Kernel.html#method-i-sprintf","(*args)","<p>Returns the string resulting from applying <em>format_string</em> to any\nadditional arguments. Within the format …\n"],["sqrt","Math","Math.html#method-c-sqrt","(p1)","<p>Returns the non-negative square root of <em>numeric</em>.\n"],["squeeze","String","String.html#method-i-squeeze","(*args)","<p>Builds a set of characters from the <em>other_str</em> parameter(s) using\nthe procedure described for <code>String#count</code> …\n"],["squeeze!","String","String.html#method-i-squeeze-21","(*args)","<p>Squeezes <em>str</em> in place, returning either <em>str</em>, or\n<code>nil</code> if no changes were made.\n"],["srand","Kernel","Kernel.html#method-i-srand","(p1 = v1)","<p>Seeds the pseudorandom number generator to the value of\n<em>number</em>.<code>to_i.abs</code>. If <em>number</em> is omitted, seeds\n…\n"],["start","GC","GC.html#method-c-start","()","<p>Initiates garbage collection, unless manually disabled.\n"],["start","Thread","Thread.html#method-c-start","(*args)","<p>Basically the same as <code>Thread::new</code>. However, if class\n<code>Thread</code> is subclassed, then calling <code>start</code> in that\n…\n"],["start_with?","String","String.html#method-i-start_with-3F","(*args)","<p>Returns true if <em>str</em> starts with the prefix given.\n"],["stat","File","File.html#method-c-stat","(p1)","<p>Returns a <code>File::Stat</code> object for the named file (see\n<code>File::Stat</code>).\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">mtime</span>   <span class=\"ruby-comment\">#=&gt; Tue ...</span>\n</pre>\n"],["stat","IO","IO.html#method-i-stat","()","<p>Returns status information for <em>ios</em> as an object of type\n<code>File::Stat</code>.\n\n<pre>f = File.new(&quot;testfile&quot;)\ns = f.stat ...</pre>\n"],["status","SystemExit","SystemExit.html#method-i-status","()","<p>Return the status value associated with this system exit.\n"],["status","Thread","Thread.html#method-i-status","()","<p>Returns the status of <em>thr</em>: “<code>sleep</code>” if <em>thr</em> is\nsleeping or waiting on I/O, “<code>run</code>” if <em>thr</em> is\nexecuting, …\n"],["step","Numeric","Numeric.html#method-i-step","(*args)","<p>Invokes <em>block</em> with the sequence of numbers starting at\n<em>num</em>, incremented by <em>step</em> on each call. The loop …\n"],["step","Range","Range.html#method-i-step","(p1 = v1)","<p>Iterates over <em>rng</em>, passing each <em>n</em>th element to the block.\nIf the range contains numbers, <em>n</em> is added for …\n"],["sticky?","File","File.html#method-c-sticky-3F","(p1)","<p>Returns <code>true</code> if the named file has the sticky bit set.\n"],["sticky?","File::Stat","File/Stat.html#method-i-sticky-3F","()","<p>Returns <code>true</code> if <em>stat</em> has its sticky bit set,\n<code>false</code> if it doesn’t or if the operating system doesn’t support\n…\n"],["sticky?","FileTest","FileTest.html#method-i-sticky-3F","(p1)","<p>Returns <code>true</code> if the named file has the sticky bit set.\n"],["stop","Thread","Thread.html#method-c-stop","()","<p>Stops execution of the current thread, putting it into a “sleep” state, and\nschedules execution of …\n"],["stop?","Thread","Thread.html#method-i-stop-3F","()","<p>Returns <code>true</code> if <em>thr</em> is dead or sleeping.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = <span class=\"ruby-constant\">Thread</span>.<span class=\"ruby-identifier\">new</span> { <span class=\"ruby-constant\">Thread</span>.<span class=\"ruby-identifier\">stop</span> }\n<span class=\"ruby-identifier\">b</span> = <span class=\"ruby-constant\">Thread</span>.<span class=\"ruby-identifier\">current</span>\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">stop?</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["stopped?","Process::Status","Process/Status.html#method-i-stopped-3F","()","<p>Returns <code>true</code> if this process is stopped. This is only returned\nif the corresponding <code>wait</code> call had the …\n"],["stopsig","Process::Status","Process/Status.html#method-i-stopsig","()","<p>Returns the number of the signal that caused <em>stat</em> to stop (or\n<code>nil</code> if self is not stopped).\n"],["store","Hash","Hash.html#method-i-store","(p1, p2)","<p>Element Assignment—Associates the value given by <em>value</em> with the\nkey given by <em>key</em>. <em>key</em> should not have …\n"],["stress","GC","GC.html#method-c-stress","()","<p>returns current status of GC stress mode.\n"],["stress=","GC","GC.html#method-c-stress-3D","(p1)","<p>updates GC stress mode.\n<p>When GC.stress = true, GC is invoked for all GC opportunity: all memory and\nobject …\n"],["strftime","Time","Time.html#method-i-strftime","(p1)","<p>Formats <em>time</em> according to the directives in the given format\nstring. Any text not listed as a directive …\n"],["string","MatchData","MatchData.html#method-i-string","()","<p>Returns a frozen copy of the string passed in to <code>match</code>.\n\n<pre>m = /(.)(.)(\\d+)(\\d)/.match(&quot;THX1138.&quot;)\nm.string ...</pre>\n"],["strip","String","String.html#method-i-strip","()","<p>Returns a copy of <em>str</em> with leading and trailing whitespace\nremoved.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;    hello    &quot;</span>.<span class=\"ruby-identifier\">strip</span>   <span class=\"ruby-comment\">#=&gt; &quot;hello&quot; ...</span>\n</pre>\n"],["strip!","String","String.html#method-i-strip-21","()","<p>Removes leading and trailing whitespace from <em>str</em>. Returns\n<code>nil</code> if <em>str</em> was not altered.\n"],["sub","Kernel","Kernel.html#method-i-sub","(*args)","<p>Equivalent to <code>$_.sub(<em>args</em>)</code>, except that\n<code>$_</code> will be updated if substitution occurs.\n"],["sub","String","String.html#method-i-sub","(*args)","<p>Returns a copy of <em>str</em> with the <em>first</em> occurrence of\n<em>pattern</em> replaced with either <em>replacement</em> or the value …\n"],["sub!","Kernel","Kernel.html#method-i-sub-21","(*args)","<p>Equivalent to <code>$_.sub!(<em>args</em>)</code>.\n"],["sub!","String","String.html#method-i-sub-21","(*args)","<p>Performs the substitutions of <code>String#sub</code> in place, returning\n<em>str</em>, or <code>nil</code> if no substitutions were performed. …\n"],["succ","Integer","Integer.html#method-i-succ","()","<p>Returns the <code>Integer</code> equal to <em>int</em> + 1.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">next</span>      <span class=\"ruby-comment\">#=&gt; 2</span>\n(<span class=\"ruby-value\">-1</span>).<span class=\"ruby-identifier\">next</span>   <span class=\"ruby-comment\">#=&gt; 0</span>\n</pre>\n"],["succ","String","String.html#method-i-succ","()","<p>Returns the successor to <em>str</em>. The successor is calculated by\nincrementing characters starting from the …\n"],["succ","Time","Time.html#method-i-succ","()","<p>Return a new time object, one second later than <code>time</code>.\n"],["succ!","String","String.html#method-i-succ-21","()","<p>Equivalent to <code>String#succ</code>, but modifies the receiver in place.\n"],["success?","Process::Status","Process/Status.html#method-i-success-3F","()","<p>Returns <code>true</code> if <em>stat</em> is successful,\n<code>false</code> if not. Returns <code>nil</code> if <code>exited?</code>\nis not <code>true</code>.\n"],["success?","SystemExit","SystemExit.html#method-i-success-3F","()","<p>Returns <code>true</code> if exiting successful, <code>false</code> if not.\n"],["sum","String","String.html#method-i-sum","(p1 = v1)","<p>Returns a basic <em>n</em>-bit checksum of the characters in <em>str</em>,\nwhere <em>n</em> is the optional <code>Fixnum</code> parameter, defaulting\n…\n"],["superclass","Class","Class.html#method-i-superclass","()","<p>Returns the superclass of <em>class</em>, or <code>nil</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">superclass</span>     <span class=\"ruby-comment\">#=&gt; IO</span>\n<span class=\"ruby-constant\">IO</span>.<span class=\"ruby-identifier\">superclass</span>       <span class=\"ruby-comment\">#=&gt; Object</span>\n<span class=\"ruby-constant\">Object</span>.<span class=\"ruby-identifier\">superclass</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["swapcase","String","String.html#method-i-swapcase","()","<p>Returns a copy of <em>str</em> with uppercase alphabetic characters\nconverted to lowercase and lowercase characters …\n"],["swapcase!","String","String.html#method-i-swapcase-21","()","<p>Equivalent to <code>String#swapcase</code>, but modifies the receiver in\nplace, returning <em>str</em>, or <code>nil</code> if no changes …\n"],["switch","Process::GID","Process/GID.html#method-c-switch","()","<p>Switch the effective and real group IDs of the current process. If a\n<em>block</em> is given, the group IDs will …\n"],["switch","Process::UID","Process/UID.html#method-c-switch","()","<p>Switch the effective and real user IDs of the current process. If a\n<em>block</em> is given, the user IDs will …\n"],["symlink","File","File.html#method-c-symlink","(p1, p2)","<p>Creates a symbolic link called <em>new_name</em> for the existing file\n<em>old_name</em>. Raises a <code>NotImplemented</code> exception …\n"],["symlink?","File","File.html#method-c-symlink-3F","(p1)","<p>Returns <code>true</code> if the named file is a symbolic link.\n"],["symlink?","File::Stat","File/Stat.html#method-i-symlink-3F","()","<p>Returns <code>true</code> if <em>stat</em> is a symbolic link,\n<code>false</code> if it isn’t or if the operating system doesn’t support …\n"],["symlink?","FileTest","FileTest.html#method-i-symlink-3F","(p1)","<p>Returns <code>true</code> if the named file is a symbolic link.\n"],["sync","IO","IO.html#method-i-sync","()","<p>Returns the current “sync mode” of <em>ios</em>. When sync mode is true,\nall output is immediately flushed to …\n"],["sync=","IO","IO.html#method-i-sync-3D","(p1)","<p>Sets the “sync mode” to <code>true</code> or <code>false</code>. When sync\nmode is true, all output is immediately flushed to …\n"],["syscall","Kernel","Kernel.html#method-i-syscall","(*args)","<p>Calls the operating system function identified by <em>fixnum</em>, passing\nin the arguments, which must be either …\n"],["sysopen","IO","IO.html#method-c-sysopen","(p1, p2 = v2, p3 = v3)","<p>Opens the given path, returning the underlying file descriptor as a\n<code>Fixnum</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">IO</span>.<span class=\"ruby-identifier\">sysopen</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["sysread","IO","IO.html#method-i-sysread","(p1, p2 = v2)","<p>Reads <em>integer</em> bytes from <em>ios</em> using a low-level read and\nreturns them as a string. Do not mix with other …\n"],["sysseek","IO","IO.html#method-i-sysseek","(p1, p2 = v2)","<p>Seeks to a given <em>offset</em> in the stream according to the value of\n<em>whence</em> (see <code>IO#seek</code> for values of <em>whence</em> …\n"],["system","Kernel","Kernel.html#method-i-system","(*args)","<p>Executes <em>cmd</em> in a subshell, returning <code>true</code> if the\ncommand was found and ran successfully, <code>false</code> otherwise. …\n"],["syswrite","IO","IO.html#method-i-syswrite","(p1)","<p>Writes the given string to <em>ios</em> using a low-level write. Returns\nthe number of bytes written. Do not mix …\n"],["taint","Object","Object.html#method-i-taint","()","<p>Marks <em>obj</em> as tainted—if the <code>$SAFE</code> level is set\nappropriately, many method calls which might alter the …\n"],["tainted?","Object","Object.html#method-i-tainted-3F","()","<p>Returns <code>true</code> if the object is tainted.\n"],["take","Array","Array.html#method-i-take","(p1)","<p>Returns first n elements from <em>ary</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">4</span>, <span class=\"ruby-value\">5</span>, <span class=\"ruby-value\">0</span>]\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">take</span>(<span class=\"ruby-value\">3</span>)             <span class=\"ruby-comment\"># =&gt; [1, 2, 3]</span>\n</pre>\n"],["take","Enumerable","Enumerable.html#method-i-take","(p1)","<p>Returns first n elements from <em>enum</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">4</span>, <span class=\"ruby-value\">5</span>, <span class=\"ruby-value\">0</span>]\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">take</span>(<span class=\"ruby-value\">3</span>)             <span class=\"ruby-comment\"># =&gt; [1, 2, 3]</span>\n</pre>\n"],["take_while","Array","Array.html#method-i-take_while","()","<p>Passes elements to the block until the block returns nil or false, then\nstops iterating and returns an …\n"],["take_while","Enumerable","Enumerable.html#method-i-take_while","()","<p>Passes elements to the block until the block returns nil or false, then\nstops iterating and returns an …\n"],["tan","Math","Math.html#method-c-tan","(p1)","<p>Returns the tangent of <em>x</em> (expressed in radians).\n"],["tanh","Math","Math.html#method-c-tanh","(p1)","<p>Computes the hyperbolic tangent of <em>x</em> (expressed in radians).\n"],["tap","Object","Object.html#method-i-tap","()","<p>Yields <code>x</code> to the block, and then returns <code>x</code>. The\nprimary purpose of this method is to “tap into” …\n"],["tell","Dir","Dir.html#method-i-tell","()","<p>Returns the current position in <em>dir</em>. See also\n<code>Dir#seek</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testdir&quot;</span>)\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">tell</span>   <span class=\"ruby-comment\">#=&gt; 0</span>\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">read</span>  <span class=\"ruby-operator\">...</span>\n</pre>\n"],["tell","IO","IO.html#method-i-tell","()","<p>Returns the current offset (in bytes) of <em>ios</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>)\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">pos</span>    <span class=\"ruby-comment\">#=&gt; 0</span>\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">gets</span>   <span class=\"ruby-comment\">#=&gt; &quot;This ...</span>\n</pre>\n"],["terminate","Thread","Thread.html#method-i-terminate","()","<p>Terminates <em>thr</em> and schedules another thread to be run, returning\nthe terminated <code>Thread</code>.  If this is the …\n"],["terminate!","Thread","Thread.html#method-i-terminate-21","()","<p>Terminates <em>thr</em> without calling ensure clauses and schedules\nanother thread to be run, returning the terminated …\n"],["termsig","Process::Status","Process/Status.html#method-i-termsig","()","<p>Returns the number of the signal that caused <em>stat</em> to terminate (or\n<code>nil</code> if self was not terminated by …\n"],["test","Kernel","Kernel.html#method-i-test","(*args)","\n<pre>Uses the integer &lt;i&gt;aCmd&lt;/i&gt; to perform various tests on\n&lt;i&gt;file1&lt;/i&gt; (first table below) or on &lt;i&gt;file1&lt;/i&gt; ...</pre>\n"],["throw","Kernel","Kernel.html#method-i-throw","(p1, p2 = v2)","<p>Transfers control to the end of the active <code>catch</code> block waiting\nfor <em>symbol</em>. Raises <code>NameError</code> if there …\n"],["times","Integer","Integer.html#method-i-times","()","<p>Iterates block <em>int</em> times, passing in values from zero to\n<em>int</em> - 1.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">5</span>.<span class=\"ruby-identifier\">times</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">i</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">print</span> <span class=\"ruby-identifier\">i</span>, <span class=\"ruby-string\">&quot; &quot;</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n<p><em>produces:</em> ...\n"],["times","Process","Process.html#method-c-times","()","<p>Returns a <code>Tms</code> structure (see <code>Struct::Tms</code> on page\n388) that contains user and system CPU times for this …\n"],["times","Time","Time.html#method-c-times","()","<p>Deprecated in favor of <code>Process::times</code>\n"],["to_a","Array","Array.html#method-i-to_a","()","<p>Returns <em>self</em>. If called on a subclass of Array, converts the\nreceiver to an Array object.\n"],["to_a","Enumerable","Enumerable.html#method-i-to_a","(*args)","<p>Returns an array containing the items in <em>enum</em>.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">7</span>).<span class=\"ruby-identifier\">to_a</span>                       <span class=\"ruby-comment\">#=&gt; [1, 2, 3, 4, 5, 6, ...</span>\n</pre>\n"],["to_a","Hash","Hash.html#method-i-to_a","()","<p>Converts <em>hsh</em> to a nested array of <code>[</code> <em>key,\nvalue</em> <code>]</code> arrays.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = { <span class=\"ruby-string\">&quot;c&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">300</span>, <span class=\"ruby-string\">&quot;a&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">100</span>, <span class=\"ruby-string\">&quot;d&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">400</span>, <span class=\"ruby-string\">&quot;c&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_a","MatchData","MatchData.html#method-i-to_a","()","<p>Returns the array of matches.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">m</span> = <span class=\"ruby-regexp\">/(.)(.)(\\d+)(\\d)/</span>.<span class=\"ruby-identifier\">match</span>(<span class=\"ruby-string\">&quot;THX1138.&quot;</span>)\n<span class=\"ruby-identifier\">m</span>.<span class=\"ruby-identifier\">to_a</span>   <span class=\"ruby-comment\">#=&gt; [&quot;HX1138&quot;, &quot;H&quot;, &quot;X&quot;, ...</span>\n</pre>\n"],["to_a","NilClass","NilClass.html#method-i-to_a","()","<p>Always returns an empty array.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">to_a</span>   <span class=\"ruby-comment\">#=&gt; []</span>\n</pre>\n"],["to_a","Object","Object.html#method-i-to_a","()","<p>Returns an array representation of <em>obj</em>. For objects of class\n<code>Object</code> and others that don’t explicitly …\n"],["to_a","Struct","Struct.html#method-i-to_a","()","<p>Returns the values for this instance as an array.\n\n<pre>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new(&quot;Joe ...</pre>\n"],["to_a","Time","Time.html#method-i-to_a","()","<p>Returns a ten-element <em>array</em> of values for <em>time</em>: {<code>[\nsec, min, hour, day, month, year, wday, yday, isdst,</code> …\n"],["to_ary","Array","Array.html#method-i-to_ary","()","<p>Returns <em>self</em>.\n"],["to_enum","Object","Object.html#method-i-to_enum","(*args)","<p>Returns Enumerable::Enumerator.new(self, method, *args).\n<p>e.g.:\n\n<pre>str = &quot;xyz&quot;\n\nenum = str.enum_for(:each_byte) ...</pre>\n"],["to_f","Bignum","Bignum.html#method-i-to_f","()","<p>Converts <em>big</em> to a <code>Float</code>. If <em>big</em> doesn’t fit\nin a <code>Float</code>, the result is infinity.\n"],["to_f","Fixnum","Fixnum.html#method-i-to_f","()","<p>Converts <em>fix</em> to a <code>Float</code>.\n"],["to_f","Float","Float.html#method-i-to_f","()","<p>As <code>flt</code> is already a float, returns <em>self</em>.\n"],["to_f","NilClass","NilClass.html#method-i-to_f","()","<p>Always returns zero.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">to_f</span>   <span class=\"ruby-comment\">#=&gt; 0.0</span>\n</pre>\n"],["to_f","String","String.html#method-i-to_f","()","<p>Returns the result of interpreting leading characters in <em>str</em> as a\nfloating point number. Extraneous characters …\n"],["to_f","Time","Time.html#method-i-to_f","()","<p>Returns the value of <em>time</em> as a floating point number of seconds\nsince epoch.\n\n<pre>t = Time.now\n&quot;%10.5f&quot; % t.to_f ...</pre>\n"],["to_hash","Hash","Hash.html#method-i-to_hash","()","<p>Returns <em>self</em>.\n"],["to_i","Float","Float.html#method-i-to_i","()","<p>Returns <em>flt</em> truncated to an <code>Integer</code>.\n"],["to_i","IO","IO.html#method-i-to_i","()",""],["to_i","Integer","Integer.html#method-i-to_i","()","<p>As <em>int</em> is already an <code>Integer</code>, all these methods\nsimply return the receiver.\n"],["to_i","NilClass","NilClass.html#method-i-to_i","()","<p>Always returns zero.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">to_i</span>   <span class=\"ruby-comment\">#=&gt; 0</span>\n</pre>\n"],["to_i","Process::Status","Process/Status.html#method-i-to_i","()","<p>Returns the bits in <em>stat</em> as a <code>Fixnum</code>. Poking around\nin these bits is platform dependent.\n\n<pre>fork { exit 0xab ...</pre>\n"],["to_i","String","String.html#method-i-to_i","(p1 = v1)","<p>Returns the result of interpreting leading characters in <em>str</em> as an\ninteger base <em>base</em> (between 2 and 36). …\n"],["to_i","Symbol","Symbol.html#method-i-to_i","()","<p>Returns an integer that is unique for each symbol within a particular\nexecution of a program.\n\n<pre>:fred.to_i ...</pre>\n"],["to_i","Time","Time.html#method-i-to_i","()","<p>Returns the value of <em>time</em> as an integer number of seconds since\nepoch.\n\n<pre>t = Time.now\n&quot;%10.5f&quot; % t.to_f ...</pre>\n"],["to_int","Float","Float.html#method-i-to_int","()","<p>Returns <em>flt</em> truncated to an <code>Integer</code>.\n"],["to_int","Integer","Integer.html#method-i-to_int","()","<p>As <em>int</em> is already an <code>Integer</code>, all these methods\nsimply return the receiver.\n"],["to_int","Numeric","Numeric.html#method-i-to_int","()","<p>Invokes the child class’s <code>to_i</code> method to convert <em>num</em>\nto an integer.\n"],["to_int","Process::Status","Process/Status.html#method-i-to_int","()","<p>Returns the bits in <em>stat</em> as a <code>Fixnum</code>. Poking around\nin these bits is platform dependent.\n\n<pre>fork { exit 0xab ...</pre>\n"],["to_io","IO","IO.html#method-i-to_io","()","<p>Returns <em>ios</em>.\n"],["to_proc","Method","Method.html#method-i-to_proc","()","<p>Returns a <code>Proc</code> object corresponding to this method.\n"],["to_proc","Proc","Proc.html#method-i-to_proc","()","<p>Part of the protocol for converting objects to <code>Proc</code> objects.\nInstances of class <code>Proc</code> simply return themselves. …\n"],["to_proc","Symbol","Symbol.html#method-i-to_proc","()","<p>Returns a <em>Proc</em> object which respond to the given method by\n<em>sym</em>.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">collect</span>(<span class=\"ruby-operator\">&amp;</span>:<span class=\"ruby-identifier\">to_s</span>)  <span class=\"ruby-comment\">#=&gt; [&quot;1&quot;, &quot;2&quot;, ...</span>\n</pre>\n"],["to_s","Array","Array.html#method-i-to_s","()","<p>Returns <em>self</em><code>.join</code>.\n\n<pre class=\"ruby\">[ <span class=\"ruby-string\">&quot;a&quot;</span>, <span class=\"ruby-string\">&quot;e&quot;</span>, <span class=\"ruby-string\">&quot;i&quot;</span>, <span class=\"ruby-string\">&quot;o&quot;</span> ].<span class=\"ruby-identifier\">to_s</span>   <span class=\"ruby-comment\">#=&gt; &quot;aeio&quot;</span>\n</pre>\n"],["to_s","Bignum","Bignum.html#method-i-to_s","(p1 = v1)","<p>Returns a string containing the representation of <em>big</em> radix\n<em>base</em> (2 through 36).\n\n<pre>12345654321.to_s     ...</pre>\n"],["to_s","Exception","Exception.html#method-i-to_s","()","<p>Returns exception’s message (or the name of the exception if no message is\nset).\n"],["to_s","FalseClass","FalseClass.html#method-i-to_s","()","<p>‘nuf said…\n"],["to_s","Fixnum","Fixnum.html#method-i-to_s","(p1 = v1)","<p>Returns a string containing the representation of <em>fix</em> radix\n<em>base</em> (between 2 and 36).\n\n<pre>12345.to_s       ...</pre>\n"],["to_s","Float","Float.html#method-i-to_s","()","<p>Returns a string containing a representation of self. As well as a fixed or\nexponential form of the number, …\n"],["to_s","Hash","Hash.html#method-i-to_s","()","<p>Converts <em>hsh</em> to a string by converting the hash to an array of\n<code>[</code> <em>key, value</em> <code>]</code> pairs and then converting\n…\n"],["to_s","MatchData","MatchData.html#method-i-to_s","()","<p>Returns the entire matched string.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">m</span> = <span class=\"ruby-regexp\">/(.)(.)(\\d+)(\\d)/</span>.<span class=\"ruby-identifier\">match</span>(<span class=\"ruby-string\">&quot;THX1138.&quot;</span>)\n<span class=\"ruby-identifier\">m</span>.<span class=\"ruby-identifier\">to_s</span>   <span class=\"ruby-comment\">#=&gt; &quot;HX1138&quot;</span>\n</pre>\n"],["to_s","Method","Method.html#method-i-to_s","()","<p>Show the name of the underlying method.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;cat&quot;</span>.<span class=\"ruby-identifier\">method</span>(:<span class=\"ruby-identifier\">count</span>).<span class=\"ruby-identifier\">inspect</span>   <span class=\"ruby-comment\">#=&gt; &quot;#&lt;Method: String#count&gt;&quot;</span>\n</pre>\n"],["to_s","Module","Module.html#method-i-to_s","()","<p>Return a string representing this module or class. For basic classes and\nmodules, this is the name.  …\n"],["to_s","NameError","NameError.html#method-i-to_s","()","<p>Produce a nicely-formated string representing the <code>NameError</code>.\n"],["to_s","NilClass","NilClass.html#method-i-to_s","()","<p>Always returns the empty string.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">to_s</span>   <span class=\"ruby-comment\">#=&gt; &quot;&quot;</span>\n</pre>\n"],["to_s","Object","Object.html#method-i-to_s","()","<p>Returns a string representing <em>obj</em>. The default <code>to_s</code>\nprints the object’s class and an encoding of the …\n"],["to_s","Proc","Proc.html#method-i-to_s","()","<p>Shows the unique identifier for this proc, along with an indication of\nwhere the proc was defined.\n"],["to_s","Process::Status","Process/Status.html#method-i-to_s","()","<p>Equivalent to <em>stat</em><code>.to_i.to_s</code>.\n"],["to_s","Range","Range.html#method-i-to_s","()","<p>Convert this range object to a printable form.\n"],["to_s","Regexp","Regexp.html#method-i-to_s","()","<p>Returns a string containing the regular expression and its options (using\nthe <code>(?xxx:yyy)</code> notation. This …\n"],["to_s","String","String.html#method-i-to_s","()","<p>Returns the receiver.\n"],["to_s","Struct","Struct.html#method-i-to_s","()","<p>Describe the contents of this struct in a string.\n"],["to_s","Symbol","Symbol.html#method-i-to_s","()","<p>Returns the name or string corresponding to <em>sym</em>.\n\n<pre class=\"ruby\">:<span class=\"ruby-identifier\">fred</span>.<span class=\"ruby-identifier\">id2name</span>   <span class=\"ruby-comment\">#=&gt; &quot;fred&quot;</span>\n</pre>\n"],["to_s","Time","Time.html#method-i-to_s","()","<p>Returns a string representing <em>time</em>. Equivalent to calling\n<code>Time#strftime</code> with a format string of “<code>%a</code> …\n"],["to_s","TrueClass","TrueClass.html#method-i-to_s","()","<p>The string representation of <code>true</code> is “true”.\n"],["to_s","UnboundMethod","UnboundMethod.html#method-i-to_s","()","<p>Show the name of the underlying method.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;cat&quot;</span>.<span class=\"ruby-identifier\">method</span>(:<span class=\"ruby-identifier\">count</span>).<span class=\"ruby-identifier\">inspect</span>   <span class=\"ruby-comment\">#=&gt; &quot;#&lt;Method: String#count&gt;&quot;</span>\n</pre>\n"],["to_str","Exception","Exception.html#method-i-to_str","()","<p>Returns the result of invoking <code>exception.to_s</code>. Normally this\nreturns the exception’s message or name. …\n"],["to_str","String","String.html#method-i-to_str","()","<p>Returns the receiver.\n"],["to_sym","Fixnum","Fixnum.html#method-i-to_sym","()","<p>Returns the symbol whose integer value is <em>fix</em>. See also\n<code>Fixnum#id2name</code>.\n\n<pre>fred = :fred.to_i\nfred.id2name ...</pre>\n"],["to_sym","String","String.html#method-i-to_sym","()","<p>Returns the <code>Symbol</code> corresponding to <em>str</em>, creating the\nsymbol if it did not previously exist. See <code>Symbol#id2name</code> …\n"],["to_sym","Symbol","Symbol.html#method-i-to_sym","()","<p>In general, <code>to_sym</code> returns the <code>Symbol</code>\ncorresponding to an object. As <em>sym</em> is already a symbol,\n<code>self</code> is …\n"],["tr","String","String.html#method-i-tr","(p1, p2)","<p>Returns a copy of <em>str</em> with the characters in <em>from_str</em>\nreplaced by the corresponding characters in <em>to_str</em> …\n"],["tr!","String","String.html#method-i-tr-21","(p1, p2)","<p>Translates <em>str</em> in place, using the same rules as\n<code>String#tr</code>. Returns <em>str</em>, or <code>nil</code> if no\nchanges were made. …\n"],["tr_s","String","String.html#method-i-tr_s","(p1, p2)","<p>Processes a copy of <em>str</em> as described under <code>String#tr</code>,\nthen removes duplicate characters in regions that …\n"],["tr_s!","String","String.html#method-i-tr_s-21","(p1, p2)","<p>Performs <code>String#tr_s</code> processing on <em>str</em> in place,\nreturning <em>str</em>, or <code>nil</code> if no changes were made.\n"],["trace_var","Kernel","Kernel.html#method-i-trace_var","(p1, p2 = v2)","<p>Controls tracing of assignments to global variables. The parameter +symbol_\nidentifies the variable (as …\n"],["transpose","Array","Array.html#method-i-transpose","()","<p>Assumes that <em>self</em> is an array of arrays and transposes the rows\nand columns.\n\n<pre>a = [[1,2], [3,4], [5,6]] ...</pre>\n"],["trap","Kernel","Kernel.html#method-i-trap","(*args)","<p>Specifies the handling of signals. The first parameter is a signal name (a\nstring such as “SIGALRM”, …\n"],["trap","Signal","Signal.html#method-c-trap","(*args)","<p>Specifies the handling of signals. The first parameter is a signal name (a\nstring such as “SIGALRM”, …\n"],["truncate","File","File.html#method-i-truncate","(p1)","<p>Truncates <em>file</em> to at most <em>integer</em> bytes. The file must be\nopened for writing. Not available on all platforms. …\n"],["truncate","File","File.html#method-c-truncate","(p1, p2)","<p>Truncates the file <em>file_name</em> to be at most <em>integer</em> bytes\nlong. Not available on all platforms.\n\n<pre>f = File.new(&quot;out&quot;, ...</pre>\n"],["truncate","Float","Float.html#method-i-truncate","()","<p>Returns <em>flt</em> truncated to an <code>Integer</code>.\n"],["truncate","Integer","Integer.html#method-i-truncate","()","<p>As <em>int</em> is already an <code>Integer</code>, all these methods\nsimply return the receiver.\n"],["truncate","Numeric","Numeric.html#method-i-truncate","()","<p>Returns <em>num</em> truncated to an integer. <code>Numeric</code>\nimplements this by converting its value to a float and invoking …\n"],["tty?","IO","IO.html#method-i-tty-3F","()","<p>Returns <code>true</code> if <em>ios</em> is associated with a terminal\ndevice (tty), <code>false</code> otherwise.\n\n<pre>File.new(&quot;testfile&quot;).isatty ...</pre>\n"],["tv_sec","Time","Time.html#method-i-tv_sec","()","<p>Returns the value of <em>time</em> as an integer number of seconds since\nepoch.\n\n<pre>t = Time.now\n&quot;%10.5f&quot; % t.to_f ...</pre>\n"],["tv_usec","Time","Time.html#method-i-tv_usec","()","<p>Returns just the number of microseconds for <em>time</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>        <span class=\"ruby-comment\">#=&gt; Wed Apr 09 08:56:04 CDT 2003 ...</span>\n</pre>\n"],["type","Object","Object.html#method-i-type","()","<p>Deprecated synonym for <code>Object#class</code>.\n"],["uid","File::Stat","File/Stat.html#method-i-uid","()","<p>Returns the numeric user id of the owner of <em>stat</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">uid</span>   <span class=\"ruby-comment\">#=&gt; 501</span>\n</pre>\n"],["uid","Process","Process.html#method-c-uid","()","<p>Returns the (real) user ID of this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">uid</span>   <span class=\"ruby-comment\">#=&gt; 501</span>\n</pre>\n"],["uid=","Process","Process.html#method-c-uid-3D","(p1)","<p>Sets the (integer) user ID for this process. Not available on all\nplatforms.\n"],["umask","File","File.html#method-c-umask","(*args)","<p>Returns the current umask value for this process. If the optional argument\nis given, set the umask to …\n"],["unbind","Method","Method.html#method-i-unbind","()","<p>Dissociates <em>meth</em> from it’s current receiver. The resulting\n<code>UnboundMethod</code> can subsequently be bound to …\n"],["undef_method","Module","Module.html#method-i-undef_method","(*args)","<p>Prevents the current class from responding to calls to the named method.\nContrast this with <code>remove_method</code> …\n"],["undefine_finalizer","ObjectSpace","ObjectSpace.html#method-c-undefine_finalizer","(p1)","<p>Removes all finalizers for <em>obj</em>.\n"],["ungetc","IO","IO.html#method-i-ungetc","(p1)","<p>Pushes back one character (passed as a parameter) onto <em>ios</em>, such\nthat a subsequent buffered read will …\n"],["union","Regexp","Regexp.html#method-c-union","(*args)","<p>Return a <code>Regexp</code> object that is the union of the given\n<em>pattern</em>s, i.e., will match any of its parts. The …\n"],["uniq","Array","Array.html#method-i-uniq","()","<p>Returns a new array by removing duplicate values in <em>self</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [ <span class=\"ruby-string\">&quot;a&quot;</span>, <span class=\"ruby-string\">&quot;a&quot;</span>, <span class=\"ruby-string\">&quot;b&quot;</span>, <span class=\"ruby-string\">&quot;b&quot;</span>, <span class=\"ruby-string\">&quot;c&quot;</span> ]\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">uniq</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["uniq!","Array","Array.html#method-i-uniq-21","()","<p>Removes duplicate elements from <em>self</em>. Returns <code>nil</code> if\nno changes are made (that is, no duplicates are …\n"],["unlink","Dir","Dir.html#method-c-unlink","(p1)","<p>Deletes the named directory. Raises a subclass of\n<code>SystemCallError</code> if the directory isn’t empty.\n"],["unlink","File","File.html#method-c-unlink","(*args)","<p>Deletes the named files, returning the number of names passed as arguments.\nRaises an exception on any …\n"],["unpack","String","String.html#method-i-unpack","(p1)","<p>Decodes <em>str</em> (which may contain binary data) according to the\nformat string, returning an array of each …\n"],["unshift","Array","Array.html#method-i-unshift","(*args)","<p>Prepends objects to the front of <em>array</em>. other elements up one.\n\n<pre>a = [ &quot;b&quot;, &quot;c&quot;, &quot;d&quot; ]\na.unshift(&quot;a&quot;)   ...</pre>\n"],["untaint","Object","Object.html#method-i-untaint","()","<p>Removes the taint from <em>obj</em>.\n"],["untrace_var","Kernel","Kernel.html#method-i-untrace_var","(p1, p2 = v2)","<p>Removes tracing for the specified command on the given global variable and\nreturns <code>nil</code>. If no command …\n"],["upcase","String","String.html#method-i-upcase","()","<p>Returns a copy of <em>str</em> with all lowercase letters replaced with\ntheir uppercase counterparts. The operation …\n"],["upcase!","String","String.html#method-i-upcase-21","()","<p>Upcases the contents of <em>str</em>, returning <code>nil</code> if no\nchanges were made.\n"],["update","Hash","Hash.html#method-i-update","(p1)","<p>Adds the contents of <em>other_hash</em> to <em>hsh</em>.  If no block is\nspecified entries with duplicate keys are overwritten …\n"],["upto","Integer","Integer.html#method-i-upto","(p1)","<p>Iterates <em>block</em>, passing in integer values from <em>int</em> up to\nand including <em>limit</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">5</span>.<span class=\"ruby-identifier\">upto</span>(<span class=\"ruby-value\">10</span>) { <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">i</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">print</span> <span class=\"ruby-identifier\">i</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["upto","String","String.html#method-i-upto","(p1, p2 = v2)","<p>Iterates through successive values, starting at <em>str</em> and ending at\n<em>other_str</em> inclusive, passing each value …\n"],["usec","Time","Time.html#method-i-usec","()","<p>Returns just the number of microseconds for <em>time</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>        <span class=\"ruby-comment\">#=&gt; Wed Apr 09 08:56:04 CDT 2003 ...</span>\n</pre>\n"],["utc","Time","Time.html#method-c-utc","(*args)","<p>Creates a time based on given values, interpreted as UTC (GMT). The year\nmust be specified. Other values …\n"],["utc","Time","Time.html#method-i-utc","()","<p>Converts <em>time</em> to UTC (GMT), modifying the receiver.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>   <span class=\"ruby-comment\">#=&gt; Wed Apr 09 08:56:03 CDT 2003</span>\n<span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">gmt?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["utc?","Time","Time.html#method-i-utc-3F","()","<p>Returns <code>true</code> if <em>time</em> represents a time in UTC (GMT).\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>                        <span class=\"ruby-comment\">#=&gt; Wed Apr 09 ...</span>\n</pre>\n"],["utc_offset","Time","Time.html#method-i-utc_offset","()","<p>Returns the offset in seconds between the timezone of <em>time</em> and\nUTC.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">gm</span>(<span class=\"ruby-value\">2000</span>,<span class=\"ruby-value\">1</span>,<span class=\"ruby-value\">1</span>,<span class=\"ruby-value\">20</span>,<span class=\"ruby-value\">15</span>,<span class=\"ruby-value\">1</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["utime","File","File.html#method-c-utime","(p1, p2, *args)","<p>Sets the access and modification times of each named file to the first two\narguments. Returns the number …\n"],["value","Thread","Thread.html#method-i-value","()","<p>Waits for <em>thr</em> to complete (via <code>Thread#join</code>) and\nreturns its value.\n\n<pre>a = Thread.new { 2 + 2 }\na.value   ...</pre>\n"],["value?","Hash","Hash.html#method-i-value-3F","(p1)","<p>Returns <code>true</code> if the given value is present for some key in\n<em>hsh</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = { <span class=\"ruby-string\">&quot;a&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">100</span>, <span class=\"ruby-string\">&quot;b&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">200</span> }\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">has_value?</span>(<span class=\"ruby-value\">100</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["values","Hash","Hash.html#method-i-values","()","<p>Returns a new array populated with the values from <em>hsh</em>. See also\n<code>Hash#keys</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = { <span class=\"ruby-string\">&quot;a&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">100</span>, <span class=\"ruby-string\">&quot;b&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">200</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["values","Struct","Struct.html#method-i-values","()","<p>Returns the values for this instance as an array.\n\n<pre>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new(&quot;Joe ...</pre>\n"],["values_at","Array","Array.html#method-i-values_at","(*args)","<p>Returns an array containing the elements in <em>self</em> corresponding to\nthe given selector(s). The selectors …\n"],["values_at","Hash","Hash.html#method-i-values_at","(*args)","<p>Return an array containing the values associated with the given keys. Also\nsee <code>Hash.select</code>.\n\n<pre>h = { &quot;cat&quot; ...</pre>\n"],["values_at","MatchData","MatchData.html#method-i-values_at","(*args)","<p>Uses each <em>index</em> to access the matching values, returning an array\nof the corresponding matches.\n\n<pre>m = /(.)(.)(\\d+)(\\d)/.match(&quot;THX1138: ...</pre>\n"],["values_at","Struct","Struct.html#method-i-values_at","(*args)","<p>Returns an array containing the elements in <em>self</em> corresponding to\nthe given selector(s). The selectors …\n"],["wait","Process","Process.html#method-c-wait","(p1 = v1, p2 = v2)","<p>Waits for a child process to exit, returns its process id, and sets\n<code>$?</code> to a <code>Process::Status</code> object containing …\n"],["wait2","Process","Process.html#method-c-wait2","(*args)","<p>Waits for a child process to exit (see Process::waitpid for exact\nsemantics) and returns an array containing …\n"],["waitall","Process","Process.html#method-c-waitall","()","<p>Waits for all children, returning an array of <em>pid</em>/<em>status</em>\npairs (where <em>status</em> is a <code>Process::Status</code> object). …\n"],["waitpid","Process","Process.html#method-c-waitpid","(p1 = v1, p2 = v2)","<p>Waits for a child process to exit, returns its process id, and sets\n<code>$?</code> to a <code>Process::Status</code> object containing …\n"],["waitpid2","Process","Process.html#method-c-waitpid2","(*args)","<p>Waits for a child process to exit (see Process::waitpid for exact\nsemantics) and returns an array containing …\n"],["wakeup","Thread","Thread.html#method-i-wakeup","()","<p>Marks <em>thr</em> as eligible for scheduling (it may still remain blocked\non I/O, however). Does not invoke the …\n"],["warn","Kernel","Kernel.html#method-i-warn","(p1)","<p>Display the given message (followed by a newline) on STDERR unless warnings\nare disabled (for example …\n"],["wday","Time","Time.html#method-i-wday","()","<p>Returns an integer representing the day of the week, 0..6, with Sunday ==\n0.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>   <span class=\"ruby-comment\">#=&gt; Wed Apr ...</span>\n</pre>\n"],["with_index","Enumerable::Enumerator","Enumerable/Enumerator.html#method-i-with_index","()","<p>Iterates the given block for each elements with an index, which start from\n0.  If no block is given, …\n"],["writable?","File","File.html#method-c-writable-3F","(p1)","<p>Returns <code>true</code> if the named file is writable by the effective\nuser id of this process.\n"],["writable?","File::Stat","File/Stat.html#method-i-writable-3F","()","<p>Returns <code>true</code> if <em>stat</em> is writable by the effective\nuser id of this process.\n\n<pre>File.stat(&quot;testfile&quot;).writable? ...</pre>\n"],["writable?","FileTest","FileTest.html#method-i-writable-3F","(p1)","<p>Returns <code>true</code> if the named file is writable by the effective\nuser id of this process.\n"],["writable_real?","File","File.html#method-c-writable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is writable by the real user id\nof this process.\n"],["writable_real?","File::Stat","File/Stat.html#method-i-writable_real-3F","()","<p>Returns <code>true</code> if <em>stat</em> is writable by the real user id\nof this process.\n\n<pre>File.stat(&quot;testfile&quot;).writable_real? ...</pre>\n"],["writable_real?","FileTest","FileTest.html#method-i-writable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is writable by the real user id\nof this process.\n"],["write","IO","IO.html#method-i-write","(p1)","<p>Writes the given string to <em>ios</em>. The stream must be opened for\nwriting. If the argument is not a string, …\n"],["write_nonblock","IO","IO.html#method-i-write_nonblock","(p1)","<p>Writes the given string to <em>ios</em> using write(2) system call after\nO_NONBLOCK is set for the underlying …\n"],["yday","Time","Time.html#method-i-yday","()","<p>Returns an integer representing the day of the year, 1..366.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>   <span class=\"ruby-comment\">#=&gt; Wed Apr 09 08:56:04 CDT ...</span>\n</pre>\n"],["year","Time","Time.html#method-i-year","()","<p>Returns the year for <em>time</em> (including the century).\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>   <span class=\"ruby-comment\">#=&gt; Wed Apr 09 08:56:04 CDT 2003</span>\n<span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">year</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["zero?","File","File.html#method-c-zero-3F","(p1)","<p>Returns <code>true</code> if the named file exists and has a zero size.\n"],["zero?","File::Stat","File/Stat.html#method-i-zero-3F","()","<p>Returns <code>true</code> if <em>stat</em> is a zero-length file;\n<code>false</code> otherwise.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">zero?</span>   <span class=\"ruby-comment\">#=&gt; false</span>\n</pre>\n"],["zero?","FileTest","FileTest.html#method-i-zero-3F","(p1)","<p>Returns <code>true</code> if the named file exists and has a zero size.\n"],["zero?","Fixnum","Fixnum.html#method-i-zero-3F","()","<p>Returns <code>true</code> if <em>fix</em> is zero.\n"],["zero?","Float","Float.html#method-i-zero-3F","()","<p>Returns <code>true</code> if <em>flt</em> is 0.0.\n"],["zero?","Numeric","Numeric.html#method-i-zero-3F","()","<p>Returns <code>true</code> if <em>num</em> has a zero value.\n"],["zip","Array","Array.html#method-i-zip","(*args)","<p>Converts any arguments to arrays, then merges elements of <em>self</em>\nwith corresponding elements from each …\n"],["zip","Enumerable","Enumerable.html#method-i-zip","(*args)","<p>Converts any arguments to arrays, then merges elements of <em>enum</em>\nwith corresponding elements from each …\n"],["zone","Time","Time.html#method-i-zone","()","<p>Returns the name of the time zone used for <em>time</em>. As of Ruby 1.8,\nreturns “UTC” rather than “GMT” …\n"],["|","Array","Array.html#method-i-7C","(p1)","<p>Set Union—Returns a new array by joining this array with other_array,\nremoving duplicates.\n\n<pre>[ &quot;a&quot;, &quot;b&quot;, ...</pre>\n"],["|","Bignum","Bignum.html#method-i-7C","(p1)","<p>Performs bitwise <code>or</code> between <em>big</em> and <em>numeric</em>.\n"],["|","FalseClass","FalseClass.html#method-i-7C","(p1)","<p>Or—Returns <code>false</code> if <em>obj</em> is <code>nil</code> or\n<code>false</code>; <code>true</code> otherwise.\n"],["|","Fixnum","Fixnum.html#method-i-7C","(p1)","<p>Bitwise OR.\n"],["|","NilClass","NilClass.html#method-i-7C","(p1)","<p>Or—Returns <code>false</code> if <em>obj</em> is <code>nil</code> or\n<code>false</code>; <code>true</code> otherwise.\n"],["|","TrueClass","TrueClass.html#method-i-7C","(p1)","<p>Or—Returns <code>true</code>. As <em>anObject</em> is an argument to a\nmethod call, it is always evaluated; there is no short-circuit …\n"],["~","Bignum","Bignum.html#method-i-7E","()","<p>Inverts the bits in big. As Bignums are conceptually infinite length, the\nresult acts as if it had an …\n"],["~","Fixnum","Fixnum.html#method-i-7E","()","<p>One’s complement: returns a number where each bit is flipped.\n"],["~","Regexp","Regexp.html#method-i-7E","()","<p>Match—Matches <em>rxp</em> against the contents of <code>$_</code>.\nEquivalent to <code><em>rxp</em> =~ $_</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">$_</span> = <span class=\"ruby-string\">&quot;input data&quot;</span>\n<span class=\"ruby-operator\">~</span> <span class=\"ruby-regexp\">/at/</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"]]}}